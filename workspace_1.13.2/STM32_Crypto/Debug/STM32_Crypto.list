
STM32_Crypto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  0800c280  0800c280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc34  0800cc34  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc34  0800cc34  0001cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc3c  0800cc3c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc3c  0800cc3c  0001cc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc40  0800cc40  0001cc40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800cc44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  0800ccac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  0800ccac  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec37  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003628  00000000  00000000  0003ed12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  00042340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001254  00000000  00000000  00043ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026aca  00000000  00000000  00044d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf25  00000000  00000000  0006b7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc6fd  00000000  00000000  000876f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d68  00000000  00000000  00163df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c268 	.word	0x0800c268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800c268 	.word	0x0800c268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Crypto_RSA_Init>:
#define RSA_TEST_BYTES 256 /* 256 bytes * 8 = 2048-bit key length */
#define AES_KEY_SZ 32 /* 32*8 = 256-bit AES KEY */
#define HEAP_HINT NULL

void Crypto_RSA_Init(void)
{
 800057c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000580:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 8000584:	b083      	sub	sp, #12
 8000586:	af02      	add	r7, sp, #8
 8000588:	466b      	mov	r3, sp
 800058a:	461e      	mov	r6, r3
    int    ret;
    size_t bytes;
    WC_RNG rng;
    RsaKey key;
    word32 idx = 0;
 800058c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8000590:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
    const word32 outSz   = RSA_TEST_BYTES;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80005a0:	f102 021c 	add.w	r2, r2, #28
 80005a4:	6013      	str	r3, [r2, #0]
    const byte in[] = "Thisismyfakeaeskeythatis32bytes!";
 80005a6:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80005aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80005ae:	4aa8      	ldr	r2, [pc, #672]	; (8000850 <Crypto_RSA_Init+0x2d4>)
 80005b0:	461c      	mov	r4, r3
 80005b2:	4615      	mov	r5, r2
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	682b      	ldr	r3, [r5, #0]
 80005be:	7023      	strb	r3, [r4, #0]
    word32 inLen = XSTRLEN((const char*)in);
 80005c0:	2320      	movs	r3, #32
 80005c2:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80005c6:	f102 0218 	add.w	r2, r2, #24
 80005ca:	6013      	str	r3, [r2, #0]

    byte tmp[sizeof_client_key_der_2048];
 80005cc:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
 80005d0:	3b01      	subs	r3, #1
 80005d2:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80005d6:	f102 0214 	add.w	r2, r2, #20
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
 80005e0:	461a      	mov	r2, r3
 80005e2:	2300      	movs	r3, #0
 80005e4:	4692      	mov	sl, r2
 80005e6:	469b      	mov	fp, r3
 80005e8:	f04f 0200 	mov.w	r2, #0
 80005ec:	f04f 0300 	mov.w	r3, #0
 80005f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80005f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80005f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80005fc:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
 8000600:	461a      	mov	r2, r3
 8000602:	2300      	movs	r3, #0
 8000604:	4690      	mov	r8, r2
 8000606:	4699      	mov	r9, r3
 8000608:	f04f 0200 	mov.w	r2, #0
 800060c:	f04f 0300 	mov.w	r3, #0
 8000610:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000614:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000618:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800061c:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
 8000620:	3307      	adds	r3, #7
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	ebad 0d03 	sub.w	sp, sp, r3
 800062a:	ab02      	add	r3, sp, #8
 800062c:	3300      	adds	r3, #0
 800062e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8000632:	f102 0210 	add.w	r2, r2, #16
 8000636:	6013      	str	r3, [r2, #0]
    byte out[RSA_TEST_BYTES];
    byte plain[RSA_TEST_BYTES];

    char fName[] = "encryptedAesKey";
 8000638:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800063c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8000640:	4a84      	ldr	r2, [pc, #528]	; (8000854 <Crypto_RSA_Init+0x2d8>)
 8000642:	461c      	mov	r4, r3
 8000644:	4613      	mov	r3, r2
 8000646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    FILE* fStream;

    /* initialize stack structures */
    XMEMSET(&rng, 0, sizeof(rng));
 800064c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8000650:	f103 0314 	add.w	r3, r3, #20
 8000654:	2210      	movs	r2, #16
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f00b f97f 	bl	800b95c <memset>
    XMEMSET(&key, 0, sizeof(key));
 800065e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000662:	3b08      	subs	r3, #8
 8000664:	f241 125c 	movw	r2, #4444	; 0x115c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00b f976 	bl	800b95c <memset>
    XMEMSET(&out, 0, sizeof(out));
 8000670:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000674:	3b10      	subs	r3, #16
 8000676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f00b f96d 	bl	800b95c <memset>
    XMEMSET(&plain, 0, sizeof(plain));
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	3b10      	subs	r3, #16
 8000688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00b f964 	bl	800b95c <memset>

    bytes = (size_t)sizeof_client_key_der_2048;
 8000694:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
 8000698:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 800069c:	f102 020c 	add.w	r2, r2, #12
 80006a0:	6013      	str	r3, [r2, #0]

    /* Copy in existing Private RSA key into "tmp" to use for encrypting */
    XMEMCPY(tmp, client_key_der_2048, (size_t)sizeof_client_key_der_2048);
 80006a2:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
 80006a6:	461a      	mov	r2, r3
 80006a8:	496b      	ldr	r1, [pc, #428]	; (8000858 <Crypto_RSA_Init+0x2dc>)
 80006aa:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80006ae:	f103 0310 	add.w	r3, r3, #16
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	f00b f9f0 	bl	800ba98 <memcpy>

    /* Initialize the RSA key */
    ret = wc_InitRsaKey(&key, HEAP_HINT);
 80006b8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80006bc:	3b08      	subs	r3, #8
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 ffdd 	bl	8005680 <wc_InitRsaKey>
 80006c6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80006ca:	f103 0308 	add.w	r3, r3, #8
 80006ce:	6018      	str	r0, [r3, #0]
    check_ret(ret, "wc_InitRsaKey_ex");
 80006d0:	4962      	ldr	r1, [pc, #392]	; (800085c <Crypto_RSA_Init+0x2e0>)
 80006d2:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80006d6:	f103 0308 	add.w	r3, r3, #8
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	f000 f8d6 	bl	800088c <check_ret>

    /* Decode the private key from buffer "tmp" into RsaKey stucture "key"  */
    ret = wc_RsaPrivateKeyDecode(tmp, &idx, &key, (word32)bytes);
 80006e0:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80006e4:	3a08      	subs	r2, #8
 80006e6:	f507 7110 	add.w	r1, r7, #576	; 0x240
 80006ea:	390c      	subs	r1, #12
 80006ec:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80006f0:	f103 030c 	add.w	r3, r3, #12
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f507 509d 	add.w	r0, r7, #5024	; 0x13a0
 80006fa:	f100 0010 	add.w	r0, r0, #16
 80006fe:	6800      	ldr	r0, [r0, #0]
 8000700:	f003 fd4e 	bl	80041a0 <wc_RsaPrivateKeyDecode>
 8000704:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8000708:	f103 0308 	add.w	r3, r3, #8
 800070c:	6018      	str	r0, [r3, #0]
    check_ret(ret, "wc_RsaPrivateKeyDecode");
 800070e:	4954      	ldr	r1, [pc, #336]	; (8000860 <Crypto_RSA_Init+0x2e4>)
 8000710:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8000714:	f103 0308 	add.w	r3, r3, #8
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	f000 f8b7 	bl	800088c <check_ret>

    /* Initialize the RNG structure */
    ret = wc_InitRng(&rng);
 800071e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8000722:	f103 0314 	add.w	r3, r3, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fbf3 	bl	8004f12 <wc_InitRng>
 800072c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8000730:	f103 0308 	add.w	r3, r3, #8
 8000734:	6018      	str	r0, [r3, #0]
    check_ret(ret, "wc_InitRng");
 8000736:	494b      	ldr	r1, [pc, #300]	; (8000864 <Crypto_RSA_Init+0x2e8>)
 8000738:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800073c:	f103 0308 	add.w	r3, r3, #8
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	f000 f8a3 	bl	800088c <check_ret>

    /* Implement RSA blinding to defeat side-channel attacks */
#ifdef WC_RSA_BLINDING /* HIGHLY RECOMMENDED! */
    ret = wc_RsaSetRNG(&key, &rng);
 8000746:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800074a:	f102 0214 	add.w	r2, r2, #20
 800074e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000752:	3b08      	subs	r3, #8
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f005 fec0 	bl	80064dc <wc_RsaSetRNG>
 800075c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8000760:	f103 0308 	add.w	r3, r3, #8
 8000764:	6018      	str	r0, [r3, #0]
    check_ret(ret, "wc_RsaSetRNG");
 8000766:	4940      	ldr	r1, [pc, #256]	; (8000868 <Crypto_RSA_Init+0x2ec>)
 8000768:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800076c:	f103 0308 	add.w	r3, r3, #8
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	f000 f88b 	bl	800088c <check_ret>
#endif

    /* Sign the AES key effectively "Encrypting it with the private key" */
    ret = wc_RsaSSL_Sign(in, inLen, out, outSz, &key, &rng);
 8000776:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800077a:	3a10      	subs	r2, #16
 800077c:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8000780:	3810      	subs	r0, #16
 8000782:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8000786:	f103 0314 	add.w	r3, r3, #20
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000790:	3b08      	subs	r3, #8
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8000798:	f103 031c 	add.w	r3, r3, #28
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f507 519d 	add.w	r1, r7, #5024	; 0x13a0
 80007a2:	f101 0118 	add.w	r1, r1, #24
 80007a6:	6809      	ldr	r1, [r1, #0]
 80007a8:	f005 fe5d 	bl	8006466 <wc_RsaSSL_Sign>
 80007ac:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80007b0:	f103 0308 	add.w	r3, r3, #8
 80007b4:	6018      	str	r0, [r3, #0]
    check_ret(ret, "wc_RsaSSL_Sign");
 80007b6:	492d      	ldr	r1, [pc, #180]	; (800086c <Crypto_RSA_Init+0x2f0>)
 80007b8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80007bc:	f103 0308 	add.w	r3, r3, #8
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f000 f863 	bl	800088c <check_ret>

    /* Output to file */
    fStream = fopen(fName, "wb");
 80007c6:	463b      	mov	r3, r7
 80007c8:	4929      	ldr	r1, [pc, #164]	; (8000870 <Crypto_RSA_Init+0x2f4>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00a feaa 	bl	800b524 <fopen>
 80007d0:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80007d4:	f103 0304 	add.w	r3, r3, #4
 80007d8:	6018      	str	r0, [r3, #0]
    if (!fStream) {
 80007da:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80007de:	f103 0304 	add.w	r3, r3, #4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d104      	bne.n	80007f2 <Crypto_RSA_Init+0x276>
        printf("Failed to open file: %s\n", fName);
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <Crypto_RSA_Init+0x2f8>)
 80007ee:	f00a ff1b 	bl	800b628 <iprintf>
        //return -99;
    }
    ret = (int) fwrite(out, 1, RSA_TEST_BYTES, fStream);
 80007f2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80007f6:	3810      	subs	r0, #16
 80007f8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80007fc:	f103 0304 	add.w	r3, r3, #4
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000806:	2101      	movs	r1, #1
 8000808:	f00a ff00 	bl	800b60c <fwrite>
 800080c:	4603      	mov	r3, r0
 800080e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8000812:	f102 0208 	add.w	r2, r2, #8
 8000816:	6013      	str	r3, [r2, #0]
    fclose(fStream);
 8000818:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800081c:	f103 0304 	add.w	r3, r3, #4
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	f00a fc7d 	bl	800b120 <fclose>
    if (ret <= 0) {
 8000826:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800082a:	f103 0308 	add.w	r3, r3, #8
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	dc04      	bgt.n	800083e <Crypto_RSA_Init+0x2c2>
        printf("Something went wrong writing to file %s\n", fName);
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <Crypto_RSA_Init+0x2fc>)
 800083a:	f00a fef5 	bl	800b628 <iprintf>
 800083e:	46b5      	mov	sp, r6
    }

    //return ret;
}
 8000840:	bf00      	nop
 8000842:	f507 579e 	add.w	r7, r7, #5056	; 0x13c0
 8000846:	3704      	adds	r7, #4
 8000848:	46bd      	mov	sp, r7
 800084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800084e:	bf00      	nop
 8000850:	0800c324 	.word	0x0800c324
 8000854:	0800c348 	.word	0x0800c348
 8000858:	0800c374 	.word	0x0800c374
 800085c:	0800c280 	.word	0x0800c280
 8000860:	0800c294 	.word	0x0800c294
 8000864:	0800c2ac 	.word	0x0800c2ac
 8000868:	0800c2b8 	.word	0x0800c2b8
 800086c:	0800c2c8 	.word	0x0800c2c8
 8000870:	0800c2d8 	.word	0x0800c2d8
 8000874:	0800c2dc 	.word	0x0800c2dc
 8000878:	0800c2f8 	.word	0x0800c2f8

0800087c <Crypto_RSA_Encrypt>:


void Crypto_RSA_Encrypt(void){
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <check_ret>:

void check_ret(int val, char* fail)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
    if (val < 0) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	da08      	bge.n	80008ae <check_ret+0x22>
        printf("%s Failed with error %d\n", fail, val);
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <check_ret+0x2c>)
 80008a2:	f00a fec1 	bl	800b628 <iprintf>
        exit(-99);
 80008a6:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80008aa:	f00a fb13 	bl	800aed4 <exit>
    }
    return;
 80008ae:	bf00      	nop
}
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	0800c358 	.word	0x0800c358

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 fb1e 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f80b 	bl	80008de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 f89e 	bl	8000a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008cc:	f000 f86c 	bl	80009a8 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80008d0:	f000 f856 	bl	8000980 <MX_RNG_Init>

  /* USER CODE BEGIN 2 */
  Crypto_RSA_Init();
 80008d4:	f7ff fe52 	bl	800057c <Crypto_RSA_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Crypto_RSA_Encrypt();
 80008d8:	f7ff ffd0 	bl	800087c <Crypto_RSA_Encrypt>
 80008dc:	e7fc      	b.n	80008d8 <main+0x1c>

080008de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b096      	sub	sp, #88	; 0x58
 80008e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2244      	movs	r2, #68	; 0x44
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00b f835 	bl	800b95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000900:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000904:	f000 fdfe 	bl	8001504 <HAL_PWREx_ControlVoltageScaling>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800090e:	f000 f8e1 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000912:	2302      	movs	r3, #2
 8000914:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800092c:	230a      	movs	r3, #10
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000930:	2307      	movs	r3, #7
 8000932:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fe35 	bl	80015b0 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800094c:	f000 f8c2 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2303      	movs	r3, #3
 8000956:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	2104      	movs	r1, #4
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fa35 	bl	8001dd8 <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000974:	f000 f8ae 	bl	8000ad4 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3758      	adds	r7, #88	; 0x58
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_RNG_Init+0x20>)
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <MX_RNG_Init+0x24>)
 8000988:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_RNG_Init+0x20>)
 800098c:	f001 ffa6 	bl	80028dc <HAL_RNG_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000996:	f000 f89d 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000084 	.word	0x20000084
 80009a4:	50060800 	.word	0x50060800

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART2_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ec:	f002 f84d 	bl	8002a8a <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f86d 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000094 	.word	0x20000094
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2120      	movs	r1, #32
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 fd17 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <MX_GPIO_Init+0xc8>)
 8000aa2:	f000 fb8f 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 fb80 	bl	80011c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000800 	.word	0x48000800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09e      	sub	sp, #120	; 0x78
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2268      	movs	r2, #104	; 0x68
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00a ff0f 	bl	800b95c <memset>
  if(hrng->Instance==RNG)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_RNG_MspInit+0x80>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d12a      	bne.n	8000b9e <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b4c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000b4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b52:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b60:	2307      	movs	r3, #7
 8000b62:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000b6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fb52 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8000b82:	f7ff ffa7 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_RNG_MspInit+0x84>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_RNG_MspInit+0x84>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_RNG_MspInit+0x84>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3778      	adds	r7, #120	; 0x78
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	50060800 	.word	0x50060800
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_RNG_MspDeInit+0x2c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d105      	bne.n	8000bce <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_RNG_MspDeInit+0x30>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_RNG_MspDeInit+0x30>)
 8000bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	50060800 	.word	0x50060800
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0a4      	sub	sp, #144	; 0x90
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2268      	movs	r2, #104	; 0x68
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a fea9 	bl	800b95c <memset>
  if(huart->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_UART_MspInit+0xb0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d13a      	bne.n	8000c8a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fafd 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff ff52 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c60:	230c      	movs	r3, #12
 8000c62:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f000 fa9d 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3790      	adds	r7, #144	; 0x90
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 f966 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cfa:	f00a fe9f 	bl	800ba3c <__errno>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2216      	movs	r2, #22
 8000d02:	601a      	str	r2, [r3, #0]
  return -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_exit>:

void _exit (int status)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ffe7 	bl	8000cf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d22:	e7fe      	b.n	8000d22 <_exit+0x12>

08000d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
  }

  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
  }
  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_open>:

int _open(char *path, int flags, ...)
{
 8000dfe:	b40e      	push	{r1, r2, r3}
 8000e00:	b480      	push	{r7}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	b003      	add	sp, #12
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f00a fdf6 	bl	800ba3c <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20028000 	.word	0x20028000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	2000011c 	.word	0x2000011c
 8000e84:	20000280 	.word	0x20000280

08000e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb0:	f7ff ffea 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f00a fdb5 	bl	800ba48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f7ff fced 	bl	80008bc <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ef0:	0800cc44 	.word	0x0800cc44
  ldr r2, =_sbss
 8000ef4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ef8:	20000280 	.word	0x20000280

08000efc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_Init+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_Init+0x3c>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f920 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f80f 	bl	8000f40 <HAL_InitTick>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e001      	b.n	8000f32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f2e:	f7ff fdd7 	bl	8000ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d023      	beq.n	8000f9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_InitTick+0x70>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x6c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f91d 	bl	80011aa <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10f      	bne.n	8000f96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d809      	bhi.n	8000f90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f8f5 	bl	8001172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_InitTick+0x74>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e007      	b.n	8000fa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e004      	b.n	8000fa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e001      	b.n	8000fa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000120 	.word	0x20000120

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000120 	.word	0x20000120

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff47 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff5c 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffb0 	bl	8001118 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e154      	b.n	800147e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8146 	beq.w	8001478 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_GPIO_Init+0x40>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d130      	bne.n	8001266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123a:	2201      	movs	r2, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	f003 0201 	and.w	r2, r3, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b03      	cmp	r3, #3
 8001270:	d017      	beq.n	80012a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d123      	bne.n	80012f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	6939      	ldr	r1, [r7, #16]
 80012f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0203 	and.w	r2, r3, #3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80a0 	beq.w	8001478 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <HAL_GPIO_Init+0x2d8>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133c:	4a57      	ldr	r2, [pc, #348]	; (800149c <HAL_GPIO_Init+0x2d8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6613      	str	r3, [r2, #96]	; 0x60
 8001344:	4b55      	ldr	r3, [pc, #340]	; (800149c <HAL_GPIO_Init+0x2d8>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001350:	4a53      	ldr	r2, [pc, #332]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800137a:	d019      	beq.n	80013b0 <HAL_GPIO_Init+0x1ec>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <HAL_GPIO_Init+0x2e0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d013      	beq.n	80013ac <HAL_GPIO_Init+0x1e8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a48      	ldr	r2, [pc, #288]	; (80014a8 <HAL_GPIO_Init+0x2e4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d00d      	beq.n	80013a8 <HAL_GPIO_Init+0x1e4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_GPIO_Init+0x2e8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x1e0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <HAL_GPIO_Init+0x2ec>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_GPIO_Init+0x1dc>
 800139c:	2304      	movs	r3, #4
 800139e:	e008      	b.n	80013b2 <HAL_GPIO_Init+0x1ee>
 80013a0:	2307      	movs	r3, #7
 80013a2:	e006      	b.n	80013b2 <HAL_GPIO_Init+0x1ee>
 80013a4:	2303      	movs	r3, #3
 80013a6:	e004      	b.n	80013b2 <HAL_GPIO_Init+0x1ee>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e002      	b.n	80013b2 <HAL_GPIO_Init+0x1ee>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <HAL_GPIO_Init+0x1ee>
 80013b0:	2300      	movs	r3, #0
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	f002 0203 	and.w	r2, r2, #3
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	4093      	lsls	r3, r2
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c2:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f4:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141e:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001448:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f aea3 	bne.w	80011d4 <HAL_GPIO_Init+0x10>
  }
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	48001000 	.word	0x48001000
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001512:	d130      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001520:	d038      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2232      	movs	r2, #50	; 0x32
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	e002      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155c:	d102      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f2      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d110      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00f      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d007      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f000 bc02 	b.w	8001dc8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c4:	4b96      	ldr	r3, [pc, #600]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ce:	4b94      	ldr	r3, [pc, #592]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80e4 	beq.w	80017ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_RCC_OscConfig+0x4c>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	f040 808b 	bne.w	800170a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 8087 	bne.w	800170a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x64>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e3d9      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <HAL_RCC_OscConfig+0x7e>
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162c:	e005      	b.n	800163a <HAL_RCC_OscConfig+0x8a>
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163a:	4293      	cmp	r3, r2
 800163c:	d223      	bcs.n	8001686 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd8c 	bl	8002160 <RCC_SetFlashLatencyFromMSIRange>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e3ba      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b73      	ldr	r3, [pc, #460]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a72      	ldr	r2, [pc, #456]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	496d      	ldr	r1, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	4968      	ldr	r1, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e025      	b.n	80016d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001686:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4960      	ldr	r1, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a4:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	495b      	ldr	r1, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fd4c 	bl	8002160 <RCC_SetFlashLatencyFromMSIRange>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e37a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d2:	f000 fc81 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	4950      	ldr	r1, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x274>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <HAL_RCC_OscConfig+0x278>)
 80016f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <HAL_RCC_OscConfig+0x27c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc22 	bl	8000f40 <HAL_InitTick>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d052      	beq.n	80017ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	e35e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d032      	beq.n	8001778 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171e:	f7ff fc5f 	bl	8000fe0 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff fc5b 	bl	8000fe0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e347      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a35      	ldr	r2, [pc, #212]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4930      	ldr	r1, [pc, #192]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	492b      	ldr	r1, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
 8001776:	e01a      	b.n	80017ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a28      	ldr	r2, [pc, #160]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc2c 	bl	8000fe0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178c:	f7ff fc28 	bl	8000fe0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e314      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1dc>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d073      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x21c>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d10e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d063      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d15f      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2f1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x24c>
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e025      	b.n	8001848 <HAL_RCC_OscConfig+0x298>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d114      	bne.n	8001830 <HAL_RCC_OscConfig+0x280>
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a02      	ldr	r2, [pc, #8]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e013      	b.n	8001848 <HAL_RCC_OscConfig+0x298>
 8001820:	40021000 	.word	0x40021000
 8001824:	0800c81c 	.word	0x0800c81c
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004
 8001830:	4ba0      	ldr	r3, [pc, #640]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9f      	ldr	r2, [pc, #636]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b9d      	ldr	r3, [pc, #628]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9c      	ldr	r2, [pc, #624]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fbc6 	bl	8000fe0 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fbc2 	bl	8000fe0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e2ae      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2a8>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fbb2 	bl	8000fe0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fbae 	bl	8000fe0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e29a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d0>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d060      	beq.n	8001970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x310>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c0:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x328>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e277      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	e040      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d023      	beq.n	800193e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fb6d 	bl	8000fe0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fb69 	bl	8000fe0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e255      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	495f      	ldr	r1, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff fb49 	bl	8000fe0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fb45 	bl	8000fe0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e231      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fb24 	bl	8000fe0 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fb20 	bl	8000fe0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e20c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x3ec>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb07 	bl	8000fe0 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff fb03 	bl	8000fe0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1ef      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80a6 	beq.w	8001b50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d118      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a48:	f7ff faca 	bl	8000fe0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff fac6 	bl	8000fe0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1b2      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d8>
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a86:	e029      	b.n	8001adc <HAL_RCC_OscConfig+0x52c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d115      	bne.n	8001abc <HAL_RCC_OscConfig+0x50c>
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	e014      	b.n	8001adc <HAL_RCC_OscConfig+0x52c>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	4b9a      	ldr	r3, [pc, #616]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac2:	4a99      	ldr	r2, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001acc:	4b96      	ldr	r3, [pc, #600]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	4a95      	ldr	r2, [pc, #596]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d016      	beq.n	8001b12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fa7c 	bl	8000fe0 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff fa78 	bl	8000fe0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e162      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ed      	beq.n	8001aec <HAL_RCC_OscConfig+0x53c>
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa65 	bl	8000fe0 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fa61 	bl	8000fe0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e14b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b30:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ed      	bne.n	8001b1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b64:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6a:	4a6f      	ldr	r2, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff fa34 	bl	8000fe0 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7c:	f7ff fa30 	bl	8000fe0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e11c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8e:	4b66      	ldr	r3, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x5cc>
 8001b9c:	e01b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b9e:	4b62      	ldr	r3, [pc, #392]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba4:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fa17 	bl	8000fe0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb6:	f7ff fa13 	bl	8000fe0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0ff      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc8:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ef      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80f3 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f040 80c9 	bne.w	8001d7c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0203 	and.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d12c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d123      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d11b      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d113      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d109      	bne.n	8001c58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d06b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d062      	beq.n	8001d24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0ac      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7a:	f7ff f9b1 	bl	8000fe0 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff f9ad 	bl	8000fe0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e099      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x77c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cba:	0212      	lsls	r2, r2, #8
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cc2:	0852      	lsrs	r2, r2, #1
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0552      	lsls	r2, r2, #21
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0652      	lsls	r2, r2, #25
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	4912      	ldr	r1, [pc, #72]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cfc:	f7ff f970 	bl	8000fe0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f96c 	bl	8000fe0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_RCC_OscConfig+0x778>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d22:	e050      	b.n	8001dc6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d144      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d54:	f7ff f944 	bl	8000fe0 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f940 	bl	8000fe0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e02c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x7ac>
 8001d7a:	e024      	b.n	8001dc6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d01f      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001d88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f927 	bl	8000fe0 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff f923 	bl	8000fe0 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4905      	ldr	r1, [pc, #20]	; (8001dd0 <HAL_RCC_OscConfig+0x820>)
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x824>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
 8001dc0:	e001      	b.n	8001dc6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	feeefffc 	.word	0xfeeefffc

08001dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0e7      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0207 	bic.w	r2, r3, #7
 8001e02:	4970      	ldr	r1, [pc, #448]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b6e      	ldr	r3, [pc, #440]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0cf      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d908      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4960      	ldr	r1, [pc, #384]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d04c      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d121      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0a6      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e76:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d115      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e09a      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8e:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e08e      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e086      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4943      	ldr	r1, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec0:	f7ff f88e 	bl	8000fe0 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7ff f88a 	bl	8000fe0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e06e      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d010      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d208      	bcs.n	8001f1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	492b      	ldr	r1, [pc, #172]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d210      	bcs.n	8001f4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	4923      	ldr	r1, [pc, #140]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e036      	b.n	8001fbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4910      	ldr	r1, [pc, #64]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8c:	f000 f824 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	490b      	ldr	r1, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1f4>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f8>)
 8001faa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1fc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe ffc5 	bl	8000f40 <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fba:	7afb      	ldrb	r3, [r7, #11]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	0800c81c 	.word	0x0800c81c
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000004 	.word	0x20000004

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x34>
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d121      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d11e      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e005      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d102      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e004      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d101      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCC_GetSysClockFreq+0x114>)
 800205e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d134      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0xa6>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d003      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0xac>
 800207c:	e005      	b.n	800208a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002080:	617b      	str	r3, [r7, #20]
      break;
 8002082:	e005      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002086:	617b      	str	r3, [r7, #20]
      break;
 8002088:	e002      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	617b      	str	r3, [r7, #20]
      break;
 800208e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	3301      	adds	r3, #1
 800209c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	0e5b      	lsrs	r3, r3, #25
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	3301      	adds	r3, #1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020d0:	69bb      	ldr	r3, [r7, #24]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	0800c834 	.word	0x0800c834
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	007a1200 	.word	0x007a1200

080020f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000000 	.word	0x20000000

08002108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800210c:	f7ff fff0 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	0800c82c 	.word	0x0800c82c

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002138:	f7ff ffda 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0adb      	lsrs	r3, r3, #11
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_RCC_GetPCLK2Freq+0x28>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	0800c82c 	.word	0x0800c82c

08002160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002178:	f7ff f9b6 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 800217c:	6178      	str	r0, [r7, #20]
 800217e:	e014      	b.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a24      	ldr	r2, [pc, #144]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002198:	f7ff f9a6 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 800219c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b0:	d10b      	bne.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	; 0x80
 80021b6:	d919      	bls.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2ba0      	cmp	r3, #160	; 0xa0
 80021bc:	d902      	bls.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021be:	2302      	movs	r3, #2
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e013      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c4:	2301      	movs	r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e010      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d902      	bls.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021d0:	2303      	movs	r3, #3
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e00a      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d102      	bne.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021dc:	2302      	movs	r3, #2
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e004      	b.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b70      	cmp	r3, #112	; 0x70
 80021e6:	d101      	bne.n	80021ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e8:	2301      	movs	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 0207 	bic.w	r2, r3, #7
 80021f4:	4909      	ldr	r1, [pc, #36]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	40022000 	.word	0x40022000

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002228:	2300      	movs	r3, #0
 800222a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800222c:	2300      	movs	r3, #0
 800222e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002238:	2b00      	cmp	r3, #0
 800223a:	d031      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002244:	d01a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800224a:	d814      	bhi.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002254:	d10f      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a5c      	ldr	r2, [pc, #368]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002262:	e00c      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fa44 	bl	80026f8 <RCCEx_PLLSAI1_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002274:	e003      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	74fb      	strb	r3, [r7, #19]
      break;
 800227a:	e000      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800227c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002284:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	494e      	ldr	r1, [pc, #312]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800229a:	e001      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 809e 	beq.w	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a39      	ldr	r2, [pc, #228]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f0:	f7fe fe76 	bl	8000fe0 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f6:	e009      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe fe72 	bl	8000fe0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d902      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	74fb      	strb	r3, [r7, #19]
        break;
 800230a:	e005      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d15a      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01e      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	429a      	cmp	r2, r3
 8002338:	d019      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fe32 	bl	8000fe0 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00b      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fe2e 	bl	8000fe0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d902      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	74fb      	strb	r3, [r7, #19]
            break;
 8002396:	e006      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ec      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ba:	4904      	ldr	r1, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023c2:	e009      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
 80023c8:	e006      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d8:	7c7b      	ldrb	r3, [r7, #17]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b9e      	ldr	r3, [pc, #632]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a9d      	ldr	r2, [pc, #628]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f6:	4b98      	ldr	r3, [pc, #608]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f023 0203 	bic.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4994      	ldr	r1, [pc, #592]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002418:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 020c 	bic.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	498c      	ldr	r1, [pc, #560]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243a:	4b87      	ldr	r3, [pc, #540]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	4983      	ldr	r1, [pc, #524]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	497b      	ldr	r1, [pc, #492]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4972      	ldr	r1, [pc, #456]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a0:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	496a      	ldr	r1, [pc, #424]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c2:	4b65      	ldr	r3, [pc, #404]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	4961      	ldr	r1, [pc, #388]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f2:	4959      	ldr	r1, [pc, #356]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002506:	4b54      	ldr	r3, [pc, #336]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	4950      	ldr	r1, [pc, #320]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002528:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	4948      	ldr	r1, [pc, #288]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800254c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002550:	f023 0203 	bic.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	493f      	ldr	r1, [pc, #252]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d028      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257a:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800258a:	d106      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a31      	ldr	r2, [pc, #196]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002596:	60d3      	str	r3, [r2, #12]
 8002598:	e011      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a2:	d10c      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	2101      	movs	r1, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f8a4 	bl	80026f8 <RCCEx_PLLSAI1_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	491f      	ldr	r1, [pc, #124]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e8:	d106      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f4:	60d3      	str	r3, [r2, #12]
 80025f6:	e011      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2101      	movs	r1, #1
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f875 	bl	80026f8 <RCCEx_PLLSAI1_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02b      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002646:	d109      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a02      	ldr	r2, [pc, #8]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002652:	60d3      	str	r3, [r2, #12]
 8002654:	e014      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002664:	d10c      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	2101      	movs	r1, #1
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f843 	bl	80026f8 <RCCEx_PLLSAI1_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01c      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	2102      	movs	r1, #2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f820 	bl	80026f8 <RCCEx_PLLSAI1_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002706:	4b74      	ldr	r3, [pc, #464]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d018      	beq.n	8002744 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002712:	4b71      	ldr	r3, [pc, #452]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0203 	and.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
       ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800272a:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
       ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d047      	beq.n	80027ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e044      	b.n	80027ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d018      	beq.n	800277e <RCCEx_PLLSAI1_Config+0x86>
 800274c:	2b03      	cmp	r3, #3
 800274e:	d825      	bhi.n	800279c <RCCEx_PLLSAI1_Config+0xa4>
 8002750:	2b01      	cmp	r3, #1
 8002752:	d002      	beq.n	800275a <RCCEx_PLLSAI1_Config+0x62>
 8002754:	2b02      	cmp	r3, #2
 8002756:	d009      	beq.n	800276c <RCCEx_PLLSAI1_Config+0x74>
 8002758:	e020      	b.n	800279c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275a:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11d      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276a:	e01a      	b.n	80027a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800276c:	4b5a      	ldr	r3, [pc, #360]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d116      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e013      	b.n	80027a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800277e:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278a:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279a:	e006      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e004      	b.n	80027ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027a2:	bf00      	nop
 80027a4:	e002      	b.n	80027ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	430b      	orrs	r3, r1
 80027c8:	4943      	ldr	r1, [pc, #268]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d17c      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe fbfe 	bl	8000fe0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027e6:	e009      	b.n	80027fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027e8:	f7fe fbfa 	bl	8000fe0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	73fb      	strb	r3, [r7, #15]
        break;
 80027fa:	e005      	b.n	8002808 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ef      	bne.n	80027e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d15f      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d110      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800281c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6892      	ldr	r2, [r2, #8]
 8002824:	0211      	lsls	r1, r2, #8
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68d2      	ldr	r2, [r2, #12]
 800282a:	06d2      	lsls	r2, r2, #27
 800282c:	430a      	orrs	r2, r1
 800282e:	492a      	ldr	r1, [pc, #168]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	610b      	str	r3, [r1, #16]
 8002834:	e027      	b.n	8002886 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d112      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002844:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	0211      	lsls	r1, r2, #8
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6912      	ldr	r2, [r2, #16]
 8002852:	0852      	lsrs	r2, r2, #1
 8002854:	3a01      	subs	r2, #1
 8002856:	0552      	lsls	r2, r2, #21
 8002858:	430a      	orrs	r2, r1
 800285a:	491f      	ldr	r1, [pc, #124]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	610b      	str	r3, [r1, #16]
 8002860:	e011      	b.n	8002886 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800286a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6892      	ldr	r2, [r2, #8]
 8002872:	0211      	lsls	r1, r2, #8
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6952      	ldr	r2, [r2, #20]
 8002878:	0852      	lsrs	r2, r2, #1
 800287a:	3a01      	subs	r2, #1
 800287c:	0652      	lsls	r2, r2, #25
 800287e:	430a      	orrs	r2, r1
 8002880:	4915      	ldr	r1, [pc, #84]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002890:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fe fba5 	bl	8000fe0 <HAL_GetTick>
 8002896:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002898:	e009      	b.n	80028ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800289a:	f7fe fba1 	bl	8000fe0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d902      	bls.n	80028ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	73fb      	strb	r3, [r7, #15]
          break;
 80028ac:	e005      	b.n	80028ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ef      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e049      	b.n	8002982 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	795b      	ldrb	r3, [r3, #5]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f912 	bl	8000b28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0204 	orr.w	r2, r2, #4
 8002918:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d104      	bne.n	8002932 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e027      	b.n	8002982 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002932:	f7fe fb55 	bl	8000fe0 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002938:	e015      	b.n	8002966 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800293a:	f7fe fb51 	bl	8000fe0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d90e      	bls.n	8002966 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	d107      	bne.n	8002966 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2204      	movs	r2, #4
 800295a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00d      	b.n	8002982 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d0e2      	beq.n	800293a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e01c      	b.n	80029d6 <HAL_RNG_DeInit+0x4c>
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020c 	bic.w	r2, r2, #12
 80029aa:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029ba:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe f8f7 	bl	8000bb0 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_RNG_GenerateRandomNumber+0x1a>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e044      	b.n	8002a82 <HAL_RNG_GenerateRandomNumber+0xa4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	795b      	ldrb	r3, [r3, #5]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d133      	bne.n	8002a70 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fae7 	bl	8000fe0 <HAL_GetTick>
 8002a12:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a14:	e018      	b.n	8002a48 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a16:	f7fe fae3 	bl	8000fe0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d911      	bls.n	8002a48 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00a      	beq.n	8002a48 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e01c      	b.n	8002a82 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d1df      	bne.n	8002a16 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	715a      	strb	r2, [r3, #5]
 8002a6e:	e004      	b.n	8002a7a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2204      	movs	r2, #4
 8002a74:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	711a      	strb	r2, [r3, #4]

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e040      	b.n	8002b1e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d106      	bne.n	8002ab2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe f899 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2224      	movs	r2, #36	; 0x24
 8002ab6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 faaf 	bl	8003034 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f826 	bl	8002b28 <UART_SetConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e01b      	b.n	8002b1e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002af4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fb2e 	bl	8003178 <UART_CheckIdleState>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b08a      	sub	sp, #40	; 0x28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4ba5      	ldr	r3, [pc, #660]	; (8002dec <UART_SetConfig+0x2c4>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a9a      	ldr	r2, [pc, #616]	; (8002df0 <UART_SetConfig+0x2c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	4313      	orrs	r3, r2
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a91      	ldr	r2, [pc, #580]	; (8002df4 <UART_SetConfig+0x2cc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d126      	bne.n	8002c00 <UART_SetConfig+0xd8>
 8002bb2:	4b91      	ldr	r3, [pc, #580]	; (8002df8 <UART_SetConfig+0x2d0>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d81b      	bhi.n	8002bf8 <UART_SetConfig+0xd0>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <UART_SetConfig+0xa0>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002be9 	.word	0x08002be9
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002bf1 	.word	0x08002bf1
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bde:	e0d6      	b.n	8002d8e <UART_SetConfig+0x266>
 8002be0:	2302      	movs	r3, #2
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002be6:	e0d2      	b.n	8002d8e <UART_SetConfig+0x266>
 8002be8:	2304      	movs	r3, #4
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bee:	e0ce      	b.n	8002d8e <UART_SetConfig+0x266>
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf6:	e0ca      	b.n	8002d8e <UART_SetConfig+0x266>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfe:	e0c6      	b.n	8002d8e <UART_SetConfig+0x266>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a7d      	ldr	r2, [pc, #500]	; (8002dfc <UART_SetConfig+0x2d4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d138      	bne.n	8002c7c <UART_SetConfig+0x154>
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <UART_SetConfig+0x2d0>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d82d      	bhi.n	8002c74 <UART_SetConfig+0x14c>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <UART_SetConfig+0xf8>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002c75 	.word	0x08002c75
 8002c28:	08002c75 	.word	0x08002c75
 8002c2c:	08002c75 	.word	0x08002c75
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002c75 	.word	0x08002c75
 8002c38:	08002c75 	.word	0x08002c75
 8002c3c:	08002c75 	.word	0x08002c75
 8002c40:	08002c5d 	.word	0x08002c5d
 8002c44:	08002c75 	.word	0x08002c75
 8002c48:	08002c75 	.word	0x08002c75
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c6d 	.word	0x08002c6d
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c5a:	e098      	b.n	8002d8e <UART_SetConfig+0x266>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c62:	e094      	b.n	8002d8e <UART_SetConfig+0x266>
 8002c64:	2304      	movs	r3, #4
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6a:	e090      	b.n	8002d8e <UART_SetConfig+0x266>
 8002c6c:	2308      	movs	r3, #8
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c72:	e08c      	b.n	8002d8e <UART_SetConfig+0x266>
 8002c74:	2310      	movs	r3, #16
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7a:	e088      	b.n	8002d8e <UART_SetConfig+0x266>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5f      	ldr	r2, [pc, #380]	; (8002e00 <UART_SetConfig+0x2d8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d125      	bne.n	8002cd2 <UART_SetConfig+0x1aa>
 8002c86:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <UART_SetConfig+0x2d0>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c90:	2b30      	cmp	r3, #48	; 0x30
 8002c92:	d016      	beq.n	8002cc2 <UART_SetConfig+0x19a>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d818      	bhi.n	8002cca <UART_SetConfig+0x1a2>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d00a      	beq.n	8002cb2 <UART_SetConfig+0x18a>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d814      	bhi.n	8002cca <UART_SetConfig+0x1a2>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <UART_SetConfig+0x182>
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d008      	beq.n	8002cba <UART_SetConfig+0x192>
 8002ca8:	e00f      	b.n	8002cca <UART_SetConfig+0x1a2>
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb0:	e06d      	b.n	8002d8e <UART_SetConfig+0x266>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb8:	e069      	b.n	8002d8e <UART_SetConfig+0x266>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc0:	e065      	b.n	8002d8e <UART_SetConfig+0x266>
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc8:	e061      	b.n	8002d8e <UART_SetConfig+0x266>
 8002cca:	2310      	movs	r3, #16
 8002ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd0:	e05d      	b.n	8002d8e <UART_SetConfig+0x266>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4b      	ldr	r2, [pc, #300]	; (8002e04 <UART_SetConfig+0x2dc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d125      	bne.n	8002d28 <UART_SetConfig+0x200>
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <UART_SetConfig+0x2d0>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ce8:	d016      	beq.n	8002d18 <UART_SetConfig+0x1f0>
 8002cea:	2bc0      	cmp	r3, #192	; 0xc0
 8002cec:	d818      	bhi.n	8002d20 <UART_SetConfig+0x1f8>
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d00a      	beq.n	8002d08 <UART_SetConfig+0x1e0>
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d814      	bhi.n	8002d20 <UART_SetConfig+0x1f8>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <UART_SetConfig+0x1d8>
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d008      	beq.n	8002d10 <UART_SetConfig+0x1e8>
 8002cfe:	e00f      	b.n	8002d20 <UART_SetConfig+0x1f8>
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d06:	e042      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0e:	e03e      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d10:	2304      	movs	r3, #4
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d16:	e03a      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e036      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d20:	2310      	movs	r3, #16
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d26:	e032      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <UART_SetConfig+0x2c8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d12a      	bne.n	8002d88 <UART_SetConfig+0x260>
 8002d32:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <UART_SetConfig+0x2d0>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d40:	d01a      	beq.n	8002d78 <UART_SetConfig+0x250>
 8002d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d46:	d81b      	bhi.n	8002d80 <UART_SetConfig+0x258>
 8002d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4c:	d00c      	beq.n	8002d68 <UART_SetConfig+0x240>
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d52:	d815      	bhi.n	8002d80 <UART_SetConfig+0x258>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <UART_SetConfig+0x238>
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d008      	beq.n	8002d70 <UART_SetConfig+0x248>
 8002d5e:	e00f      	b.n	8002d80 <UART_SetConfig+0x258>
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e012      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e00e      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d70:	2304      	movs	r3, #4
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e00a      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e006      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d80:	2310      	movs	r3, #16
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e002      	b.n	8002d8e <UART_SetConfig+0x266>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <UART_SetConfig+0x2c8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	f040 808b 	bne.w	8002eb0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d834      	bhi.n	8002e0c <UART_SetConfig+0x2e4>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <UART_SetConfig+0x280>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002e0d 	.word	0x08002e0d
 8002db0:	08002dd5 	.word	0x08002dd5
 8002db4:	08002e0d 	.word	0x08002e0d
 8002db8:	08002ddb 	.word	0x08002ddb
 8002dbc:	08002e0d 	.word	0x08002e0d
 8002dc0:	08002e0d 	.word	0x08002e0d
 8002dc4:	08002e0d 	.word	0x08002e0d
 8002dc8:	08002de3 	.word	0x08002de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f7ff f99c 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	61f8      	str	r0, [r7, #28]
        break;
 8002dd2:	e021      	b.n	8002e18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <UART_SetConfig+0x2e0>)
 8002dd6:	61fb      	str	r3, [r7, #28]
        break;
 8002dd8:	e01e      	b.n	8002e18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dda:	f7ff f8fd 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8002dde:	61f8      	str	r0, [r7, #28]
        break;
 8002de0:	e01a      	b.n	8002e18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de6:	61fb      	str	r3, [r7, #28]
        break;
 8002de8:	e016      	b.n	8002e18 <UART_SetConfig+0x2f0>
 8002dea:	bf00      	nop
 8002dec:	efff69f3 	.word	0xefff69f3
 8002df0:	40008000 	.word	0x40008000
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40004400 	.word	0x40004400
 8002e00:	40004800 	.word	0x40004800
 8002e04:	40004c00 	.word	0x40004c00
 8002e08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80fa 	beq.w	8003014 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d305      	bcc.n	8002e3c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d903      	bls.n	8002e44 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e42:	e0e7      	b.n	8003014 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2200      	movs	r2, #0
 8002e48:	461c      	mov	r4, r3
 8002e4a:	4615      	mov	r5, r2
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	022b      	lsls	r3, r5, #8
 8002e56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e5a:	0222      	lsls	r2, r4, #8
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	6849      	ldr	r1, [r1, #4]
 8002e60:	0849      	lsrs	r1, r1, #1
 8002e62:	2000      	movs	r0, #0
 8002e64:	4688      	mov	r8, r1
 8002e66:	4681      	mov	r9, r0
 8002e68:	eb12 0a08 	adds.w	sl, r2, r8
 8002e6c:	eb43 0b09 	adc.w	fp, r3, r9
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e7e:	4650      	mov	r0, sl
 8002e80:	4659      	mov	r1, fp
 8002e82:	f7fd f9fd 	bl	8000280 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e94:	d308      	bcc.n	8002ea8 <UART_SetConfig+0x380>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	d204      	bcs.n	8002ea8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e0b5      	b.n	8003014 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002eae:	e0b1      	b.n	8003014 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb8:	d15d      	bne.n	8002f76 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d827      	bhi.n	8002f12 <UART_SetConfig+0x3ea>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <UART_SetConfig+0x3a0>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	08002ef5 	.word	0x08002ef5
 8002ed0:	08002efd 	.word	0x08002efd
 8002ed4:	08002f13 	.word	0x08002f13
 8002ed8:	08002f03 	.word	0x08002f03
 8002edc:	08002f13 	.word	0x08002f13
 8002ee0:	08002f13 	.word	0x08002f13
 8002ee4:	08002f13 	.word	0x08002f13
 8002ee8:	08002f0b 	.word	0x08002f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7ff f90c 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	61f8      	str	r0, [r7, #28]
        break;
 8002ef2:	e014      	b.n	8002f1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef4:	f7ff f91e 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8002ef8:	61f8      	str	r0, [r7, #28]
        break;
 8002efa:	e010      	b.n	8002f1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <UART_SetConfig+0x508>)
 8002efe:	61fb      	str	r3, [r7, #28]
        break;
 8002f00:	e00d      	b.n	8002f1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f02:	f7ff f869 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8002f06:	61f8      	str	r0, [r7, #28]
        break;
 8002f08:	e009      	b.n	8002f1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0e:	61fb      	str	r3, [r7, #28]
        break;
 8002f10:	e005      	b.n	8002f1e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d077      	beq.n	8003014 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005a      	lsls	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d916      	bls.n	8002f6e <UART_SetConfig+0x446>
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f46:	d212      	bcs.n	8002f6e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f023 030f 	bic.w	r3, r3, #15
 8002f50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	8afb      	ldrh	r3, [r7, #22]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	8afa      	ldrh	r2, [r7, #22]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	e052      	b.n	8003014 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f74:	e04e      	b.n	8003014 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d827      	bhi.n	8002fce <UART_SetConfig+0x4a6>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <UART_SetConfig+0x45c>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fa9 	.word	0x08002fa9
 8002f88:	08002fb1 	.word	0x08002fb1
 8002f8c:	08002fb9 	.word	0x08002fb9
 8002f90:	08002fcf 	.word	0x08002fcf
 8002f94:	08002fbf 	.word	0x08002fbf
 8002f98:	08002fcf 	.word	0x08002fcf
 8002f9c:	08002fcf 	.word	0x08002fcf
 8002fa0:	08002fcf 	.word	0x08002fcf
 8002fa4:	08002fc7 	.word	0x08002fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7ff f8ae 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8002fac:	61f8      	str	r0, [r7, #28]
        break;
 8002fae:	e014      	b.n	8002fda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fb0:	f7ff f8c0 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8002fb4:	61f8      	str	r0, [r7, #28]
        break;
 8002fb6:	e010      	b.n	8002fda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <UART_SetConfig+0x508>)
 8002fba:	61fb      	str	r3, [r7, #28]
        break;
 8002fbc:	e00d      	b.n	8002fda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fbe:	f7ff f80b 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8002fc2:	61f8      	str	r0, [r7, #28]
        break;
 8002fc4:	e009      	b.n	8002fda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fca:	61fb      	str	r3, [r7, #28]
        break;
 8002fcc:	e005      	b.n	8002fda <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d019      	beq.n	8003014 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	085a      	lsrs	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	441a      	add	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	d909      	bls.n	800300e <UART_SetConfig+0x4e6>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d205      	bcs.n	800300e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	e002      	b.n	8003014 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003020:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003024:	4618      	mov	r0, r3
 8003026:	3728      	adds	r7, #40	; 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302e:	bf00      	nop
 8003030:	00f42400 	.word	0x00f42400

08003034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01a      	beq.n	800314a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003132:	d10a      	bne.n	800314a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b098      	sub	sp, #96	; 0x60
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003188:	f7fd ff2a 	bl	8000fe0 <HAL_GetTick>
 800318c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b08      	cmp	r3, #8
 800319a:	d12e      	bne.n	80031fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a4:	2200      	movs	r2, #0
 80031a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f88c 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d021      	beq.n	80031fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
 80031d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e6      	bne.n	80031b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e062      	b.n	80032c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	d149      	bne.n	800329c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003210:	2200      	movs	r2, #0
 8003212:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f856 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03c      	beq.n	800329c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	623b      	str	r3, [r7, #32]
   return(result);
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
 8003242:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e6      	bne.n	8003222 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	60fb      	str	r3, [r7, #12]
   return(result);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003274:	61fa      	str	r2, [r7, #28]
 8003276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	69b9      	ldr	r1, [r7, #24]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	617b      	str	r3, [r7, #20]
   return(result);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e5      	bne.n	8003254 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e011      	b.n	80032c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3758      	adds	r7, #88	; 0x58
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d8:	e049      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d045      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fd fe7d 	bl	8000fe0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e048      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d031      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d110      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2208      	movs	r2, #8
 800331e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f838 	bl	8003396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2208      	movs	r2, #8
 800332a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e029      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d111      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f81e 	bl	8003396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e00f      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d0a6      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003396:	b480      	push	{r7}
 8003398:	b095      	sub	sp, #84	; 0x54
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
 80033be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e6      	bne.n	800339e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3308      	adds	r3, #8
 80033d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	61fb      	str	r3, [r7, #28]
   return(result);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3308      	adds	r3, #8
 80033ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	2b01      	cmp	r3, #1
 800340a:	d118      	bne.n	800343e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	60bb      	str	r3, [r7, #8]
   return(result);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f023 0310 	bic.w	r3, r3, #16
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6979      	ldr	r1, [r7, #20]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	613b      	str	r3, [r7, #16]
   return(result);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e6      	bne.n	800340c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003452:	bf00      	nop
 8003454:	3754      	adds	r7, #84	; 0x54
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <GetLength_ex>:
 * @return  ASN_PARSE_E if the encoding is invalid.
 * @return  BUFFER_E when not enough data to complete decode.
 */
int GetLength_ex(const byte* input, word32* inOutIdx, int* len, word32 maxIdx,
                 int check)
{
 800345e:	b480      	push	{r7}
 8003460:	b08b      	sub	sp, #44	; 0x2c
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
    int     length = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
    word32  idx = (word32)*inOutIdx;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	623b      	str	r3, [r7, #32]
    byte    b;

    /* Ensure zero return length on error. */
    *len = 0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

    /* Check there is at least one byte available containing length information.
     */
    if ((idx + 1) > maxIdx) {
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	3301      	adds	r3, #1
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d202      	bcs.n	800348c <GetLength_ex+0x2e>
        WOLFSSL_MSG("GetLength - bad index on input");
        return BUFFER_E;
 8003486:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800348a:	e066      	b.n	800355a <GetLength_ex+0xfc>
    }

    /* Get the first length byte. */
    b = input[idx++];
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	623a      	str	r2, [r7, #32]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check if the first byte indicates the count of bytes. */
    if (b >= ASN_LONG_LENGTH) {
 800349a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	da43      	bge.n	800352a <GetLength_ex+0xcc>
        /* Bottom 7 bits are the number of bytes to calculate length with.
         * Note: 0 indicates indefinite length encoding *not* 0 bytes of length.
         */
        word32 bytes = (word32)b & 0x7FU;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	61fb      	str	r3, [r7, #28]
        int minLen;

        /* Calculate minimum length to be encoded with bytes. */
        if (b == ASN_INDEF_LENGTH) {
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d102      	bne.n	80034b6 <GetLength_ex+0x58>
            /* Indefinite length encoding - no length bytes. */
            minLen = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e012      	b.n	80034dc <GetLength_ex+0x7e>
        }
        else if (bytes == 1) {
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d102      	bne.n	80034c2 <GetLength_ex+0x64>
            minLen = 0x80;
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	e00c      	b.n	80034dc <GetLength_ex+0x7e>
        }
        /* Only support up to the number of bytes that fit into return var. */
        else if (bytes > sizeof(length)) {
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d902      	bls.n	80034ce <GetLength_ex+0x70>
            WOLFSSL_MSG("GetLength - overlong data length spec");
            return ASN_PARSE_E;
 80034c8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80034cc:	e045      	b.n	800355a <GetLength_ex+0xfc>
        } else {
            minLen = 1 << ((bytes - 1) * 8);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	2201      	movs	r2, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	61bb      	str	r3, [r7, #24]
        }

        /* Check the number of bytes required are available. */
        if ((idx + bytes) > maxIdx) {
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d20e      	bcs.n	8003506 <GetLength_ex+0xa8>
            WOLFSSL_MSG("GetLength - bad long length");
            return BUFFER_E;
 80034e8:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80034ec:	e035      	b.n	800355a <GetLength_ex+0xfc>
        }

        /* Big-endian encoding of number. */
        while (bytes--) {
            b = input[idx++];
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	623a      	str	r2, [r7, #32]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	75fb      	strb	r3, [r7, #23]
            length = (length << 8) | b;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	021a      	lsls	r2, r3, #8
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	4313      	orrs	r3, r2
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
        while (bytes--) {
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	61fa      	str	r2, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <GetLength_ex+0x90>
        }
        /* Negative value indicates we overflowed the signed int. */
        if (length < 0) {
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	da02      	bge.n	800351c <GetLength_ex+0xbe>
            return ASN_PARSE_E;
 8003516:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800351a:	e01e      	b.n	800355a <GetLength_ex+0xfc>
        }
        /* Don't allow lengths that are longer than strictly required. */
        if (length < minLen) {
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	429a      	cmp	r2, r3
 8003522:	da04      	bge.n	800352e <GetLength_ex+0xd0>
            return ASN_PARSE_E;
 8003524:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003528:	e017      	b.n	800355a <GetLength_ex+0xfc>
        }
    }
    else {
        /* Length in first byte. */
        length = b;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* When requested, check the buffer has at least length bytes left. */
    if (check && ((idx + (word32)length) > maxIdx)) {
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <GetLength_ex+0xe8>
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	4413      	add	r3, r2
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d202      	bcs.n	8003546 <GetLength_ex+0xe8>
        WOLFSSL_MSG("GetLength - value exceeds buffer length");
        return BUFFER_E;
 8003540:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8003544:	e009      	b.n	800355a <GetLength_ex+0xfc>
    }

    /* Return index after length encoding. */
    *inOutIdx = idx;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	601a      	str	r2, [r3, #0]
    /* Return length if valid. */
    if (length > 0) {
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	dd02      	ble.n	8003558 <GetLength_ex+0xfa>
        *len = length;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	601a      	str	r2, [r3, #0]
    }

    /* Return length calculated or error code. */
    return length;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800355a:	4618      	mov	r0, r3
 800355c:	372c      	adds	r7, #44	; 0x2c
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <GetASNTag>:
 * return  0 on success
 * return  BAD_FUNC_ARG when tag, inOutIdx or input is NULL.
 * return  BUFFER_E when not enough space in buffer for tag.
 */
int GetASNTag(const byte* input, word32* inOutIdx, byte* tag, word32 maxIdx)
{
 8003566:	b480      	push	{r7}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
    word32 idx = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]

    /* Check validity of parameters. */
    if ((tag == NULL) || (inOutIdx == NULL) || (input == NULL)) {
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <GetASNTag+0x28>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <GetASNTag+0x28>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <GetASNTag+0x2e>
        ret = BAD_FUNC_ARG;
 800358e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8003592:	617b      	str	r3, [r7, #20]
    }
    if (ret == 0) {
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <GetASNTag+0x4a>
        /* Get index and ensure space for tag. */
        idx = *inOutIdx;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	613b      	str	r3, [r7, #16]
        if (idx + ASN_TAG_SZ > maxIdx) {
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3301      	adds	r3, #1
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d202      	bcs.n	80035b0 <GetASNTag+0x4a>
            WOLFSSL_MSG("Buffer too small for ASN tag");
            ret = BUFFER_E;
 80035aa:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80035ae:	617b      	str	r3, [r7, #20]
        }
    }
    if (ret == 0) {
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <GetASNTag+0x64>
        /* Return the tag and the index after tag. */
        *tag = input[idx];
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	701a      	strb	r2, [r3, #0]
        *inOutIdx = idx + ASN_TAG_SZ;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	601a      	str	r2, [r3, #0]
    }
    /* Return error code. */
    return ret;
 80035ca:	697b      	ldr	r3, [r7, #20]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <GetASNHeader_ex>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the expected tag is not found or length is invalid.
 */
static int GetASNHeader_ex(const byte* input, byte tag, word32* inOutIdx,
                           int* len, word32 maxIdx, int check)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	72fb      	strb	r3, [r7, #11]
    int    ret = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
    word32 idx = *inOutIdx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
    byte   tagFound;
    int    length = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]

    /* Get tag/type. */
    if (GetASNTag(input, &idx, &tagFound, maxIdx) != 0) {
 80035f6:	f107 0217 	add.w	r2, r7, #23
 80035fa:	f107 0118 	add.w	r1, r7, #24
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff ffb0 	bl	8003566 <GetASNTag>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <GetASNHeader_ex+0x3a>
        ret = ASN_PARSE_E;
 800360c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003610:	61fb      	str	r3, [r7, #28]
    }
    /* Ensure tag is the expected value. */
    if ((ret == 0) && (tagFound != tag)) {
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <GetASNHeader_ex+0x4e>
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	7afa      	ldrb	r2, [r7, #11]
 800361c:	429a      	cmp	r2, r3
 800361e:	d002      	beq.n	8003626 <GetASNHeader_ex+0x4e>
        ret = ASN_PARSE_E;
 8003620:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003624:	61fb      	str	r3, [r7, #28]
    }
    /* Get the encoded length. */
    if ((ret == 0) && (GetLength_ex(input, &idx, &length, maxIdx, check) < 0)) {
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10f      	bne.n	800364c <GetASNHeader_ex+0x74>
 800362c:	f107 0210 	add.w	r2, r7, #16
 8003630:	f107 0118 	add.w	r1, r7, #24
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff0f 	bl	800345e <GetLength_ex>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	da02      	bge.n	800364c <GetASNHeader_ex+0x74>
        ret = ASN_PARSE_E;
 8003646:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800364a:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <GetASNHeader_ex+0x8a>
        /* Return the length of data and index after header. */
        *len      = length;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	601a      	str	r2, [r3, #0]
        *inOutIdx = idx;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	601a      	str	r2, [r3, #0]
        ret = length;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	61fb      	str	r3, [r7, #28]
    }
    /* Return number of data bytes or error code. */
    return ret;
 8003662:	69fb      	ldr	r3, [r7, #28]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <GetASNHeader>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the expected tag is not found or length is invalid.
 */
static int GetASNHeader(const byte* input, byte tag, word32* inOutIdx, int* len,
                        word32 maxIdx)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	72fb      	strb	r3, [r7, #11]
    return GetASNHeader_ex(input, tag, inOutIdx, len, maxIdx, 1);
 800367c:	7af9      	ldrb	r1, [r7, #11]
 800367e:	2301      	movs	r3, #1
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff ffa4 	bl	80035d8 <GetASNHeader_ex>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <GetSequence>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a SEQUENCE or length is invalid.
 */
int GetSequence(const byte* input, word32* inOutIdx, int* len,
                           word32 maxIdx)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af02      	add	r7, sp, #8
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_SEQUENCE | ASN_CONSTRUCTED, inOutIdx, len,
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	2130      	movs	r1, #48	; 0x30
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff ffda 	bl	800366c <GetASNHeader>
 80036b8:	4603      	mov	r3, r0
                        maxIdx);
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <GetASNNull>:
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_TAG_NULL_E when the NULL tag is not found.
 * @return  ASN_EXPECT_0_E when the length is not zero.
 */
static int GetASNNull(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
    word32 idx = *inOutIdx;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]

    /* Check buffer has enough data for a NULL item. */
    if ((idx + 2) > maxIdx) {
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	3302      	adds	r3, #2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d202      	bcs.n	80036e8 <GetASNNull+0x26>
        ret = BUFFER_E;
 80036e2:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80036e6:	617b      	str	r3, [r7, #20]
    }
    /* Check the tag is NULL. */
    if ((ret == 0) && (input[idx++] != ASN_TAG_NULL)) {
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <GetASNNull+0x42>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	613a      	str	r2, [r7, #16]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d002      	beq.n	8003704 <GetASNNull+0x42>
        ret = ASN_TAG_NULL_E;
 80036fe:	f06f 0390 	mvn.w	r3, #144	; 0x90
 8003702:	617b      	str	r3, [r7, #20]
    }
    /* Check the length is zero. */
    if ((ret == 0) && (input[idx++] != 0)) {
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <GetASNNull+0x5e>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	613a      	str	r2, [r7, #16]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <GetASNNull+0x5e>
        ret = ASN_EXPECT_0_E;
 800371a:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800371e:	617b      	str	r3, [r7, #20]
    }
    if (ret == 0) {
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <GetASNNull+0x6a>
        /* Return the index after NULL tag. */
        *inOutIdx = idx;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	601a      	str	r2, [r3, #0]
    }
    /* Return error code. */
    return ret;
 800372c:	697b      	ldr	r3, [r7, #20]
}
 800372e:	4618      	mov	r0, r3
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <GetOctetString>:
 * @return  Number of bytes in the ASN.1 data on success.
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a OCTET STRING or length is invalid.
 */
int GetOctetString(const byte* input, word32* inOutIdx, int* len, word32 maxIdx)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
    return GetASNHeader(input, ASN_OCTET_STRING, inOutIdx, len, maxIdx);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	2104      	movs	r1, #4
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ff8a 	bl	800366c <GetASNHeader>
 8003758:	4603      	mov	r3, r0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <GetASNInt>:
 *         or invalid use of or missing leading zero.
 *         Otherwise, 0 to indicate success.
 */
static int GetASNInt(const byte* input, word32* inOutIdx, int* len,
                     word32 maxIdx)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b088      	sub	sp, #32
 8003766:	af02      	add	r7, sp, #8
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
    int    ret;

    ret = GetASNHeader(input, ASN_INTEGER, inOutIdx, len, maxIdx);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	2102      	movs	r1, #2
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff ff76 	bl	800366c <GetASNHeader>
 8003780:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da01      	bge.n	800378c <GetASNInt+0x2a>
        return ret;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	e03f      	b.n	800380c <GetASNInt+0xaa>

    if (*len > 0) {
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	dd3a      	ble.n	800380a <GetASNInt+0xa8>

#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
        /* check for invalid padding on negative integer.
         * c.f. X.690 (ISO/IEC 8825-2:2003 (E)) 10.4.6; RFC 5280 4.1
         */
        if (*len > 1) {
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	dd12      	ble.n	80037c2 <GetASNInt+0x60>
            if ((input[*inOutIdx] == 0xff) && (input[*inOutIdx + 1] & 0x80))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2bff      	cmp	r3, #255	; 0xff
 80037a8:	d10b      	bne.n	80037c2 <GetASNInt+0x60>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da02      	bge.n	80037c2 <GetASNInt+0x60>
                return ASN_PARSE_E;
 80037bc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80037c0:	e024      	b.n	800380c <GetASNInt+0xaa>
        }
#endif

        /* remove leading zero, unless there is only one 0x00 byte */
        if ((input[*inOutIdx] == 0x00) && (*len > 1)) {
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d11c      	bne.n	800380a <GetASNInt+0xa8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	dd18      	ble.n	800380a <GetASNInt+0xa8>
            (*inOutIdx)++;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	601a      	str	r2, [r3, #0]
            (*len)--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]

#ifndef WOLFSSL_ASN_INT_LEAD_0_ANY
            if (*len > 0 && (input[*inOutIdx] & 0x80) == 0)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dd0a      	ble.n	800380a <GetASNInt+0xa8>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	db02      	blt.n	800380a <GetASNInt+0xa8>
                return ASN_PARSE_E;
 8003804:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003808:	e000      	b.n	800380c <GetASNInt+0xaa>
#endif
        }
    }

    return 0;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <GetMyVersion>:
 * @return  BUFFER_E when data in buffer is too small.
 * @return  ASN_EXPECT_0_E when the most significant bit is set.
 */
int GetMyVersion(const byte* input, word32* inOutIdx,
                               int* version, word32 maxIdx)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = *inOutIdx;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
    byte   tag;

    if ((idx + MIN_VERSION_SZ) > maxIdx)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	3303      	adds	r3, #3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d202      	bcs.n	8003838 <GetMyVersion+0x24>
        return ASN_PARSE_E;
 8003832:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003836:	e02c      	b.n	8003892 <GetMyVersion+0x7e>

    if (GetASNTag(input, &idx, &tag, maxIdx) != 0)
 8003838:	f107 0213 	add.w	r2, r7, #19
 800383c:	f107 0114 	add.w	r1, r7, #20
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fe8f 	bl	8003566 <GetASNTag>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <GetMyVersion+0x40>
        return ASN_PARSE_E;
 800384e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003852:	e01e      	b.n	8003892 <GetMyVersion+0x7e>

    if (tag != ASN_INTEGER)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d002      	beq.n	8003860 <GetMyVersion+0x4c>
        return ASN_PARSE_E;
 800385a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800385e:	e018      	b.n	8003892 <GetMyVersion+0x7e>

    if (input[idx++] != 0x01)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	617a      	str	r2, [r7, #20]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d002      	beq.n	8003876 <GetMyVersion+0x62>
        return ASN_VERSION_E;
 8003870:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 8003874:	e00d      	b.n	8003892 <GetMyVersion+0x7e>

    *version  = input[idx++];
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	617a      	str	r2, [r7, #20]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	601a      	str	r2, [r3, #0]
    *inOutIdx = idx;
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	601a      	str	r2, [r3, #0]

    return *version;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
        *version = num;
        ret = num;
    }
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <GetInt>:
 * @return  ASN_EXPECT_0_E when the most significant bit is set.
 * @return  MP_INIT_E when the unable to initialize an mp_int.
 * @return  ASN_GETINT_E when the unable to convert data to an mp_int.
 */
int GetInt(mp_int* mpi, const byte* input, word32* inOutIdx, word32 maxIdx)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b088      	sub	sp, #32
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    word32 idx = *inOutIdx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61bb      	str	r3, [r7, #24]
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
 80038ae:	f107 0214 	add.w	r2, r7, #20
 80038b2:	f107 0118 	add.w	r1, r7, #24
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68b8      	ldr	r0, [r7, #8]
 80038ba:	f7ff ff52 	bl	8003762 <GetASNInt>
 80038be:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <GetInt+0x30>
        return ret;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	e01f      	b.n	800390a <GetInt+0x70>

    if (mp_init(mpi) != MP_OKAY)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f007 f817 	bl	800a8fe <mp_init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <GetInt+0x42>
        return MP_INIT_E;
 80038d6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80038da:	e016      	b.n	800390a <GetInt+0x70>

    if (mp_read_unsigned_bin(mpi, input + idx, (word32)length) != 0) {
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4619      	mov	r1, r3
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f007 f986 	bl	800abf8 <mp_read_unsigned_bin>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <GetInt+0x64>
        mp_clear(mpi);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f007 f883 	bl	800a9fe <mp_clear>
        return ASN_GETINT_E;
 80038f8:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 80038fc:	e005      	b.n	800390a <GetInt+0x70>
        mp_clear(mpi);
        return ASN_GETINT_E;
    }
#endif /* HAVE_WOLF_BIGINT */

    *inOutIdx = idx + (word32)length;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	441a      	add	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]

    return 0;
 8003908:	2300      	movs	r3, #0
    GetASN_MP_PosNeg(&dataASN[INTASN_IDX_INT], mpi);
    /* Decode the big number (INTEGER). */
    return GetASN_Items(intASN, dataASN, intASN_Length, 0, input, inOutIdx,
                        maxIdx);
#endif
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <SkipInt>:
#endif /* (ECC || !NO_DSA) && !WOLFSSL_ASN_TEMPLATE */

#ifndef WOLFSSL_ASN_TEMPLATE
#if (!defined(NO_RSA) && !defined(HAVE_USER_RSA)) || !defined(NO_DSA)
static int SkipInt(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]
    int    ret;
    int    length;

    ret = GetASNInt(input, &idx, &length, maxIdx);
 8003924:	f107 0214 	add.w	r2, r7, #20
 8003928:	f107 0118 	add.w	r1, r7, #24
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff ff17 	bl	8003762 <GetASNInt>
 8003934:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <SkipInt+0x2e>
        return ret;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	e005      	b.n	800394c <SkipInt+0x3a>

    *inOutIdx = idx + (word32)length;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	441a      	add	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	601a      	str	r2, [r3, #0]

    return 0;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <OidFromId>:
 * @param [out] oidSz  Length of OID byte array returned.
 * @return  Array of bytes for the OID.
 * @return  NULL when ID/type not recognized.
 */
const byte* OidFromId(word32 id, word32 type, word32* oidSz)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
    const byte* oid = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

    *oidSz = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

    switch (type) {
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b13      	cmp	r3, #19
 800396e:	f200 8225 	bhi.w	8003dbc <OidFromId+0x468>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <OidFromId+0x24>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	080039c9 	.word	0x080039c9
 800397c:	080039e1 	.word	0x080039e1
 8003980:	080039fb 	.word	0x080039fb
 8003984:	08003dbd 	.word	0x08003dbd
 8003988:	08003a15 	.word	0x08003a15
 800398c:	08003dbd 	.word	0x08003dbd
 8003990:	08003a5f 	.word	0x08003a5f
 8003994:	08003bb9 	.word	0x08003bb9
 8003998:	08003be1 	.word	0x08003be1
 800399c:	08003bf7 	.word	0x08003bf7
 80039a0:	08003c0d 	.word	0x08003c0d
 80039a4:	08003d05 	.word	0x08003d05
 80039a8:	08003d3d 	.word	0x08003d3d
 80039ac:	08003d8d 	.word	0x08003d8d
 80039b0:	08003d1d 	.word	0x08003d1d
 80039b4:	08003da3 	.word	0x08003da3
 80039b8:	08003dbd 	.word	0x08003dbd
 80039bc:	08003dbd 	.word	0x08003dbd
 80039c0:	08003dbd 	.word	0x08003dbd
 80039c4:	08003dbd 	.word	0x08003dbd
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 80039ce:	d105      	bne.n	80039dc <OidFromId+0x88>
                    *oidSz = sizeof(hashSha224hOid);
                    break;
            #endif
            #ifndef NO_SHA256
                case SHA256h:
                    oid = hashSha256hOid;
 80039d0:	4ba3      	ldr	r3, [pc, #652]	; (8003c60 <OidFromId+0x30c>)
 80039d2:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hashSha256hOid);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2209      	movs	r2, #9
 80039d8:	601a      	str	r2, [r3, #0]
                    break;
 80039da:	e000      	b.n	80039de <OidFromId+0x8a>
                    *oidSz = sizeof(hashSha3_512hOid);
                    break;
            #endif /* WOLFSSL_NOSHA3_512 */
            #endif /* WOLFSSL_SHA3 */
                default:
                    break;
 80039dc:	bf00      	nop
            }
            break;
 80039de:	e1ee      	b.n	8003dbe <OidFromId+0x46a>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f240 228f 	movw	r2, #655	; 0x28f
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d105      	bne.n	80039f6 <OidFromId+0xa2>
                    *oidSz = sizeof(sigSha224wRsaOid);
                    break;
                #endif
                #ifndef NO_SHA256
                case CTC_SHA256wRSA:
                    oid = sigSha256wRsaOid;
 80039ea:	4b9e      	ldr	r3, [pc, #632]	; (8003c64 <OidFromId+0x310>)
 80039ec:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(sigSha256wRsaOid);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2209      	movs	r2, #9
 80039f2:	601a      	str	r2, [r3, #0]
                    break;
 80039f4:	e000      	b.n	80039f8 <OidFromId+0xa4>
                    *oidSz = sizeof(sigSphincsSmall_Level5Oid);
                    break;
                #endif /* HAVE_SPHINCS */
                #endif /* HAVE_PQC */
                default:
                    break;
 80039f6:	bf00      	nop
            }
            break;
 80039f8:	e1e1      	b.n	8003dbe <OidFromId+0x46a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f240 2285 	movw	r2, #645	; 0x285
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d105      	bne.n	8003a10 <OidFromId+0xbc>
                    *oidSz = sizeof(keyDsaOid);
                    break;
                #endif /* NO_DSA */
            #ifndef NO_RSA
                case RSAk:
                    oid = keyRsaOid;
 8003a04:	4b98      	ldr	r3, [pc, #608]	; (8003c68 <OidFromId+0x314>)
 8003a06:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(keyRsaOid);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2209      	movs	r2, #9
 8003a0c:	601a      	str	r2, [r3, #0]
                    break;
 8003a0e:	e000      	b.n	8003a12 <OidFromId+0xbe>
                    *oidSz = sizeof(keySphincsSmall_Level5Oid);
                    break;
                #endif /* HAVE_SPHINCS */
                #endif /* HAVE_PQC */
                default:
                    break;
 8003a10:	bf00      	nop
            }
            break;
 8003a12:	e1d4      	b.n	8003dbe <OidFromId+0x46a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8003a1a:	d018      	beq.n	8003a4e <OidFromId+0xfa>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8003a22:	d81a      	bhi.n	8003a5a <OidFromId+0x106>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8003a2a:	d004      	beq.n	8003a36 <OidFromId+0xe2>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8003a32:	d006      	beq.n	8003a42 <OidFromId+0xee>
                    oid = blkDes3CbcOid;
                    *oidSz = sizeof(blkDes3CbcOid);
                    break;
    #endif /* !NO_DES3 */
                default:
                    break;
 8003a34:	e011      	b.n	8003a5a <OidFromId+0x106>
                    oid = blkAes128CbcOid;
 8003a36:	4b8d      	ldr	r3, [pc, #564]	; (8003c6c <OidFromId+0x318>)
 8003a38:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes128CbcOid);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2209      	movs	r2, #9
 8003a3e:	601a      	str	r2, [r3, #0]
                    break;
 8003a40:	e00c      	b.n	8003a5c <OidFromId+0x108>
                    oid = blkAes192CbcOid;
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <OidFromId+0x31c>)
 8003a44:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes192CbcOid);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2209      	movs	r2, #9
 8003a4a:	601a      	str	r2, [r3, #0]
                    break;
 8003a4c:	e006      	b.n	8003a5c <OidFromId+0x108>
                    oid = blkAes256CbcOid;
 8003a4e:	4b89      	ldr	r3, [pc, #548]	; (8003c74 <OidFromId+0x320>)
 8003a50:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(blkAes256CbcOid);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2209      	movs	r2, #9
 8003a56:	601a      	str	r2, [r3, #0]
                    break;
 8003a58:	e000      	b.n	8003a5c <OidFromId+0x108>
                    break;
 8003a5a:	bf00      	nop
            }
            break;
 8003a5c:	e1af      	b.n	8003dbe <OidFromId+0x46a>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b45      	cmp	r3, #69	; 0x45
 8003a62:	d077      	beq.n	8003b54 <OidFromId+0x200>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b45      	cmp	r3, #69	; 0x45
 8003a68:	f0c0 80a4 	bcc.w	8003bb4 <OidFromId+0x260>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2ba8      	cmp	r3, #168	; 0xa8
 8003a70:	f200 80a0 	bhi.w	8003bb4 <OidFromId+0x260>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	f0c0 809c 	bcc.w	8003bb4 <OidFromId+0x260>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b80      	subs	r3, #128	; 0x80
 8003a80:	2b28      	cmp	r3, #40	; 0x28
 8003a82:	f200 8097 	bhi.w	8003bb4 <OidFromId+0x260>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <OidFromId+0x138>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003b6d 	.word	0x08003b6d
 8003a90:	08003b85 	.word	0x08003b85
 8003a94:	08003bb5 	.word	0x08003bb5
 8003a98:	08003b3d 	.word	0x08003b3d
 8003a9c:	08003bb5 	.word	0x08003bb5
 8003aa0:	08003b31 	.word	0x08003b31
 8003aa4:	08003bb5 	.word	0x08003bb5
 8003aa8:	08003bb5 	.word	0x08003bb5
 8003aac:	08003bb5 	.word	0x08003bb5
 8003ab0:	08003bb5 	.word	0x08003bb5
 8003ab4:	08003bb5 	.word	0x08003bb5
 8003ab8:	08003bb5 	.word	0x08003bb5
 8003abc:	08003bb5 	.word	0x08003bb5
 8003ac0:	08003bb5 	.word	0x08003bb5
 8003ac4:	08003bb5 	.word	0x08003bb5
 8003ac8:	08003bb5 	.word	0x08003bb5
 8003acc:	08003ba9 	.word	0x08003ba9
 8003ad0:	08003b49 	.word	0x08003b49
 8003ad4:	08003b79 	.word	0x08003b79
 8003ad8:	08003bb5 	.word	0x08003bb5
 8003adc:	08003bb5 	.word	0x08003bb5
 8003ae0:	08003b61 	.word	0x08003b61
 8003ae4:	08003bb5 	.word	0x08003bb5
 8003ae8:	08003b9d 	.word	0x08003b9d
 8003aec:	08003bb5 	.word	0x08003bb5
 8003af0:	08003bb5 	.word	0x08003bb5
 8003af4:	08003bb5 	.word	0x08003bb5
 8003af8:	08003bb5 	.word	0x08003bb5
 8003afc:	08003bb5 	.word	0x08003bb5
 8003b00:	08003bb5 	.word	0x08003bb5
 8003b04:	08003bb5 	.word	0x08003bb5
 8003b08:	08003bb5 	.word	0x08003bb5
 8003b0c:	08003bb5 	.word	0x08003bb5
 8003b10:	08003bb5 	.word	0x08003bb5
 8003b14:	08003bb5 	.word	0x08003bb5
 8003b18:	08003bb5 	.word	0x08003bb5
 8003b1c:	08003bb5 	.word	0x08003bb5
 8003b20:	08003bb5 	.word	0x08003bb5
 8003b24:	08003bb5 	.word	0x08003bb5
 8003b28:	08003bb5 	.word	0x08003bb5
 8003b2c:	08003b91 	.word	0x08003b91
        #endif /* HAVE_OCSP */

        case oidCertExtType:
            switch (id) {
                case BASIC_CA_OID:
                    oid = extBasicCaOid;
 8003b30:	4b51      	ldr	r3, [pc, #324]	; (8003c78 <OidFromId+0x324>)
 8003b32:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extBasicCaOid);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2203      	movs	r2, #3
 8003b38:	601a      	str	r2, [r3, #0]
                    break;
 8003b3a:	e03c      	b.n	8003bb6 <OidFromId+0x262>
                case ALT_NAMES_OID:
                    oid = extAltNamesOid;
 8003b3c:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <OidFromId+0x328>)
 8003b3e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesOid);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2203      	movs	r2, #3
 8003b44:	601a      	str	r2, [r3, #0]
                    break;
 8003b46:	e036      	b.n	8003bb6 <OidFromId+0x262>
                case CRL_DIST_OID:
                    oid = extCrlDistOid;
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <OidFromId+0x32c>)
 8003b4a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCrlDistOid);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	601a      	str	r2, [r3, #0]
                    break;
 8003b52:	e030      	b.n	8003bb6 <OidFromId+0x262>
                case AUTH_INFO_OID:
                    oid = extAuthInfoOid;
 8003b54:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <OidFromId+0x330>)
 8003b56:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoOid);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
                    break;
 8003b5e:	e02a      	b.n	8003bb6 <OidFromId+0x262>
                case AUTH_KEY_OID:
                    oid = extAuthKeyOid;
 8003b60:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <OidFromId+0x334>)
 8003b62:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthKeyOid);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2203      	movs	r2, #3
 8003b68:	601a      	str	r2, [r3, #0]
                    break;
 8003b6a:	e024      	b.n	8003bb6 <OidFromId+0x262>
                case SUBJ_KEY_OID:
                    oid = extSubjKeyOid;
 8003b6c:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <OidFromId+0x338>)
 8003b6e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extSubjKeyOid);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2203      	movs	r2, #3
 8003b74:	601a      	str	r2, [r3, #0]
                    break;
 8003b76:	e01e      	b.n	8003bb6 <OidFromId+0x262>
                case CERT_POLICY_OID:
                    oid = extCertPolicyOid;
 8003b78:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <OidFromId+0x33c>)
 8003b7a:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyOid);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	601a      	str	r2, [r3, #0]
                    break;
 8003b82:	e018      	b.n	8003bb6 <OidFromId+0x262>
                case KEY_USAGE_OID:
                    oid = extKeyUsageOid;
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <OidFromId+0x340>)
 8003b86:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extKeyUsageOid);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	601a      	str	r2, [r3, #0]
                    break;
 8003b8e:	e012      	b.n	8003bb6 <OidFromId+0x262>
                case INHIBIT_ANY_OID:
                    oid = extInhibitAnyOid;
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <OidFromId+0x344>)
 8003b92:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extInhibitAnyOid);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	601a      	str	r2, [r3, #0]
                    break;
 8003b9a:	e00c      	b.n	8003bb6 <OidFromId+0x262>
                case EXT_KEY_USAGE_OID:
                    oid = extExtKeyUsageOid;
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <OidFromId+0x348>)
 8003b9e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOid);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	601a      	str	r2, [r3, #0]
                    break;
 8003ba6:	e006      	b.n	8003bb6 <OidFromId+0x262>
            #ifndef IGNORE_NAME_CONSTRAINTS
                case NAME_CONS_OID:
                    oid = extNameConsOid;
 8003ba8:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <OidFromId+0x34c>)
 8003baa:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extNameConsOid);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	601a      	str	r2, [r3, #0]
                    break;
 8003bb2:	e000      	b.n	8003bb6 <OidFromId+0x262>
                    oid = extSubjInfoAccessOid;
                    *oidSz = sizeof(extSubjInfoAccessOid);
                    break;
            #endif
                default:
                    break;
 8003bb4:	bf00      	nop
            }
            break;
 8003bb6:	e102      	b.n	8003dbe <OidFromId+0x46a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b74      	cmp	r3, #116	; 0x74
 8003bbc:	d003      	beq.n	8003bc6 <OidFromId+0x272>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b75      	cmp	r3, #117	; 0x75
 8003bc2:	d006      	beq.n	8003bd2 <OidFromId+0x27e>
                    oid = extAuthInfoCaRespOid;
                    *oidSz = sizeof(extAuthInfoCaRespOid);
                    break;
                #endif /* WOLFSSL_SUBJ_INFO_ACC */
                default:
                    break;
 8003bc4:	e00b      	b.n	8003bde <OidFromId+0x28a>
                    oid = extAuthInfoOcspOid;
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <OidFromId+0x350>)
 8003bc8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoOcspOid);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	601a      	str	r2, [r3, #0]
                    break;
 8003bd0:	e005      	b.n	8003bde <OidFromId+0x28a>
                    oid = extAuthInfoCaIssuerOid;
 8003bd2:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <OidFromId+0x354>)
 8003bd4:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAuthInfoCaIssuerOid);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	601a      	str	r2, [r3, #0]
                    break;
 8003bdc:	bf00      	nop
            }
            break;
 8003bde:	e0ee      	b.n	8003dbe <OidFromId+0x46a>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b92      	cmp	r3, #146	; 0x92
 8003be4:	d105      	bne.n	8003bf2 <OidFromId+0x29e>

        case oidCertPolicyType:
            switch (id) {
                case CP_ANY_OID:
                    oid = extCertPolicyAnyOid;
 8003be6:	4b31      	ldr	r3, [pc, #196]	; (8003cac <OidFromId+0x358>)
 8003be8:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extCertPolicyAnyOid);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	601a      	str	r2, [r3, #0]
                    break;
 8003bf0:	e000      	b.n	8003bf4 <OidFromId+0x2a0>
                    oid = extCertPolicyFpkiPiviAuthOid;
                    *oidSz = sizeof(extCertPolicyFpkiPiviAuthOid);
                    break;
                #endif /* WOLFSSL_FPKI */
                default:
                    break;
 8003bf2:	bf00      	nop
            }
            break;
 8003bf4:	e0e3      	b.n	8003dbe <OidFromId+0x46a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b4f      	cmp	r3, #79	; 0x4f
 8003bfa:	d105      	bne.n	8003c08 <OidFromId+0x2b4>

        case oidCertAltNameType:
            switch (id) {
                case HW_NAME_OID:
                    oid = extAltNamesHwNameOid;
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <OidFromId+0x35c>)
 8003bfe:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extAltNamesHwNameOid);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2208      	movs	r2, #8
 8003c04:	601a      	str	r2, [r3, #0]
                    break;
 8003c06:	e000      	b.n	8003c0a <OidFromId+0x2b6>
                default:
                    break;
 8003c08:	bf00      	nop
            }
            break;
 8003c0a:	e0d8      	b.n	8003dbe <OidFromId+0x46a>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b4f      	cmp	r3, #79	; 0x4f
 8003c10:	d81c      	bhi.n	8003c4c <OidFromId+0x2f8>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b47      	cmp	r3, #71	; 0x47
 8003c16:	d373      	bcc.n	8003d00 <OidFromId+0x3ac>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3b47      	subs	r3, #71	; 0x47
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d86f      	bhi.n	8003d00 <OidFromId+0x3ac>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <OidFromId+0x2d4>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003cb9 	.word	0x08003cb9
 8003c2c:	08003cc5 	.word	0x08003cc5
 8003c30:	08003cd1 	.word	0x08003cd1
 8003c34:	08003cdd 	.word	0x08003cdd
 8003c38:	08003d01 	.word	0x08003d01
 8003c3c:	08003d01 	.word	0x08003d01
 8003c40:	08003d01 	.word	0x08003d01
 8003c44:	08003ce9 	.word	0x08003ce9
 8003c48:	08003cf5 	.word	0x08003cf5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b97      	cmp	r3, #151	; 0x97
 8003c50:	d156      	bne.n	8003d00 <OidFromId+0x3ac>

        case oidCertKeyUseType:
            switch (id) {
                case EKU_ANY_OID:
                    oid = extExtKeyUsageAnyOid;
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <OidFromId+0x360>)
 8003c54:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageAnyOid);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	601a      	str	r2, [r3, #0]
                    break;
 8003c5c:	e051      	b.n	8003d02 <OidFromId+0x3ae>
 8003c5e:	bf00      	nop
 8003c60:	0800c864 	.word	0x0800c864
 8003c64:	0800c878 	.word	0x0800c878
 8003c68:	0800c884 	.word	0x0800c884
 8003c6c:	0800c890 	.word	0x0800c890
 8003c70:	0800c89c 	.word	0x0800c89c
 8003c74:	0800c8a8 	.word	0x0800c8a8
 8003c78:	0800c8e0 	.word	0x0800c8e0
 8003c7c:	0800c8e4 	.word	0x0800c8e4
 8003c80:	0800c8e8 	.word	0x0800c8e8
 8003c84:	0800c8ec 	.word	0x0800c8ec
 8003c88:	0800c8f4 	.word	0x0800c8f4
 8003c8c:	0800c8f8 	.word	0x0800c8f8
 8003c90:	0800c8fc 	.word	0x0800c8fc
 8003c94:	0800c900 	.word	0x0800c900
 8003c98:	0800c904 	.word	0x0800c904
 8003c9c:	0800c908 	.word	0x0800c908
 8003ca0:	0800c90c 	.word	0x0800c90c
 8003ca4:	0800c910 	.word	0x0800c910
 8003ca8:	0800c918 	.word	0x0800c918
 8003cac:	0800c920 	.word	0x0800c920
 8003cb0:	0800c924 	.word	0x0800c924
 8003cb4:	0800c92c 	.word	0x0800c92c
                case EKU_SERVER_AUTH_OID:
                    oid = extExtKeyUsageServerAuthOid;
 8003cb8:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <OidFromId+0x478>)
 8003cba:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageServerAuthOid);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	601a      	str	r2, [r3, #0]
                    break;
 8003cc2:	e01e      	b.n	8003d02 <OidFromId+0x3ae>
                case EKU_CLIENT_AUTH_OID:
                    oid = extExtKeyUsageClientAuthOid;
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <OidFromId+0x47c>)
 8003cc6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageClientAuthOid);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	601a      	str	r2, [r3, #0]
                    break;
 8003cce:	e018      	b.n	8003d02 <OidFromId+0x3ae>
                case EKU_CODESIGNING_OID:
                    oid = extExtKeyUsageCodeSigningOid;
 8003cd0:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <OidFromId+0x480>)
 8003cd2:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageCodeSigningOid);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	601a      	str	r2, [r3, #0]
                    break;
 8003cda:	e012      	b.n	8003d02 <OidFromId+0x3ae>
                case EKU_EMAILPROTECT_OID:
                    oid = extExtKeyUsageEmailProtectOid;
 8003cdc:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <OidFromId+0x484>)
 8003cde:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageEmailProtectOid);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	601a      	str	r2, [r3, #0]
                    break;
 8003ce6:	e00c      	b.n	8003d02 <OidFromId+0x3ae>
                case EKU_TIMESTAMP_OID:
                    oid = extExtKeyUsageTimestampOid;
 8003ce8:	4b3c      	ldr	r3, [pc, #240]	; (8003ddc <OidFromId+0x488>)
 8003cea:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageTimestampOid);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2208      	movs	r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
                    break;
 8003cf2:	e006      	b.n	8003d02 <OidFromId+0x3ae>
                case EKU_OCSP_SIGN_OID:
                    oid = extExtKeyUsageOcspSignOid;
 8003cf4:	4b3a      	ldr	r3, [pc, #232]	; (8003de0 <OidFromId+0x48c>)
 8003cf6:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(extExtKeyUsageOcspSignOid);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	601a      	str	r2, [r3, #0]
                    break;
 8003cfe:	e000      	b.n	8003d02 <OidFromId+0x3ae>
                    oid = extExtKeyUsageSshKpClientAuthOid;
                    *oidSz = sizeof(extExtKeyUsageSshKpClientAuthOid);
                    break;
                #endif /* WOLFSSL_WOLFSSH */
                default:
                    break;
 8003d00:	bf00      	nop
            }
            break;
 8003d02:	e05c      	b.n	8003dbe <OidFromId+0x46a>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8003d0a:	d105      	bne.n	8003d18 <OidFromId+0x3c4>

        case oidKdfType:
            switch (id) {
                case PBKDF2_OID:
                    oid = pbkdf2Oid;
 8003d0c:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <OidFromId+0x490>)
 8003d0e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbkdf2Oid);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2209      	movs	r2, #9
 8003d14:	601a      	str	r2, [r3, #0]
                    break;
 8003d16:	e000      	b.n	8003d1a <OidFromId+0x3c6>
                default:
                    break;
 8003d18:	bf00      	nop
            }
            break;
 8003d1a:	e050      	b.n	8003dbe <OidFromId+0x46a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b0d      	cmp	r3, #13
 8003d20:	d004      	beq.n	8003d2c <OidFromId+0x3d8>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f240 2295 	movw	r2, #661	; 0x295
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d105      	bne.n	8003d38 <OidFromId+0x3e4>
                    *oidSz = sizeof(pbeSha1Des3);
                    break;
        #endif
                case PBES2_SUM:
                case PBES2:
                    oid = pbes2;
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <OidFromId+0x494>)
 8003d2e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(pbes2);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2209      	movs	r2, #9
 8003d34:	601a      	str	r2, [r3, #0]
                    break;
 8003d36:	e000      	b.n	8003d3a <OidFromId+0x3e6>
                default:
                    break;
 8003d38:	bf00      	nop
            }
            break;
 8003d3a:	e040      	b.n	8003dbe <OidFromId+0x46a>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f240 12c9 	movw	r2, #457	; 0x1c9
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01a      	beq.n	8003d7c <OidFromId+0x428>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f5b3 7fe5 	cmp.w	r3, #458	; 0x1ca
 8003d4c:	d21c      	bcs.n	8003d88 <OidFromId+0x434>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f240 12a1 	movw	r2, #417	; 0x1a1
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d005      	beq.n	8003d64 <OidFromId+0x410>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f240 12b5 	movw	r2, #437	; 0x1b5
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d006      	beq.n	8003d70 <OidFromId+0x41c>
                    oid = wrapPwriKekOid;
                    *oidSz = sizeof(wrapPwriKekOid);
                    break;
            #endif
                default:
                    break;
 8003d62:	e011      	b.n	8003d88 <OidFromId+0x434>
                    oid = wrapAes128Oid;
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <OidFromId+0x498>)
 8003d66:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes128Oid);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2209      	movs	r2, #9
 8003d6c:	601a      	str	r2, [r3, #0]
                    break;
 8003d6e:	e00c      	b.n	8003d8a <OidFromId+0x436>
                    oid = wrapAes192Oid;
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <OidFromId+0x49c>)
 8003d72:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes192Oid);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2209      	movs	r2, #9
 8003d78:	601a      	str	r2, [r3, #0]
                    break;
 8003d7a:	e006      	b.n	8003d8a <OidFromId+0x436>
                    oid = wrapAes256Oid;
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <OidFromId+0x4a0>)
 8003d7e:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(wrapAes256Oid);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2209      	movs	r2, #9
 8003d84:	601a      	str	r2, [r3, #0]
                    break;
 8003d86:	e000      	b.n	8003d8a <OidFromId+0x436>
                    break;
 8003d88:	bf00      	nop
            }
            break;
 8003d8a:	e018      	b.n	8003dbe <OidFromId+0x46a>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2bbd      	cmp	r3, #189	; 0xbd
 8003d90:	d105      	bne.n	8003d9e <OidFromId+0x44a>
                    *oidSz = sizeof(dhSinglePass_stdDH_sha224kdf_Oid);
                    break;
            #endif
            #ifndef NO_SHA256
                case dhSinglePass_stdDH_sha256kdf_scheme:
                    oid = dhSinglePass_stdDH_sha256kdf_Oid;
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <OidFromId+0x4a4>)
 8003d94:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(dhSinglePass_stdDH_sha256kdf_Oid);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2206      	movs	r2, #6
 8003d9a:	601a      	str	r2, [r3, #0]
                    break;
 8003d9c:	e000      	b.n	8003da0 <OidFromId+0x44c>
                    oid = dhSinglePass_stdDH_sha512kdf_Oid;
                    *oidSz = sizeof(dhSinglePass_stdDH_sha512kdf_Oid);
                    break;
            #endif
                default:
                    break;
 8003d9e:	bf00      	nop
            }
            break;
 8003da0:	e00d      	b.n	8003dbe <OidFromId+0x46a>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f240 228d 	movw	r2, #653	; 0x28d
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d105      	bne.n	8003db8 <OidFromId+0x464>
                    *oidSz = sizeof(hmacSha224Oid);
                    break;
        #endif
        #ifndef NO_SHA256
                case HMAC_SHA256_OID:
                    oid = hmacSha256Oid;
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <OidFromId+0x4a8>)
 8003dae:	617b      	str	r3, [r7, #20]
                    *oidSz = sizeof(hmacSha256Oid);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2208      	movs	r2, #8
 8003db4:	601a      	str	r2, [r3, #0]
                    break;
 8003db6:	e000      	b.n	8003dba <OidFromId+0x466>
                    oid = hmacSha512Oid;
                    *oidSz = sizeof(hmacSha512Oid);
                    break;
        #endif
                default:
                    break;
 8003db8:	bf00      	nop
            }
            break;
 8003dba:	e000      	b.n	8003dbe <OidFromId+0x46a>
            }
            break;
#endif /* WOLFSSL_SUBJ_DIR_ATTR */
        case oidIgnoreType:
        default:
            break;
 8003dbc:	bf00      	nop
    }

    return oid;
 8003dbe:	697b      	ldr	r3, [r7, #20]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	0800c930 	.word	0x0800c930
 8003dd0:	0800c938 	.word	0x0800c938
 8003dd4:	0800c940 	.word	0x0800c940
 8003dd8:	0800c948 	.word	0x0800c948
 8003ddc:	0800c950 	.word	0x0800c950
 8003de0:	0800c958 	.word	0x0800c958
 8003de4:	0800c960 	.word	0x0800c960
 8003de8:	0800c96c 	.word	0x0800c96c
 8003dec:	0800c8b4 	.word	0x0800c8b4
 8003df0:	0800c8c0 	.word	0x0800c8c0
 8003df4:	0800c8cc 	.word	0x0800c8cc
 8003df8:	0800c8d8 	.word	0x0800c8d8
 8003dfc:	0800c870 	.word	0x0800c870

08003e00 <GetASNObjectId>:
 * @return  0 on success.
 * @return  BUFFER_E when there is not enough data to parse.
 * @return  ASN_PARSE_E when the tag is not a OBJECT ID or length is invalid.
 */
int GetASNObjectId(const byte* input, word32* inOutIdx, int* len, word32 maxIdx)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
    int ret = GetASNHeader(input, ASN_OBJECT_ID, inOutIdx, len, maxIdx);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	2106      	movs	r1, #6
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fc27 	bl	800366c <GetASNHeader>
 8003e1e:	6178      	str	r0, [r7, #20]
    if (ret > 0) {
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	dd01      	ble.n	8003e2a <GetASNObjectId+0x2a>
        /* Only return 0 on success. */
        ret = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
    }
    return ret;
 8003e2a:	697b      	ldr	r3, [r7, #20]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <GetOID>:
 * @return  BUFFER_E when not enough bytes for proper decode. (ASN_DUMP_OID and
 *          HAVE_OID_DECODING)
 */
static int GetOID(const byte* input, word32* inOutIdx, word32* oid,
                  word32 oidType, int length)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
    int    ret = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
    word32 idx = *inOutIdx;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	623b      	str	r3, [r7, #32]
#ifndef NO_VERIFY_OID
    word32 actualOidSz;
    const byte* actualOid;
    const byte* checkOid = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
#endif /* NO_VERIFY_OID */
#ifdef HAVE_PQC
    word32 found_collision = 0;
#endif
    (void)oidType;
    *oid = 0;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

#ifndef NO_VERIFY_OID
    /* Keep references to OID data and length for check. */
    actualOid = &input[idx];
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
    actualOidSz = (word32)length;
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	617b      	str	r3, [r7, #20]
        found_collision = SPHINCS_FAST_LEVEL3k;
    }
#endif /* HAVE_PQC */

    /* Sum it up for now. */
    while (length--) {
 8003e62:	e00b      	b.n	8003e7c <GetOID+0x48>
        /* odd HC08 compiler behavior here when input[idx++] */
        *oid += (word32)input[idx];
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	6a3a      	ldr	r2, [r7, #32]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	441a      	add	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
        idx++;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	623b      	str	r3, [r7, #32]
    while (length--) {
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	1e5a      	subs	r2, r3, #1
 8003e80:	633a      	str	r2, [r7, #48]	; 0x30
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ee      	bne.n	8003e64 <GetOID+0x30>
        *oid = found_collision;
    }
#endif /* HAVE_PQC */

    /* Return the index after the OID data. */
    *inOutIdx = idx;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	601a      	str	r2, [r3, #0]

#ifndef NO_VERIFY_OID
    /* 'Ignore' type means we don't care which OID it is. */
    if (oidType != oidIgnoreType) {
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b15      	cmp	r3, #21
 8003e90:	d01e      	beq.n	8003ed0 <GetOID+0x9c>
        /* Get the OID data for the id-type. */
        checkOid = OidFromId(*oid, oidType, &checkOidSz);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f107 0210 	add.w	r2, r7, #16
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fd59 	bl	8003954 <OidFromId>
 8003ea2:	61f8      	str	r0, [r7, #28]
        /* TODO: Want to fail when checkOid is NULL.
         * Can't as too many situations where unknown OID is to be
         * supported. Extra parameter for must not be NULL?
         */
        /* Check that the OID data matches what we found for the OID id. */
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d112      	bne.n	8003ed0 <GetOID+0x9c>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00f      	beq.n	8003ed0 <GetOID+0x9c>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d108      	bne.n	8003eca <GetOID+0x96>
                (XMEMCMP(actualOid, checkOid, checkOidSz) != 0))) {
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	69f9      	ldr	r1, [r7, #28]
 8003ebe:	69b8      	ldr	r0, [r7, #24]
 8003ec0:	f007 fd3c 	bl	800b93c <memcmp>
 8003ec4:	4603      	mov	r3, r0
        if ((ret == 0) && (checkOid != NULL) && ((checkOidSz != actualOidSz) ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <GetOID+0x9c>
            WOLFSSL_MSG("OID Check Failed");
            WOLFSSL_ERROR_VERBOSE(ASN_UNKNOWN_OID_E);
            ret = ASN_UNKNOWN_OID_E;
 8003eca:	f06f 0393 	mvn.w	r3, #147	; 0x93
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif /* NO_VERIFY_OID */

    return ret;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3728      	adds	r7, #40	; 0x28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <GetObjectId>:
 * @return  ASN_PARSE_E when encoding is invalid.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
int GetObjectId(const byte* input, word32* inOutIdx, word32* oid,
                                  word32 oidType, word32 maxIdx)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b088      	sub	sp, #32
 8003ede:	af02      	add	r7, sp, #8
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int ret, length;

    WOLFSSL_ENTER("GetObjectId");

    ret = GetASNObjectId(input, inOutIdx, &length, maxIdx);
 8003ee8:	f107 0210 	add.w	r2, r7, #16
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff ff85 	bl	8003e00 <GetASNObjectId>
 8003ef6:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <GetObjectId+0x28>
        return ret;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	e008      	b.n	8003f14 <GetObjectId+0x3a>

    return GetOID(input, inOutIdx, oid, oidType, length);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff91 	bl	8003e34 <GetOID>
 8003f12:	4603      	mov	r3, r0
        *oid = dataASN[OBJECTIDASN_IDX_OID].data.oid.sum;
    }

    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <SkipObjectId>:

#ifndef WOLFSSL_ASN_TEMPLATE
static int SkipObjectId(const byte* input, word32* inOutIdx, word32 maxIdx)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
    word32 idx = *inOutIdx;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	61bb      	str	r3, [r7, #24]
    int    length;
    int ret;

    ret = GetASNObjectId(input, &idx, &length, maxIdx);
 8003f2e:	f107 0214 	add.w	r2, r7, #20
 8003f32:	f107 0118 	add.w	r1, r7, #24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff ff61 	bl	8003e00 <GetASNObjectId>
 8003f3e:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <SkipObjectId+0x2e>
        return ret;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	e007      	b.n	8003f5a <SkipObjectId+0x3e>

    idx += (word32)length;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
    *inOutIdx = idx;
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	601a      	str	r2, [r3, #0]

    return 0;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <GetAlgoId>:
 * @return  ASN_PARSE_E when encoding is invalid.
 * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
 */
int GetAlgoId(const byte* input, word32* inOutIdx, word32* oid,
                     word32 oidType, word32 maxIdx)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08c      	sub	sp, #48	; 0x30
 8003f66:	af02      	add	r7, sp, #8
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int    length;
    word32 idx = *inOutIdx;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	61fb      	str	r3, [r7, #28]
    int    ret;
    *oid = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

    WOLFSSL_ENTER("GetAlgoId");

    if (GetSequence(input, &idx, &length, maxIdx) < 0)
 8003f7c:	f107 0220 	add.w	r2, r7, #32
 8003f80:	f107 011c 	add.w	r1, r7, #28
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff fb87 	bl	800369a <GetSequence>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	da02      	bge.n	8003f98 <GetAlgoId+0x36>
        return ASN_PARSE_E;
 8003f92:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8003f96:	e033      	b.n	8004000 <GetAlgoId+0x9e>

    if (GetObjectId(input, &idx, oid, oidType, maxIdx) < 0)
 8003f98:	f107 011c 	add.w	r1, r7, #28
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff ff98 	bl	8003eda <GetObjectId>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da02      	bge.n	8003fb6 <GetAlgoId+0x54>
        return ASN_OBJECT_ID_E;
 8003fb0:	f06f 038f 	mvn.w	r3, #143	; 0x8f
 8003fb4:	e024      	b.n	8004000 <GetAlgoId+0x9e>

    /* could have NULL tag and 0 terminator, but may not */
    if (idx < maxIdx) {
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d91c      	bls.n	8003ff8 <GetAlgoId+0x96>
        word32 localIdx = idx; /*use localIdx to not advance when checking tag*/
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	61bb      	str	r3, [r7, #24]
        byte   tag;

        if (GetASNTag(input, &localIdx, &tag, maxIdx) == 0) {
 8003fc2:	f107 0217 	add.w	r2, r7, #23
 8003fc6:	f107 0118 	add.w	r1, r7, #24
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff faca 	bl	8003566 <GetASNTag>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <GetAlgoId+0x96>
            if (tag == ASN_TAG_NULL) {
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d10c      	bne.n	8003ff8 <GetAlgoId+0x96>
                ret = GetASNNull(input, &idx, maxIdx);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f7ff fb6b 	bl	80036c2 <GetASNNull>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24
                if (ret != 0)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <GetAlgoId+0x96>
                    return ret;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	e003      	b.n	8004000 <GetAlgoId+0x9e>
            }
        }
    }

    *inOutIdx = idx;
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	601a      	str	r2, [r3, #0]

    return 0;
 8003ffe:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_RsaPrivateKeyDecode>:
 * @return  MP_INIT_E when the unable to initialize an mp_int.
 * @return  ASN_GETINT_E when the unable to convert data to an mp_int.
 */
static int _RsaPrivateKeyDecode(const byte* input, word32* inOutIdx,
    RsaKey* key, int* keySz, word32 inSz)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_ASN_TEMPLATE
    int version, length;
    word32 algId = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]

    if (inOutIdx == NULL || input == NULL || (key == NULL && keySz == NULL)) {
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <_RsaPrivateKeyDecode+0x2a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <_RsaPrivateKeyDecode+0x2a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <_RsaPrivateKeyDecode+0x30>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <_RsaPrivateKeyDecode+0x30>
        return BAD_FUNC_ARG;
 8004032:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004036:	e0af      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>
    }

    /* if has pkcs8 header skip it */
    if (ToTraditionalInline_ex(input, inOutIdx, inSz, &algId) < 0) {
 8004038:	f107 0310 	add.w	r3, r7, #16
 800403c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f8c7 	bl	80041d4 <ToTraditionalInline_ex>
        /* ignore error, did not have pkcs8 header */
    }

    if (GetSequence(input, inOutIdx, &length, inSz) < 0)
 8004046:	f107 0214 	add.w	r2, r7, #20
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff fb23 	bl	800369a <GetSequence>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	da02      	bge.n	8004060 <_RsaPrivateKeyDecode+0x58>
        return ASN_PARSE_E;
 800405a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800405e:	e09b      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>

    if (GetMyVersion(input, inOutIdx, &version, inSz) < 0)
 8004060:	f107 0218 	add.w	r2, r7, #24
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff fbd3 	bl	8003814 <GetMyVersion>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	da02      	bge.n	800407a <_RsaPrivateKeyDecode+0x72>
        return ASN_PARSE_E;
 8004074:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8004078:	e08e      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>

    if (key == NULL) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d127      	bne.n	80040d0 <_RsaPrivateKeyDecode+0xc8>
        int i;

        /* Modulus */
        if (GetASNInt(input, inOutIdx, keySz, inSz) < 0) {
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff fb6b 	bl	8003762 <GetASNInt>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	da02      	bge.n	8004098 <_RsaPrivateKeyDecode+0x90>
            return ASN_PARSE_E;
 8004092:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8004096:	e07f      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>
        }
        *inOutIdx += (word32)*keySz;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	441a      	add	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	601a      	str	r2, [r3, #0]
        for (i = 1; i < RSA_INTS; i++) {
 80040a6:	2301      	movs	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e00d      	b.n	80040c8 <_RsaPrivateKeyDecode+0xc0>
            if (SkipInt(input, inOutIdx, inSz) < 0) {
 80040ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fc2e 	bl	8003912 <SkipInt>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da02      	bge.n	80040c2 <_RsaPrivateKeyDecode+0xba>
                return ASN_RSA_KEY_E;
 80040bc:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 80040c0:	e06a      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>
        for (i = 1; i < RSA_INTS; i++) {
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b07      	cmp	r3, #7
 80040cc:	ddee      	ble.n	80040ac <_RsaPrivateKeyDecode+0xa4>
 80040ce:	e062      	b.n	8004196 <_RsaPrivateKeyDecode+0x18e>
            }
        }
    }
    else {
        key->type = RSA_PRIVATE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	461a      	mov	r2, r3
 80040d8:	2301      	movs	r3, #1
 80040da:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
        mp_memzero_add("Decode RSA key dQ", &key->dQ);
        mp_memzero_add("Decode RSA key u", &key->u);
    #endif
    #endif

        if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	f7ff fbd8 	bl	800389a <GetInt>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db2b      	blt.n	8004148 <_RsaPrivateKeyDecode+0x140>
            GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f503 700a 	add.w	r0, r3, #552	; 0x228
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	f7ff fbcd 	bl	800389a <GetInt>
 8004100:	4603      	mov	r3, r0
        if (GetInt(&key->n,  input, inOutIdx, inSz) < 0 ||
 8004102:	2b00      	cmp	r3, #0
 8004104:	db20      	blt.n	8004148 <_RsaPrivateKeyDecode+0x140>
    #ifndef WOLFSSL_RSA_PUBLIC_ONLY
            GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 608a 	add.w	r0, r3, #1104	; 0x450
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	f7ff fbc2 	bl	800389a <GetInt>
 8004116:	4603      	mov	r3, r0
            GetInt(&key->e,  input, inOutIdx, inSz) < 0 ||
 8004118:	2b00      	cmp	r3, #0
 800411a:	db15      	blt.n	8004148 <_RsaPrivateKeyDecode+0x140>
            GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 60cf 	add.w	r0, r3, #1656	; 0x678
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	f7ff fbb7 	bl	800389a <GetInt>
 800412c:	4603      	mov	r3, r0
            GetInt(&key->d,  input, inOutIdx, inSz) < 0 ||
 800412e:	2b00      	cmp	r3, #0
 8004130:	db0a      	blt.n	8004148 <_RsaPrivateKeyDecode+0x140>
            GetInt(&key->q,  input, inOutIdx, inSz) < 0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f503 600a 	add.w	r0, r3, #2208	; 0x8a0
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	f7ff fbac 	bl	800389a <GetInt>
 8004142:	4603      	mov	r3, r0
            GetInt(&key->p,  input, inOutIdx, inSz) < 0 ||
 8004144:	2b00      	cmp	r3, #0
 8004146:	da02      	bge.n	800414e <_RsaPrivateKeyDecode+0x146>
            SkipInt(input, inOutIdx, inSz) < 0 ||
            SkipInt(input, inOutIdx, inSz) < 0 ||
            SkipInt(input, inOutIdx, inSz) < 0
    #endif
           ) {
                return ASN_RSA_KEY_E;
 8004148:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 800414c:	e024      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>
           }
    #if (defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || !defined(RSA_LOW_MEM)) \
        && !defined(WOLFSSL_RSA_PUBLIC_ONLY)
        if (GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f603 20c8 	addw	r0, r3, #2760	; 0xac8
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	f7ff fb9e 	bl	800389a <GetInt>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	db15      	blt.n	8004190 <_RsaPrivateKeyDecode+0x188>
            GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f503 604f 	add.w	r0, r3, #3312	; 0xcf0
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	f7ff fb93 	bl	800389a <GetInt>
 8004174:	4603      	mov	r3, r0
        if (GetInt(&key->dP, input, inOutIdx, inSz) < 0 ||
 8004176:	2b00      	cmp	r3, #0
 8004178:	db0a      	blt.n	8004190 <_RsaPrivateKeyDecode+0x188>
            GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f603 7018 	addw	r0, r3, #3864	; 0xf18
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	f7ff fb88 	bl	800389a <GetInt>
 800418a:	4603      	mov	r3, r0
            GetInt(&key->dQ, input, inOutIdx, inSz) < 0 ||
 800418c:	2b00      	cmp	r3, #0
 800418e:	da02      	bge.n	8004196 <_RsaPrivateKeyDecode+0x18e>
            GetInt(&key->u,  input, inOutIdx, inSz) < 0 )  return ASN_RSA_KEY_E;
 8004190:	f06f 038e 	mvn.w	r3, #142	; 0x8e
 8004194:	e000      	b.n	8004198 <_RsaPrivateKeyDecode+0x190>
            return BAD_STATE_E;
        }
    #endif
    }

    return 0;
 8004196:	2300      	movs	r3, #0
    }

    FREE_ASNGETDATA(dataASN, heap);
    return ret;
#endif /* WOLFSSL_ASN_TEMPLATE */
}
 8004198:	4618      	mov	r0, r3
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <wc_RsaPrivateKeyDecode>:
 * @return  MP_INIT_E when the unable to initialize an mp_int.
 * @return  ASN_GETINT_E when the unable to convert data to an mp_int.
 */
int wc_RsaPrivateKeyDecode(const byte* input, word32* inOutIdx, RsaKey* key,
    word32 inSz)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
    if (key == NULL) {
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <wc_RsaPrivateKeyDecode+0x1a>
        return BAD_FUNC_ARG;
 80041b4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80041b8:	e008      	b.n	80041cc <wc_RsaPrivateKeyDecode+0x2c>
    }
    return _RsaPrivateKeyDecode(input, inOutIdx, key, NULL, inSz);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff ff1f 	bl	8004008 <_RsaPrivateKeyDecode>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <ToTraditionalInline_ex>:
 * @return  ASN_EXPECT_0_E when the INTEGER has the MSB set or NULL has a
 *          non-zero length.
 */
int ToTraditionalInline_ex(const byte* input, word32* inOutIdx, word32 sz,
                           word32* algId)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	; 0x30
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
    word32 idx;
    int    version, length;
    int    ret;
    byte   tag;

    if (input == NULL || inOutIdx == NULL)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <ToTraditionalInline_ex+0x1a>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <ToTraditionalInline_ex+0x20>
        return BAD_FUNC_ARG;
 80041ee:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80041f2:	e065      	b.n	80042c0 <ToTraditionalInline_ex+0xec>

    idx = *inOutIdx;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	623b      	str	r3, [r7, #32]

    if (GetSequence(input, &idx, &length, sz) < 0)
 80041fa:	f107 0218 	add.w	r2, r7, #24
 80041fe:	f107 0120 	add.w	r1, r7, #32
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fa48 	bl	800369a <GetSequence>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	da02      	bge.n	8004216 <ToTraditionalInline_ex+0x42>
        return ASN_PARSE_E;
 8004210:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8004214:	e054      	b.n	80042c0 <ToTraditionalInline_ex+0xec>

    if (GetMyVersion(input, &idx, &version, sz) < 0)
 8004216:	f107 021c 	add.w	r2, r7, #28
 800421a:	f107 0120 	add.w	r1, r7, #32
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff faf7 	bl	8003814 <GetMyVersion>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	da02      	bge.n	8004232 <ToTraditionalInline_ex+0x5e>
        return ASN_PARSE_E;
 800422c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8004230:	e046      	b.n	80042c0 <ToTraditionalInline_ex+0xec>

    if (GetAlgoId(input, &idx, algId, oidKeyType, sz) < 0)
 8004232:	f107 0120 	add.w	r1, r7, #32
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2302      	movs	r3, #2
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fe8f 	bl	8003f62 <GetAlgoId>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	da02      	bge.n	8004250 <ToTraditionalInline_ex+0x7c>
        return ASN_PARSE_E;
 800424a:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800424e:	e037      	b.n	80042c0 <ToTraditionalInline_ex+0xec>

    if (GetASNTag(input, &idx, &tag, sz) < 0)
 8004250:	f107 0217 	add.w	r2, r7, #23
 8004254:	f107 0120 	add.w	r1, r7, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff f983 	bl	8003566 <GetASNTag>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	da02      	bge.n	800426c <ToTraditionalInline_ex+0x98>
        return ASN_PARSE_E;
 8004266:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800426a:	e029      	b.n	80042c0 <ToTraditionalInline_ex+0xec>
    idx = idx - 1; /* reset idx after finding tag */
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	3b01      	subs	r3, #1
 8004270:	623b      	str	r3, [r7, #32]
        /* TODO: store parameters so that usage can be checked. */
        idx += seqLen;
    }
#endif /* WC_RSA_PSS && !NO_RSA */

    if (tag == ASN_OBJECT_ID) {
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d10c      	bne.n	8004292 <ToTraditionalInline_ex+0xbe>
        if (SkipObjectId(input, &idx, sz) < 0)
 8004278:	f107 0320 	add.w	r3, r7, #32
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4619      	mov	r1, r3
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fe4b 	bl	8003f1c <SkipObjectId>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	da02      	bge.n	8004292 <ToTraditionalInline_ex+0xbe>
            return ASN_PARSE_E;
 800428c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 8004290:	e016      	b.n	80042c0 <ToTraditionalInline_ex+0xec>
    }

    ret = GetOctetString(input, &idx, &length, sz);
 8004292:	f107 0218 	add.w	r2, r7, #24
 8004296:	f107 0120 	add.w	r1, r7, #32
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fa4c 	bl	800373a <GetOctetString>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24
    if (ret < 0) {
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	da06      	bge.n	80042b8 <ToTraditionalInline_ex+0xe4>
        if (ret == BUFFER_E)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	f113 0f84 	cmn.w	r3, #132	; 0x84
 80042b0:	d102      	bne.n	80042b8 <ToTraditionalInline_ex+0xe4>
            return ASN_PARSE_E;
 80042b2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80042b6:	e003      	b.n	80042c0 <ToTraditionalInline_ex+0xec>
        /* Some private keys don't expect an octet string */
        WOLFSSL_MSG("Couldn't find Octet string");
    }

    *inOutIdx = idx;
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	601a      	str	r2, [r3, #0]

    return length;
 80042be:	69bb      	ldr	r3, [r7, #24]
    }

    FREE_ASNGETDATA(dataASN, NULL);
    return ret;
#endif
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3728      	adds	r7, #40	; 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <wc_HashGetDigestSize>:

#ifndef NO_HASH_WRAPPER

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
 80042d2:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 80042d6:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	3b01      	subs	r3, #1
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d828      	bhi.n	8004332 <wc_HashGetDigestSize+0x6a>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <wc_HashGetDigestSize+0x20>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	0800433b 	.word	0x0800433b
 80042ec:	0800433b 	.word	0x0800433b
 80042f0:	0800433b 	.word	0x0800433b
 80042f4:	0800433b 	.word	0x0800433b
 80042f8:	0800433b 	.word	0x0800433b
 80042fc:	0800432d 	.word	0x0800432d
 8004300:	0800433b 	.word	0x0800433b
 8004304:	0800433b 	.word	0x0800433b
 8004308:	0800433b 	.word	0x0800433b
 800430c:	0800433b 	.word	0x0800433b
 8004310:	0800433b 	.word	0x0800433b
 8004314:	0800433b 	.word	0x0800433b
 8004318:	0800433b 	.word	0x0800433b
 800431c:	0800433b 	.word	0x0800433b
 8004320:	0800433b 	.word	0x0800433b
 8004324:	0800433b 	.word	0x0800433b
 8004328:	0800433b 	.word	0x0800433b
            dig_size = WC_SHA224_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            dig_size = WC_SHA256_DIGEST_SIZE;
 800432c:	2320      	movs	r3, #32
 800432e:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 8004330:	e004      	b.n	800433c <wc_HashGetDigestSize+0x74>
    #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
 8004332:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004336:	60fb      	str	r3, [r7, #12]
            break;
 8004338:	e000      	b.n	800433c <wc_HashGetDigestSize+0x74>
            break;
 800433a:	bf00      	nop
    }
    return dig_size;
 800433c:	68fb      	ldr	r3, [r7, #12]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop

0800434c <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
    int ret = HASH_TYPE_E; /* Default to hash type error */
 800435c:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 8004360:	617b      	str	r3, [r7, #20]
    int dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ffaf 	bl	80042c8 <wc_HashGetDigestSize>
 800436a:	6138      	str	r0, [r7, #16]
    if (dig_size < 0) {
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da01      	bge.n	8004376 <wc_Hash+0x2a>
        return dig_size;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	e039      	b.n	80043ea <wc_Hash+0x9e>
    }

    if (hash_len < (word32)dig_size) {
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	429a      	cmp	r2, r3
 800437c:	d202      	bcs.n	8004384 <wc_Hash+0x38>
        return BUFFER_E;
 800437e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8004382:	e032      	b.n	80043ea <wc_Hash+0x9e>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	3b03      	subs	r3, #3
 8004388:	2b0e      	cmp	r3, #14
 800438a:	d828      	bhi.n	80043de <wc_Hash+0x92>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <wc_Hash+0x48>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043e7 	.word	0x080043e7
 8004398:	080043e7 	.word	0x080043e7
 800439c:	080043e7 	.word	0x080043e7
 80043a0:	080043d1 	.word	0x080043d1
 80043a4:	080043e7 	.word	0x080043e7
 80043a8:	080043e7 	.word	0x080043e7
 80043ac:	080043e7 	.word	0x080043e7
 80043b0:	080043e7 	.word	0x080043e7
 80043b4:	080043e7 	.word	0x080043e7
 80043b8:	080043e7 	.word	0x080043e7
 80043bc:	080043e7 	.word	0x080043e7
 80043c0:	080043df 	.word	0x080043df
 80043c4:	080043df 	.word	0x080043df
 80043c8:	080043e7 	.word	0x080043e7
 80043cc:	080043e7 	.word	0x080043e7
            ret = wc_Sha224Hash(data, data_len, hash);
#endif
            break;
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Hash(data, data_len, hash);
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	68b8      	ldr	r0, [r7, #8]
 80043d6:	f000 f80d 	bl	80043f4 <wc_Sha256Hash>
 80043da:	6178      	str	r0, [r7, #20]
#endif
            break;
 80043dc:	e004      	b.n	80043e8 <wc_Hash+0x9c>
    #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
 80043de:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80043e2:	617b      	str	r3, [r7, #20]
            break;
 80043e4:	e000      	b.n	80043e8 <wc_Hash+0x9c>
            break;
 80043e6:	bf00      	nop
    }
    return ret;
 80043e8:	697b      	ldr	r3, [r7, #20]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop

080043f4 <wc_Sha256Hash>:
}
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
    #ifdef WOLFSSL_SMALL_STACK
        wc_Sha256* sha256;
    #else
        wc_Sha256 sha256[1];
    #endif
        int devId = INVALID_DEVID;
 8004404:	f06f 0301 	mvn.w	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 800440a:	2070      	movs	r0, #112	; 0x70
 800440c:	f000 f82e 	bl	800446c <wolfSSL_Malloc>
 8004410:	6178      	str	r0, [r7, #20]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <wc_Sha256Hash+0x2a>
            return MEMORY_E;
 8004418:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800441c:	e022      	b.n	8004464 <wc_Sha256Hash+0x70>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	2100      	movs	r1, #0
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	f002 f92c 	bl	8006680 <wc_InitSha256_ex>
 8004428:	61f8      	str	r0, [r7, #28]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d110      	bne.n	8004452 <wc_Sha256Hash+0x5e>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	6978      	ldr	r0, [r7, #20]
 8004436:	f002 fd74 	bl	8006f22 <wc_Sha256Update>
 800443a:	61f8      	str	r0, [r7, #28]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <wc_Sha256Hash+0x58>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	6978      	ldr	r0, [r7, #20]
 8004446:	f002 fe0f 	bl	8007068 <wc_Sha256Final>
 800444a:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
 800444c:	6978      	ldr	r0, [r7, #20]
 800444e:	f002 fe47 	bl	80070e0 <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <wc_Sha256Hash+0x6e>
 800445c:	6938      	ldr	r0, [r7, #16]
 800445e:	f000 f821 	bl	80044a4 <wolfSSL_Free>
    #endif

        return ret;
 8004462:	69fb      	ldr	r3, [r7, #28]
    }
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    void* res = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
#ifdef WOLFSSL_CHECK_MEM_ZERO
    /* Space for requested size. */
    size += MEM_ALIGN;
#endif

    if (malloc_function) {
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <wolfSSL_Malloc+0x34>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <wolfSSL_Malloc+0x20>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <wolfSSL_Malloc+0x34>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	e004      	b.n	8004496 <wolfSSL_Malloc+0x2a>
            WOLFSSL_MSG("Malloc too big!");
            return NULL;
        }
        #endif

        res = malloc(size);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f006 fd33 	bl	800aef8 <malloc>
 8004492:	4603      	mov	r3, r0
 8004494:	60fb      	str	r3, [r7, #12]
        gMemFailCount = gMemFailCountSeed; /* reset */
        return NULL;
    }
#endif

    return res;
 8004496:	68fb      	ldr	r3, [r7, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000124 	.word	0x20000124

080044a4 <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
#endif
#ifdef WOLFSSL_MEM_FAIL_COUNT
    wc_MemFailCount_FreeMem();
#endif

    if (free_function) {
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <wolfSSL_Free+0x28>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <wolfSSL_Free+0x1a>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <wolfSSL_Free+0x28>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
        free(ptr);
    #else
        WOLFSSL_MSG("No free available");
    #endif
    }
}
 80044bc:	e002      	b.n	80044c4 <wolfSSL_Free+0x20>
        free(ptr);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f006 fd22 	bl	800af08 <free>
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000128 	.word	0x20000128

080044d0 <rotlFixed>:

#else /* generic */
/* This routine performs a left circular arithmetic shift of <x> by <y> value. */

    WC_MISC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f1c3 0320 	rsb	r3, r3, #32
 80044e2:	fa62 f303 	ror.w	r3, r2, r3
    }
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <ByteReverseWord32>:
/* This routine performs a byte swap of 32-bit word value. */
#if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
    #define ByteReverseWord32(value) _builtin_revl(value)
#else
WC_MISC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800450a:	4313      	orrs	r3, r2
 800450c:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 800450e:	2110      	movs	r1, #16
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ffdd 	bl	80044d0 <rotlFixed>
 8004516:	4603      	mov	r3, r0
#endif
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <ForceZero>:

#ifndef WOLFSSL_NO_FORCE_ZERO
/* This routine fills the first len bytes of the memory area pointed by mem
   with zeros. It ensures compiler optimizations doesn't skip it  */
WC_MISC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60fb      	str	r3, [r7, #12]
            *w++ = 0;
        }
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 800452e:	e004      	b.n	800453a <ForceZero+0x1a>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60fa      	str	r2, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	603a      	str	r2, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f5      	bne.n	8004530 <ForceZero+0x10>
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <ConstantCompare>:

#ifndef WOLFSSL_NO_CONST_CMP
/* check all length bytes for equality, return 0 on success */
WC_MISC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b,
                                             int length)
{
 8004552:	b480      	push	{r7}
 8004554:	b087      	sub	sp, #28
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
    int i;
    int compareSum = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]

    for (i = 0; i < length; i++) {
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e010      	b.n	800458a <ConstantCompare+0x38>
        compareSum |= a[i] ^ b[i];
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	440b      	add	r3, r1
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	4053      	eors	r3, r2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3301      	adds	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	dbea      	blt.n	8004568 <ConstantCompare+0x16>
    }

    return compareSum;
 8004592:	693b      	ldr	r3, [r7, #16]
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <min>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_MISC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4293      	cmp	r3, r2
 80045b0:	bf28      	it	cs
 80045b2:	4613      	movcs	r3, r2
    }
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <Hash_df>:
/* Hash Derivation Function */
/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_df(DRBG_internal* drbg, byte* out, word32 outSz, byte type,
                                                  const byte* inA, word32 inASz,
                                                  const byte* inB, word32 inBSz)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b0a8      	sub	sp, #160	; 0xa0
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	70fb      	strb	r3, [r7, #3]
    int ret = DRBG_FAILURE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    byte ctr;
    word32 i;
    word32 len;
    word32 bits = (outSz * 8); /* reverse byte order */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    byte* digest;
#else
    byte digest[WC_SHA256_DIGEST_SIZE];
#endif

    if (drbg == NULL) {
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <Hash_df+0x26>
        return DRBG_FAILURE;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0d8      	b.n	8004798 <Hash_df+0x1d8>
    }

#ifdef WOLFSSL_SMALL_STACK
    digest = (byte*)XMALLOC(WC_SHA256_DIGEST_SIZE, drbg->heap,
 80045e6:	2020      	movs	r0, #32
 80045e8:	f7ff ff40 	bl	800446c <wolfSSL_Malloc>
 80045ec:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        DYNAMIC_TYPE_DIGEST);
    if (digest == NULL)
 80045f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <Hash_df+0x3c>
        return DRBG_FAILURE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0cd      	b.n	8004798 <Hash_df+0x1d8>
#endif

#ifdef LITTLE_ENDIAN_ORDER
    bits = ByteReverseWord32(bits);
 80045fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff76 	bl	80044f2 <ByteReverseWord32>
 8004606:	4603      	mov	r3, r0
 8004608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
    len = (outSz / OUTPUT_BLOCK_LEN)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	095b      	lsrs	r3, r3, #5
        + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	f002 021f 	and.w	r2, r2, #31
 8004616:	2a00      	cmp	r2, #0
 8004618:	d001      	beq.n	800461e <Hash_df+0x5e>
 800461a:	2201      	movs	r2, #1
 800461c:	e000      	b.n	8004620 <Hash_df+0x60>
 800461e:	2200      	movs	r2, #0
    len = (outSz / OUTPUT_BLOCK_LEN)
 8004620:	4413      	add	r3, r2
 8004622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    ctr = 1;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    for (i = 0; i < len; i++) {
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004632:	e090      	b.n	8004756 <Hash_df+0x196>
#ifndef WOLFSSL_SMALL_STACK_CACHE
    #if defined(WOLFSSL_ASYNC_CRYPT) || defined(WOLF_CRYPTO_CB)
        ret = wc_InitSha256_ex(sha, drbg->heap, drbg->devId);
    #else
        ret = wc_InitSha256(sha);
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	4618      	mov	r0, r3
 800463a:	f002 fd40 	bl	80070be <wc_InitSha256>
 800463e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    #endif
        if (ret != 0)
 8004642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 808d 	bne.w	8004766 <Hash_df+0x1a6>
            break;
#endif
        ret = wc_Sha256Update(sha, &ctr, sizeof(ctr));
 800464c:	f107 018b 	add.w	r1, r7, #139	; 0x8b
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	2201      	movs	r2, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f002 fc63 	bl	8006f22 <wc_Sha256Update>
 800465c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret == 0) {
 8004660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10f      	bne.n	8004688 <Hash_df+0xc8>
            ctr++;
 8004668:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800466c:	3301      	adds	r3, #1
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            ret = wc_Sha256Update(sha, (byte*)&bits, sizeof(bits));
 8004674:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	2204      	movs	r2, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f002 fc4f 	bl	8006f22 <wc_Sha256Update>
 8004684:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        }

        if (ret == 0) {
 8004688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <Hash_df+0xe8>
            /* churning V is the only string that doesn't have the type added */
            if (type != drbgInitV)
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d008      	beq.n	80046a8 <Hash_df+0xe8>
                ret = wc_Sha256Update(sha, &type, sizeof(type));
 8004696:	1cf9      	adds	r1, r7, #3
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	2201      	movs	r2, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f002 fc3f 	bl	8006f22 <wc_Sha256Update>
 80046a4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        }
        if (ret == 0)
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <Hash_df+0x106>
            ret = wc_Sha256Update(sha, inA, inASz);
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046b8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 fc30 	bl	8006f22 <wc_Sha256Update>
 80046c2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret == 0) {
 80046c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d112      	bne.n	80046f4 <Hash_df+0x134>
            if (inB != NULL && inBSz > 0)
 80046ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <Hash_df+0x134>
 80046d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <Hash_df+0x134>
                ret = wc_Sha256Update(sha, inB, inBSz);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046e6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f002 fc19 	bl	8006f22 <wc_Sha256Update>
 80046f0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        }
        if (ret == 0)
 80046f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <Hash_df+0x14e>
            ret = wc_Sha256Final(sha, digest);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004704:	4618      	mov	r0, r3
 8004706:	f002 fcaf 	bl	8007068 <wc_Sha256Final>
 800470a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

#ifndef WOLFSSL_SMALL_STACK_CACHE
        wc_Sha256Free(sha);
 800470e:	f107 0314 	add.w	r3, r7, #20
 8004712:	4618      	mov	r0, r3
 8004714:	f002 fce4 	bl	80070e0 <wc_Sha256Free>
#endif
        if (ret == 0) {
 8004718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d115      	bne.n	800474c <Hash_df+0x18c>
            if (outSz > OUTPUT_BLOCK_LEN) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d90c      	bls.n	8004740 <Hash_df+0x180>
                XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
 8004726:	2220      	movs	r2, #32
 8004728:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800472c:	68b8      	ldr	r0, [r7, #8]
 800472e:	f007 f9b3 	bl	800ba98 <memcpy>
                outSz -= OUTPUT_BLOCK_LEN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3b20      	subs	r3, #32
 8004736:	607b      	str	r3, [r7, #4]
                out += OUTPUT_BLOCK_LEN;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	3320      	adds	r3, #32
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	e005      	b.n	800474c <Hash_df+0x18c>
            }
            else {
                XMEMCPY(out, digest, outSz);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004746:	68b8      	ldr	r0, [r7, #8]
 8004748:	f007 f9a6 	bl	800ba98 <memcpy>
    for (i = 0; i < len; i++) {
 800474c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004750:	3301      	adds	r3, #1
 8004752:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004756:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800475a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800475e:	429a      	cmp	r2, r3
 8004760:	f4ff af68 	bcc.w	8004634 <Hash_df+0x74>
 8004764:	e000      	b.n	8004768 <Hash_df+0x1a8>
            break;
 8004766:	bf00      	nop
            }
        }
    }

    ForceZero(digest, WC_SHA256_DIGEST_SIZE);
 8004768:	2120      	movs	r1, #32
 800476a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800476e:	f7ff fed7 	bl	8004520 <ForceZero>

#ifdef WOLFSSL_SMALL_STACK
    XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 8004772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800477a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <Hash_df+0x1ca>
 8004782:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004786:	f7ff fe8d 	bl	80044a4 <wolfSSL_Free>
#endif

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 800478a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	37a0      	adds	r7, #160	; 0xa0
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <Hash_DRBG_Reseed>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Reseed(DRBG_internal* drbg, const byte* seed, word32 seedSz)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	; 0x30
 80047a4:	af04      	add	r7, sp, #16
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
    byte* newV;
#else
    byte newV[DRBG_SEED_LEN];
#endif

    if (drbg == NULL) {
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <Hash_DRBG_Reseed+0x16>
        return DRBG_FAILURE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e04d      	b.n	8004852 <Hash_DRBG_Reseed+0xb2>
    }

#ifdef WOLFSSL_SMALL_STACK
    newV = (byte*)XMALLOC(DRBG_SEED_LEN, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80047b6:	2037      	movs	r0, #55	; 0x37
 80047b8:	f7ff fe58 	bl	800446c <wolfSSL_Malloc>
 80047bc:	61b8      	str	r0, [r7, #24]
    if (newV == NULL) {
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <Hash_DRBG_Reseed+0x2a>
        return MEMORY_E;
 80047c4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80047c8:	e043      	b.n	8004852 <Hash_DRBG_Reseed+0xb2>
    }
#endif
    XMEMSET(newV, 0, DRBG_SEED_LEN);
 80047ca:	2237      	movs	r2, #55	; 0x37
 80047cc:	2100      	movs	r1, #0
 80047ce:	69b8      	ldr	r0, [r7, #24]
 80047d0:	f007 f8c4 	bl	800b95c <memset>

    ret = Hash_df(drbg, newV, DRBG_SEED_LEN, drbgReseed,
                drbg->V, sizeof(drbg->V), seed, seedSz);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3304      	adds	r3, #4
    ret = Hash_df(drbg, newV, DRBG_SEED_LEN, drbgReseed,
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	9203      	str	r2, [sp, #12]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	9202      	str	r2, [sp, #8]
 80047e0:	2237      	movs	r2, #55	; 0x37
 80047e2:	9201      	str	r2, [sp, #4]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	2301      	movs	r3, #1
 80047e8:	2237      	movs	r2, #55	; 0x37
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fee7 	bl	80045c0 <Hash_df>
 80047f2:	61f8      	str	r0, [r7, #28]
    if (ret == DRBG_SUCCESS) {
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11c      	bne.n	8004834 <Hash_DRBG_Reseed+0x94>
        XMEMCPY(drbg->V, newV, sizeof(drbg->V));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2237      	movs	r2, #55	; 0x37
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	4618      	mov	r0, r3
 8004804:	f007 f948 	bl	800ba98 <memcpy>
        ForceZero(newV, DRBG_SEED_LEN);
 8004808:	2137      	movs	r1, #55	; 0x37
 800480a:	69b8      	ldr	r0, [r7, #24]
 800480c:	f7ff fe88 	bl	8004520 <ForceZero>

        ret = Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3304      	adds	r3, #4
 800481a:	2200      	movs	r2, #0
 800481c:	9203      	str	r2, [sp, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	9202      	str	r2, [sp, #8]
 8004822:	2237      	movs	r2, #55	; 0x37
 8004824:	9201      	str	r2, [sp, #4]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2300      	movs	r3, #0
 800482a:	2237      	movs	r2, #55	; 0x37
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fec7 	bl	80045c0 <Hash_df>
 8004832:	61f8      	str	r0, [r7, #28]
                                    sizeof(drbg->V), NULL, 0);
    }
    if (ret == DRBG_SUCCESS) {
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <Hash_DRBG_Reseed+0xa0>
        drbg->reseedCtr = 1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(newV, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <Hash_DRBG_Reseed+0xb0>
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff fe2a 	bl	80044a4 <wolfSSL_Free>
#endif
    return ret;
 8004850:	69fb      	ldr	r3, [r7, #28]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <array_add_one>:

    return Hash_DRBG_Reseed((DRBG_internal *)rng->drbg, seed, seedSz);
}

static WC_INLINE void array_add_one(byte* data, word32 dataSz)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
    int i;
    for (i = (int)dataSz - 1; i >= 0; i--) {
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e00f      	b.n	800488c <array_add_one+0x32>
        data[i]++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	3201      	adds	r2, #1
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
        if (data[i] != 0) break;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <array_add_one+0x3a>
    for (i = (int)dataSz - 1; i >= 0; i--) {
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	daec      	bge.n	800486c <array_add_one+0x12>
    }
}
 8004892:	e000      	b.n	8004896 <array_add_one+0x3c>
        if (data[i] != 0) break;
 8004894:	bf00      	nop
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <Hash_gen>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_gen(DRBG_internal* drbg, byte* out, word32 outSz, const byte* V)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b0aa      	sub	sp, #168	; 0xa8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	603b      	str	r3, [r7, #0]
    int ret = DRBG_FAILURE;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    wc_Sha256* sha = &drbg->sha256;
#else
    wc_Sha256 sha[1];
#endif

    if (drbg == NULL) {
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <Hash_gen+0x1e>
        return DRBG_FAILURE;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0c6      	b.n	8004a4e <Hash_gen+0x1ac>
    }

#ifdef WOLFSSL_SMALL_STACK
    data = (byte*)XMALLOC(DRBG_SEED_LEN, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80048c0:	2037      	movs	r0, #55	; 0x37
 80048c2:	f7ff fdd3 	bl	800446c <wolfSSL_Malloc>
 80048c6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    digest = (byte*)XMALLOC(WC_SHA256_DIGEST_SIZE, drbg->heap,
 80048ca:	2020      	movs	r0, #32
 80048cc:	f7ff fdce 	bl	800446c <wolfSSL_Malloc>
 80048d0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        DYNAMIC_TYPE_DIGEST);
    if (data == NULL || digest == NULL) {
 80048d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <Hash_gen+0x42>
 80048dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d119      	bne.n	8004918 <Hash_gen+0x76>
        XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 80048e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <Hash_gen+0x5a>
 80048f4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80048f8:	f7ff fdd4 	bl	80044a4 <wolfSSL_Free>
        XFREE(data, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 80048fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <Hash_gen+0x72>
 800490c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004910:	f7ff fdc8 	bl	80044a4 <wolfSSL_Free>
        return DRBG_FAILURE;
 8004914:	2301      	movs	r3, #1
 8004916:	e09a      	b.n	8004a4e <Hash_gen+0x1ac>
#endif

    /* Special case: outSz is 0 and out is NULL. wc_Generate a block to save for
     * the continuous test. */

    if (outSz == 0) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <Hash_gen+0x80>
        outSz = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
    }

    len = (outSz / OUTPUT_BLOCK_LEN) + ((outSz % OUTPUT_BLOCK_LEN) ? 1 : 0);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	f002 021f 	and.w	r2, r2, #31
 800492c:	2a00      	cmp	r2, #0
 800492e:	d001      	beq.n	8004934 <Hash_gen+0x92>
 8004930:	2201      	movs	r2, #1
 8004932:	e000      	b.n	8004936 <Hash_gen+0x94>
 8004934:	2200      	movs	r2, #0
 8004936:	4413      	add	r3, r2
 8004938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    XMEMCPY(data, V, DRBG_SEED_LEN);
 800493c:	2237      	movs	r2, #55	; 0x37
 800493e:	6839      	ldr	r1, [r7, #0]
 8004940:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004944:	f007 f8a8 	bl	800ba98 <memcpy>
    for (i = 0; i < len; i++) {
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800494e:	e052      	b.n	80049f6 <Hash_gen+0x154>
#ifndef WOLFSSL_SMALL_STACK_CACHE
    #if defined(WOLFSSL_ASYNC_CRYPT) || defined(WOLF_CRYPTO_CB)
        ret = wc_InitSha256_ex(sha, drbg->heap, drbg->devId);
    #else
        ret = wc_InitSha256(sha);
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	4618      	mov	r0, r3
 8004956:	f002 fbb2 	bl	80070be <wc_InitSha256>
 800495a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    #endif
        if (ret == 0)
 800495e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <Hash_gen+0xd8>
#endif
            ret = wc_Sha256Update(sha, data, DRBG_SEED_LEN);
 8004966:	f107 0314 	add.w	r3, r7, #20
 800496a:	2237      	movs	r2, #55	; 0x37
 800496c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8004970:	4618      	mov	r0, r3
 8004972:	f002 fad6 	bl	8006f22 <wc_Sha256Update>
 8004976:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if (ret == 0)
 800497a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <Hash_gen+0xf2>
            ret = wc_Sha256Final(sha, digest);
 8004982:	f107 0314 	add.w	r3, r7, #20
 8004986:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800498a:	4618      	mov	r0, r3
 800498c:	f002 fb6c 	bl	8007068 <wc_Sha256Final>
 8004990:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
#ifndef WOLFSSL_SMALL_STACK_CACHE
        wc_Sha256Free(sha);
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4618      	mov	r0, r3
 800499a:	f002 fba1 	bl	80070e0 <wc_Sha256Free>
#endif

        if (ret == 0) {
 800499e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d12e      	bne.n	8004a04 <Hash_gen+0x162>
            if (out != NULL && outSz != 0) {
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01f      	beq.n	80049ec <Hash_gen+0x14a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01c      	beq.n	80049ec <Hash_gen+0x14a>
                if (outSz >= OUTPUT_BLOCK_LEN) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b1f      	cmp	r3, #31
 80049b6:	d911      	bls.n	80049dc <Hash_gen+0x13a>
                    XMEMCPY(out, digest, OUTPUT_BLOCK_LEN);
 80049b8:	2220      	movs	r2, #32
 80049ba:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80049be:	68b8      	ldr	r0, [r7, #8]
 80049c0:	f007 f86a 	bl	800ba98 <memcpy>
                    outSz -= OUTPUT_BLOCK_LEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3b20      	subs	r3, #32
 80049c8:	607b      	str	r3, [r7, #4]
                    out += OUTPUT_BLOCK_LEN;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3320      	adds	r3, #32
 80049ce:	60bb      	str	r3, [r7, #8]
                    array_add_one(data, DRBG_SEED_LEN);
 80049d0:	2137      	movs	r1, #55	; 0x37
 80049d2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80049d6:	f7ff ff40 	bl	800485a <array_add_one>
 80049da:	e007      	b.n	80049ec <Hash_gen+0x14a>
                }
                else {
                    XMEMCPY(out, digest, outSz);
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f007 f858 	bl	800ba98 <memcpy>
                    outSz = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	607b      	str	r3, [r7, #4]
    for (i = 0; i < len; i++) {
 80049ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049f0:	3301      	adds	r3, #1
 80049f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80049fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3a6      	bcc.n	8004950 <Hash_gen+0xae>
 8004a02:	e000      	b.n	8004a06 <Hash_gen+0x164>
                }
            }
        }
        else {
            /* wc_Sha256Update or wc_Sha256Final returned error */
            break;
 8004a04:	bf00      	nop
        }
    }
    ForceZero(data, DRBG_SEED_LEN);
 8004a06:	2137      	movs	r1, #55	; 0x37
 8004a08:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004a0c:	f7ff fd88 	bl	8004520 <ForceZero>

#ifdef WOLFSSL_SMALL_STACK
    XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 8004a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <Hash_gen+0x186>
 8004a20:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004a24:	f7ff fd3e 	bl	80044a4 <wolfSSL_Free>
    XFREE(data, drbg->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8004a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <Hash_gen+0x19e>
 8004a38:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004a3c:	f7ff fd32 	bl	80044a4 <wolfSSL_Free>
#endif

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 8004a40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	37a8      	adds	r7, #168	; 0xa8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <array_add>:

static WC_INLINE void array_add(byte* d, word32 dLen, const byte* s, word32 sLen)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b089      	sub	sp, #36	; 0x24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
    if (dLen > 0 && sLen > 0 && dLen >= sLen) {
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d048      	beq.n	8004afc <array_add+0xa6>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d045      	beq.n	8004afc <array_add+0xa6>
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d341      	bcc.n	8004afc <array_add+0xa6>
        int sIdx, dIdx;
        word16 carry = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	82fb      	strh	r3, [r7, #22]

        dIdx = (int)dLen - 1;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e01d      	b.n	8004ac6 <array_add+0x70>
            carry += (word16)(d[dIdx] + s[sIdx]);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	440b      	add	r3, r1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	8afb      	ldrh	r3, [r7, #22]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	82fb      	strh	r3, [r7, #22]
            d[dIdx] = (byte)carry;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	8afa      	ldrh	r2, [r7, #22]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
            carry >>= 8;
 8004ab4:	8afb      	ldrh	r3, [r7, #22]
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	82fb      	strh	r3, [r7, #22]
            dIdx--;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	61bb      	str	r3, [r7, #24]
        for (sIdx = (int)sLen - 1; sIdx >= 0; sIdx--) {
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dade      	bge.n	8004a8a <array_add+0x34>
        }

        for (; dIdx >= 0; dIdx--) {
 8004acc:	e013      	b.n	8004af6 <array_add+0xa0>
            carry += (word16)d[dIdx];
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	8afb      	ldrh	r3, [r7, #22]
 8004ada:	4413      	add	r3, r2
 8004adc:	82fb      	strh	r3, [r7, #22]
            d[dIdx] = (byte)carry;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	8afa      	ldrh	r2, [r7, #22]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
            carry >>= 8;
 8004aea:	8afb      	ldrh	r3, [r7, #22]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	82fb      	strh	r3, [r7, #22]
        for (; dIdx >= 0; dIdx--) {
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dae8      	bge.n	8004ace <array_add+0x78>
        }
    }
}
 8004afc:	bf00      	nop
 8004afe:	3724      	adds	r7, #36	; 0x24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <Hash_DRBG_Generate>:

/* Returns: DRBG_SUCCESS, DRBG_NEED_RESEED, or DRBG_FAILURE */
static int Hash_DRBG_Generate(DRBG_internal* drbg, byte* out, word32 outSz)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b0a6      	sub	sp, #152	; 0x98
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
    wc_Sha256 sha[1];
#endif
    byte type;
    word32 reseedCtr;

    if (drbg == NULL) {
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <Hash_DRBG_Generate+0x16>
        return DRBG_FAILURE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e09b      	b.n	8004c56 <Hash_DRBG_Generate+0x14e>
    }

    if (drbg->reseedCtr == RESEED_INTERVAL) {
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a4f      	ldr	r2, [pc, #316]	; (8004c60 <Hash_DRBG_Generate+0x158>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <Hash_DRBG_Generate+0x24>
        return DRBG_NEED_RESEED;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e094      	b.n	8004c56 <Hash_DRBG_Generate+0x14e>
    }
    else {
    #ifndef WOLFSSL_SMALL_STACK
        byte digest[WC_SHA256_DIGEST_SIZE];
    #else
        byte* digest = (byte*)XMALLOC(WC_SHA256_DIGEST_SIZE, drbg->heap,
 8004b2c:	2020      	movs	r0, #32
 8004b2e:	f7ff fc9d 	bl	800446c <wolfSSL_Malloc>
 8004b32:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
            DYNAMIC_TYPE_DIGEST);
        if (digest == NULL)
 8004b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <Hash_DRBG_Generate+0x3a>
            return DRBG_FAILURE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e089      	b.n	8004c56 <Hash_DRBG_Generate+0x14e>
    #endif

        type = drbgGenerateH;
 8004b42:	2303      	movs	r3, #3
 8004b44:	76fb      	strb	r3, [r7, #27]
        reseedCtr = drbg->reseedCtr;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]

        ret = Hash_gen(drbg, out, outSz, drbg->V);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff fea4 	bl	80048a2 <Hash_gen>
 8004b5a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        if (ret == DRBG_SUCCESS) {
 8004b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d15f      	bne.n	8004c26 <Hash_DRBG_Generate+0x11e>
#ifndef WOLFSSL_SMALL_STACK_CACHE
        #if defined(WOLFSSL_ASYNC_CRYPT) || defined(WOLF_CRYPTO_CB)
            ret = wc_InitSha256_ex(sha, drbg->heap, drbg->devId);
        #else
            ret = wc_InitSha256(sha);
 8004b66:	f107 031c 	add.w	r3, r7, #28
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f002 faa7 	bl	80070be <wc_InitSha256>
 8004b70:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        #endif
            if (ret == 0)
 8004b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <Hash_DRBG_Generate+0x88>
#endif
                ret = wc_Sha256Update(sha, &type, sizeof(type));
 8004b7c:	f107 011b 	add.w	r1, r7, #27
 8004b80:	f107 031c 	add.w	r3, r7, #28
 8004b84:	2201      	movs	r2, #1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f002 f9cb 	bl	8006f22 <wc_Sha256Update>
 8004b8c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret == 0)
 8004b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <Hash_DRBG_Generate+0xa4>
                ret = wc_Sha256Update(sha, drbg->V, sizeof(drbg->V));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1d19      	adds	r1, r3, #4
 8004b9c:	f107 031c 	add.w	r3, r7, #28
 8004ba0:	2237      	movs	r2, #55	; 0x37
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f002 f9bd 	bl	8006f22 <wc_Sha256Update>
 8004ba8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
            if (ret == 0)
 8004bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d108      	bne.n	8004bc6 <Hash_DRBG_Generate+0xbe>
                ret = wc_Sha256Final(sha, digest);
 8004bb4:	f107 031c 	add.w	r3, r7, #28
 8004bb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 fa53 	bl	8007068 <wc_Sha256Final>
 8004bc2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

#ifndef WOLFSSL_SMALL_STACK_CACHE
            wc_Sha256Free(sha);
 8004bc6:	f107 031c 	add.w	r3, r7, #28
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f002 fa88 	bl	80070e0 <wc_Sha256Free>
#endif

            if (ret == 0) {
 8004bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d121      	bne.n	8004c1c <Hash_DRBG_Generate+0x114>
                array_add(drbg->V, sizeof(drbg->V), digest, WC_SHA256_DIGEST_SIZE);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1d18      	adds	r0, r3, #4
 8004bdc:	2320      	movs	r3, #32
 8004bde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004be2:	2137      	movs	r1, #55	; 0x37
 8004be4:	f7ff ff37 	bl	8004a56 <array_add>
                array_add(drbg->V, sizeof(drbg->V), drbg->C, sizeof(drbg->C));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1d18      	adds	r0, r3, #4
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8004bf2:	2337      	movs	r3, #55	; 0x37
 8004bf4:	2137      	movs	r1, #55	; 0x37
 8004bf6:	f7ff ff2e 	bl	8004a56 <array_add>
            #ifdef LITTLE_ENDIAN_ORDER
                reseedCtr = ByteReverseWord32(reseedCtr);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fc78 	bl	80044f2 <ByteReverseWord32>
 8004c02:	4603      	mov	r3, r0
 8004c04:	617b      	str	r3, [r7, #20]
            #endif
                array_add(drbg->V, sizeof(drbg->V),
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1d18      	adds	r0, r3, #4
 8004c0a:	f107 0214 	add.w	r2, r7, #20
 8004c0e:	2304      	movs	r3, #4
 8004c10:	2137      	movs	r1, #55	; 0x37
 8004c12:	f7ff ff20 	bl	8004a56 <array_add>
                                          (byte*)&reseedCtr, sizeof(reseedCtr));
                ret = DRBG_SUCCESS;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            }
            drbg->reseedCtr++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	601a      	str	r2, [r3, #0]
        }
        ForceZero(digest, WC_SHA256_DIGEST_SIZE);
 8004c26:	2120      	movs	r1, #32
 8004c28:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004c2c:	f7ff fc78 	bl	8004520 <ForceZero>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(digest, drbg->heap, DYNAMIC_TYPE_DIGEST);
 8004c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <Hash_DRBG_Generate+0x140>
 8004c40:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004c44:	f7ff fc2e 	bl	80044a4 <wolfSSL_Free>
    #endif
    }

    return (ret == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 8004c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3798      	adds	r7, #152	; 0x98
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	000f4240 	.word	0x000f4240

08004c64 <Hash_DRBG_Instantiate>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Instantiate(DRBG_internal* drbg, const byte* seed, word32 seedSz,
                                             const byte* nonce, word32 nonceSz,
                                             void* heap, int devId)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af04      	add	r7, sp, #16
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
    int ret = DRBG_FAILURE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]

    XMEMSET(drbg, 0, sizeof(DRBG_internal));
 8004c76:	2278      	movs	r2, #120	; 0x78
 8004c78:	2100      	movs	r1, #0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f006 fe6e 	bl	800b95c <memset>
    drbg->heap = heap;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c84:	675a      	str	r2, [r3, #116]	; 0x74
    #endif
    if (ret != 0)
        return ret;
#endif

    if (Hash_df(drbg, drbg->V, sizeof(drbg->V), drbgInitV, seed, seedSz,
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	2237      	movs	r2, #55	; 0x37
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fc8e 	bl	80045c0 <Hash_df>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d118      	bne.n	8004cdc <Hash_DRBG_Instantiate+0x78>
                                              nonce, nonceSz) == DRBG_SUCCESS &&
        Hash_df(drbg, drbg->C, sizeof(drbg->C), drbgInitC, drbg->V,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	9203      	str	r2, [sp, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	9202      	str	r2, [sp, #8]
 8004cbc:	2237      	movs	r2, #55	; 0x37
 8004cbe:	9201      	str	r2, [sp, #4]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2237      	movs	r2, #55	; 0x37
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff fc7a 	bl	80045c0 <Hash_df>
 8004ccc:	4603      	mov	r3, r0
                                              nonce, nonceSz) == DRBG_SUCCESS &&
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <Hash_DRBG_Instantiate+0x78>
                                    sizeof(drbg->V), NULL, 0) == DRBG_SUCCESS) {

        drbg->reseedCtr = 1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
        ret = DRBG_SUCCESS;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
    }

    return ret;
 8004cdc:	697b      	ldr	r3, [r7, #20]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <Hash_DRBG_Uninstantiate>:

/* Returns: DRBG_SUCCESS or DRBG_FAILURE */
static int Hash_DRBG_Uninstantiate(DRBG_internal* drbg)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
    word32 i;
    int    compareSum = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
    byte*  compareDrbg = (byte*)drbg;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]

#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_Sha256Free(&drbg->sha256);
#endif

    ForceZero(drbg, sizeof(DRBG_internal));
 8004cf6:	2178      	movs	r1, #120	; 0x78
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fc11 	bl	8004520 <ForceZero>

    for (i = 0; i < sizeof(DRBG_internal); i++) {
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e00a      	b.n	8004d1a <Hash_DRBG_Uninstantiate+0x34>
        compareSum |= compareDrbg[i] ^ 0;
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	4413      	add	r3, r2
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    for (i = 0; i < sizeof(DRBG_internal); i++) {
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b77      	cmp	r3, #119	; 0x77
 8004d1e:	d9f1      	bls.n	8004d04 <Hash_DRBG_Uninstantiate+0x1e>
    }

    return (compareSum == 0) ? DRBG_SUCCESS : DRBG_FAILURE;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <wc_RNG_TestSeed>:


int wc_RNG_TestSeed(const byte* seed, word32 seedSz)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]

    /* Check the seed for duplicate words. */
    word32 seedIdx = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
    word32 scratchSz = min(SEED_BLOCK_SZ, seedSz - SEED_BLOCK_SZ);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	3b04      	subs	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	2004      	movs	r0, #4
 8004d4e:	f7ff fc27 	bl	80045a0 <min>
 8004d52:	60f8      	str	r0, [r7, #12]

    while (seedIdx < seedSz - SEED_BLOCK_SZ) {
 8004d54:	e01b      	b.n	8004d8e <wc_RNG_TestSeed+0x5a>
        if (ConstantCompare(seed + seedIdx,
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	18d0      	adds	r0, r2, r3
                            seed + seedIdx + scratchSz,
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
        if (ConstantCompare(seed + seedIdx,
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7ff fbf2 	bl	8004552 <ConstantCompare>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <wc_RNG_TestSeed+0x44>
                            (int)scratchSz) == 0) {

            ret = DRBG_CONT_FAILURE;
 8004d74:	2303      	movs	r3, #3
 8004d76:	617b      	str	r3, [r7, #20]
        }
        seedIdx += SEED_BLOCK_SZ;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	613b      	str	r3, [r7, #16]
        scratchSz = min(SEED_BLOCK_SZ, (seedSz - seedIdx));
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	2004      	movs	r0, #4
 8004d88:	f7ff fc0a 	bl	80045a0 <min>
 8004d8c:	60f8      	str	r0, [r7, #12]
    while (seedIdx < seedSz - SEED_BLOCK_SZ) {
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	3b04      	subs	r3, #4
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3de      	bcc.n	8004d56 <wc_RNG_TestSeed+0x22>
    }

    return ret;
 8004d98:	697b      	ldr	r3, [r7, #20]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_InitRng>:

#endif /* HAVE_ENTROPY_MEMUSE */

static int _InitRng(WC_RNG* rng, byte* nonce, word32 nonceSz,
                    void* heap, int devId)
{
 8004da2:	b590      	push	{r4, r7, lr}
 8004da4:	b08f      	sub	sp, #60	; 0x3c
 8004da6:	af04      	add	r7, sp, #16
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef HAVE_HASHDRBG
    word32 seedSz = SEED_SZ + SEED_BLOCK_SZ;
 8004db4:	2324      	movs	r3, #36	; 0x24
 8004db6:	623b      	str	r3, [r7, #32]
#endif

    (void)nonce;
    (void)nonceSz;

    if (rng == NULL)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <_InitRng+0x22>
        return BAD_FUNC_ARG;
 8004dbe:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004dc2:	e0a2      	b.n	8004f0a <_InitRng+0x168>
    if (nonce == NULL && nonceSz != 0)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <_InitRng+0x34>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <_InitRng+0x34>
        return BAD_FUNC_ARG;
 8004dd0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004dd4:	e099      	b.n	8004f0a <_InitRng+0x168>

#ifdef WOLFSSL_HEAP_TEST
    rng->heap = (void*)WOLFSSL_HEAP_TEST;
    (void)heap;
#else
    rng->heap = heap;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	605a      	str	r2, [r3, #4]
    (void)devId;
#endif

#ifdef HAVE_HASHDRBG
    /* init the DBRG to known values */
    rng->drbg = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
    rng->status = DRBG_NOT_INIT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	731a      	strb	r2, [r3, #12]

#ifdef CUSTOM_RAND_GENERATE_BLOCK
    ret = 0; /* success */
#else
#ifdef HAVE_HASHDRBG
    if (nonceSz == 0)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <_InitRng+0x50>
        seedSz = MAX_SEED_SZ;
 8004dee:	2334      	movs	r3, #52	; 0x34
 8004df0:	623b      	str	r3, [r7, #32]

    if (wc_RNG_HealthTestLocal(0) == 0) {
 8004df2:	2000      	movs	r0, #0
 8004df4:	f000 f9cc 	bl	8005190 <wc_RNG_HealthTestLocal>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d162      	bne.n	8004ec4 <_InitRng+0x122>
    #ifndef WOLFSSL_SMALL_STACK
        byte seed[MAX_SEED_SZ];
    #else
        byte* seed = (byte*)XMALLOC(MAX_SEED_SZ, rng->heap,
 8004dfe:	2034      	movs	r0, #52	; 0x34
 8004e00:	f7ff fb34 	bl	800446c <wolfSSL_Malloc>
 8004e04:	61f8      	str	r0, [r7, #28]
            DYNAMIC_TYPE_SEED);
        if (seed == NULL)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <_InitRng+0x70>
            return MEMORY_E;
 8004e0c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004e10:	e07b      	b.n	8004f0a <_InitRng+0x168>
    #endif

#if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
        rng->drbg =
                (struct DRBG*)XMALLOC(sizeof(DRBG_internal), rng->heap,
 8004e12:	2078      	movs	r0, #120	; 0x78
 8004e14:	f7ff fb2a 	bl	800446c <wolfSSL_Malloc>
 8004e18:	4602      	mov	r2, r0
        rng->drbg =
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	609a      	str	r2, [r3, #8]
                                                          DYNAMIC_TYPE_RNG);
        if (rng->drbg == NULL) {
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <_InitRng+0x90>
            ret = MEMORY_E;
 8004e26:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
            rng->status = DRBG_FAILED;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	731a      	strb	r2, [r3, #12]
        }
#else
        rng->drbg = (struct DRBG*)&rng->drbg_data;
#endif
        if (ret == 0) {
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d138      	bne.n	8004eaa <_InitRng+0x108>
                if (ret != 0) {
                    ret = DRBG_FAILURE;
                }
            }
#else
            ret = wc_GenerateSeed(&rng->seed, seed, seedSz);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	69f9      	ldr	r1, [r7, #28]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fa3a 	bl	80052b8 <wc_GenerateSeed>
 8004e44:	6278      	str	r0, [r7, #36]	; 0x24
#endif
            if (ret == 0)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <_InitRng+0xb6>
                ret = wc_RNG_TestSeed(seed, seedSz);
 8004e4c:	6a39      	ldr	r1, [r7, #32]
 8004e4e:	69f8      	ldr	r0, [r7, #28]
 8004e50:	f7ff ff70 	bl	8004d34 <wc_RNG_TestSeed>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24
 8004e56:	e004      	b.n	8004e62 <_InitRng+0xc0>
            else {
                ret = DRBG_FAILURE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
                rng->status = DRBG_FAILED;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	731a      	strb	r2, [r3, #12]
            }

            if (ret == DRBG_SUCCESS)
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d111      	bne.n	8004e8c <_InitRng+0xea>
                ret = Hash_DRBG_Instantiate((DRBG_internal *)rng->drbg,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6898      	ldr	r0, [r3, #8]
                            seed + SEED_BLOCK_SZ, seedSz - SEED_BLOCK_SZ,
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1d19      	adds	r1, r3, #4
                ret = Hash_DRBG_Instantiate((DRBG_internal *)rng->drbg,
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	1f1c      	subs	r4, r3, #4
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e7a:	9202      	str	r2, [sp, #8]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4622      	mov	r2, r4
 8004e86:	f7ff feed 	bl	8004c64 <Hash_DRBG_Instantiate>
 8004e8a:	6278      	str	r0, [r7, #36]	; 0x24
                            nonce, nonceSz, rng->heap, devId);

            if (ret != DRBG_SUCCESS) {
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <_InitRng+0x108>
            #if !defined(WOLFSSL_NO_MALLOC) || defined(WOLFSSL_STATIC_MEMORY)
                XFREE(rng->drbg, rng->heap, DYNAMIC_TYPE_RNG);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <_InitRng+0x102>
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f7ff fb00 	bl	80044a4 <wolfSSL_Free>
            #endif
                rng->drbg = NULL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
            }
        }

        ForceZero(seed, seedSz);
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	69f8      	ldr	r0, [r7, #28]
 8004eae:	f7ff fb37 	bl	8004520 <ForceZero>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(seed, rng->heap, DYNAMIC_TYPE_SEED);
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <_InitRng+0x126>
 8004ebc:	6978      	ldr	r0, [r7, #20]
 8004ebe:	f7ff faf1 	bl	80044a4 <wolfSSL_Free>
 8004ec2:	e001      	b.n	8004ec8 <_InitRng+0x126>
    #endif
    }
    else {
        ret = DRBG_CONT_FAILURE;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (ret == DRBG_SUCCESS) {
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <_InitRng+0x138>
        wc_MemZero_Add("DRBG V", &drbg->V, sizeof(drbg->V));
        wc_MemZero_Add("DRBG C", &drbg->C, sizeof(drbg->C));
#endif
#endif

        rng->status = DRBG_OK;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	731a      	strb	r2, [r3, #12]
        ret = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	e016      	b.n	8004f08 <_InitRng+0x166>
    }
    else if (ret == DRBG_CONT_FAILURE) {
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d106      	bne.n	8004eee <_InitRng+0x14c>
        rng->status = DRBG_CONT_FAILED;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	731a      	strb	r2, [r3, #12]
        ret = DRBG_CONT_FIPS_E;
 8004ee6:	f06f 03d0 	mvn.w	r3, #208	; 0xd0
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
 8004eec:	e00c      	b.n	8004f08 <_InitRng+0x166>
    }
    else if (ret == DRBG_FAILURE) {
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d106      	bne.n	8004f02 <_InitRng+0x160>
        rng->status = DRBG_FAILED;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	731a      	strb	r2, [r3, #12]
        ret = RNG_FAILURE_E;
 8004efa:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
 8004f00:	e002      	b.n	8004f08 <_InitRng+0x166>
    }
    else {
        rng->status = DRBG_FAILED;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2202      	movs	r2, #2
 8004f06:	731a      	strb	r2, [r3, #12]
    }
#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	372c      	adds	r7, #44	; 0x2c
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd90      	pop	{r4, r7, pc}

08004f12 <wc_InitRng>:
    }
}

WOLFSSL_ABI
int wc_InitRng(WC_RNG* rng)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af02      	add	r7, sp, #8
 8004f18:	6078      	str	r0, [r7, #4]
    return _InitRng(rng, NULL, 0, NULL, INVALID_DEVID);
 8004f1a:	f06f 0301 	mvn.w	r3, #1
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff3b 	bl	8004da2 <_InitRng>
 8004f2c:	4603      	mov	r3, r0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <wc_RNG_GenerateBlock>:


/* place a generated block in output */
WOLFSSL_ABI
int wc_RNG_GenerateBlock(WC_RNG* rng, byte* output, word32 sz)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b088      	sub	sp, #32
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
    int ret;

    if (rng == NULL || output == NULL)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <wc_RNG_GenerateBlock+0x18>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <wc_RNG_GenerateBlock+0x1e>
        return BAD_FUNC_ARG;
 8004f4e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004f52:	e083      	b.n	800505c <wc_RNG_GenerateBlock+0x126>

    if (sz == 0)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <wc_RNG_GenerateBlock+0x28>
        return 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e07e      	b.n	800505c <wc_RNG_GenerateBlock+0x126>
    XMEMSET(output, 0, sz);
    ret = (int)CUSTOM_RAND_GENERATE_BLOCK(output, sz);
#else

#ifdef HAVE_HASHDRBG
    if (sz > RNG_MAX_BLOCK_LEN)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d902      	bls.n	8004f6c <wc_RNG_GenerateBlock+0x36>
        return BAD_FUNC_ARG;
 8004f66:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8004f6a:	e077      	b.n	800505c <wc_RNG_GenerateBlock+0x126>

    if (rng->status != DRBG_OK)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	7b1b      	ldrb	r3, [r3, #12]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d002      	beq.n	8004f7a <wc_RNG_GenerateBlock+0x44>
        return RNG_FAILURE_E;
 8004f74:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 8004f78:	e070      	b.n	800505c <wc_RNG_GenerateBlock+0x126>

    ret = Hash_DRBG_Generate((DRBG_internal *)rng->drbg, output, sz);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fdc0 	bl	8004b08 <Hash_DRBG_Generate>
 8004f88:	61f8      	str	r0, [r7, #28]
    if (ret == DRBG_NEED_RESEED) {
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d14e      	bne.n	800502e <wc_RNG_GenerateBlock+0xf8>
        if (wc_RNG_HealthTestLocal(1) == 0) {
 8004f90:	2001      	movs	r0, #1
 8004f92:	f000 f8fd 	bl	8005190 <wc_RNG_HealthTestLocal>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d146      	bne.n	800502a <wc_RNG_GenerateBlock+0xf4>
        #ifndef WOLFSSL_SMALL_STACK
            byte newSeed[SEED_SZ + SEED_BLOCK_SZ];
            ret = DRBG_SUCCESS;
        #else
            byte* newSeed = (byte*)XMALLOC(SEED_SZ + SEED_BLOCK_SZ, rng->heap,
 8004f9c:	2024      	movs	r0, #36	; 0x24
 8004f9e:	f7ff fa65 	bl	800446c <wolfSSL_Malloc>
 8004fa2:	61b8      	str	r0, [r7, #24]
                DYNAMIC_TYPE_SEED);
            ret = (newSeed == NULL) ? MEMORY_E : DRBG_SUCCESS;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <wc_RNG_GenerateBlock+0x7a>
 8004faa:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8004fae:	e000      	b.n	8004fb2 <wc_RNG_GenerateBlock+0x7c>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
        #endif
            if (ret == DRBG_SUCCESS) {
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <wc_RNG_GenerateBlock+0x9c>
                    if (ret != 0) {
                        ret = DRBG_FAILURE;
                    }
                }
            #else
                ret = wc_GenerateSeed(&rng->seed, newSeed,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2224      	movs	r2, #36	; 0x24
 8004fbe:	69b9      	ldr	r1, [r7, #24]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f979 	bl	80052b8 <wc_GenerateSeed>
 8004fc6:	61f8      	str	r0, [r7, #28]
                                  SEED_SZ + SEED_BLOCK_SZ);
            #endif
                if (ret != 0)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <wc_RNG_GenerateBlock+0x9c>
                    ret = DRBG_FAILURE;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61fb      	str	r3, [r7, #28]
            }
            if (ret == DRBG_SUCCESS)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <wc_RNG_GenerateBlock+0xac>
                ret = wc_RNG_TestSeed(newSeed, SEED_SZ + SEED_BLOCK_SZ);
 8004fd8:	2124      	movs	r1, #36	; 0x24
 8004fda:	69b8      	ldr	r0, [r7, #24]
 8004fdc:	f7ff feaa 	bl	8004d34 <wc_RNG_TestSeed>
 8004fe0:	61f8      	str	r0, [r7, #28]

            if (ret == DRBG_SUCCESS)
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d108      	bne.n	8004ffa <wc_RNG_GenerateBlock+0xc4>
                ret = Hash_DRBG_Reseed((DRBG_internal *)rng->drbg,
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6898      	ldr	r0, [r3, #8]
                                       newSeed + SEED_BLOCK_SZ, SEED_SZ);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	3304      	adds	r3, #4
                ret = Hash_DRBG_Reseed((DRBG_internal *)rng->drbg,
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f7ff fbd4 	bl	80047a0 <Hash_DRBG_Reseed>
 8004ff8:	61f8      	str	r0, [r7, #28]
            if (ret == DRBG_SUCCESS)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <wc_RNG_GenerateBlock+0xda>
                ret = Hash_DRBG_Generate((DRBG_internal *)rng->drbg, output, sz);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fd7d 	bl	8004b08 <Hash_DRBG_Generate>
 800500e:	61f8      	str	r0, [r7, #28]

            ForceZero(newSeed, sizeof(newSeed));
 8005010:	2104      	movs	r1, #4
 8005012:	69b8      	ldr	r0, [r7, #24]
 8005014:	f7ff fa84 	bl	8004520 <ForceZero>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(newSeed, rng->heap, DYNAMIC_TYPE_SEED);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <wc_RNG_GenerateBlock+0xf8>
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7ff fa3e 	bl	80044a4 <wolfSSL_Free>
 8005028:	e001      	b.n	800502e <wc_RNG_GenerateBlock+0xf8>
        #endif
        }
        else {
            ret = DRBG_CONT_FAILURE;
 800502a:	2303      	movs	r3, #3
 800502c:	61fb      	str	r3, [r7, #28]
        }
    }

    if (ret == DRBG_SUCCESS) {
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <wc_RNG_GenerateBlock+0x104>
        ret = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e00f      	b.n	800505a <wc_RNG_GenerateBlock+0x124>
    }
    else if (ret == DRBG_CONT_FAILURE) {
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d106      	bne.n	800504e <wc_RNG_GenerateBlock+0x118>
        ret = DRBG_CONT_FIPS_E;
 8005040:	f06f 03d0 	mvn.w	r3, #208	; 0xd0
 8005044:	61fb      	str	r3, [r7, #28]
        rng->status = DRBG_CONT_FAILED;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2203      	movs	r2, #3
 800504a:	731a      	strb	r2, [r3, #12]
 800504c:	e005      	b.n	800505a <wc_RNG_GenerateBlock+0x124>
    }
    else {
        ret = RNG_FAILURE_E;
 800504e:	f06f 03c6 	mvn.w	r3, #198	; 0xc6
 8005052:	61fb      	str	r3, [r7, #28]
        rng->status = DRBG_FAILED;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2202      	movs	r2, #2
 8005058:	731a      	strb	r2, [r3, #12]
    ret = RNG_FAILURE_E;

#endif /* HAVE_HASHDRBG */
#endif /* CUSTOM_RAND_GENERATE_BLOCK */

    return ret;
 800505a:	69fb      	ldr	r3, [r7, #28]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <wc_RNG_HealthTest>:

#ifdef HAVE_HASHDRBG
int wc_RNG_HealthTest(int reseed, const byte* seedA, word32 seedASz,
                                  const byte* seedB, word32 seedBSz,
                                  byte* output, word32 outputSz)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af08      	add	r7, sp, #32
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
    return wc_RNG_HealthTest_ex(reseed, NULL, 0,
 8005072:	f06f 0301 	mvn.w	r3, #1
 8005076:	9306      	str	r3, [sp, #24]
 8005078:	2300      	movs	r3, #0
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	9304      	str	r3, [sp, #16]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	9302      	str	r3, [sp, #8]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f805 	bl	80050a6 <wc_RNG_HealthTest_ex>
 800509c:	4603      	mov	r3, r0
                                seedA, seedASz, seedB, seedBSz,
                                output, outputSz,
                                NULL, INVALID_DEVID);
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <wc_RNG_HealthTest_ex>:
int wc_RNG_HealthTest_ex(int reseed, const byte* nonce, word32 nonceSz,
                                  const byte* seedA, word32 seedASz,
                                  const byte* seedB, word32 seedBSz,
                                  byte* output, word32 outputSz,
                                  void* heap, int devId)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b08c      	sub	sp, #48	; 0x30
 80050aa:	af04      	add	r7, sp, #16
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
    int ret = -1;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295
 80050b8:	61fb      	str	r3, [r7, #28]
    DRBG_internal* drbg;
#ifndef WOLFSSL_SMALL_STACK
    DRBG_internal  drbg_var;
#endif

    if (seedA == NULL || output == NULL) {
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <wc_RNG_HealthTest_ex+0x20>
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <wc_RNG_HealthTest_ex+0x26>
        return BAD_FUNC_ARG;
 80050c6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80050ca:	e05d      	b.n	8005188 <wc_RNG_HealthTest_ex+0xe2>
    }

    if (reseed != 0 && seedB == NULL) {
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <wc_RNG_HealthTest_ex+0x38>
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <wc_RNG_HealthTest_ex+0x38>
        return BAD_FUNC_ARG;
 80050d8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80050dc:	e054      	b.n	8005188 <wc_RNG_HealthTest_ex+0xe2>
    }

    if (outputSz != RNG_HEALTH_TEST_CHECK_SIZE) {
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d001      	beq.n	80050e8 <wc_RNG_HealthTest_ex+0x42>
        return ret;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	e04f      	b.n	8005188 <wc_RNG_HealthTest_ex+0xe2>
    }

#ifdef WOLFSSL_SMALL_STACK
    drbg = (DRBG_internal*)XMALLOC(sizeof(DRBG_internal), heap,
 80050e8:	2078      	movs	r0, #120	; 0x78
 80050ea:	f7ff f9bf 	bl	800446c <wolfSSL_Malloc>
 80050ee:	61b8      	str	r0, [r7, #24]
        DYNAMIC_TYPE_RNG);
    if (drbg == NULL) {
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <wc_RNG_HealthTest_ex+0x56>
        return MEMORY_E;
 80050f6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80050fa:	e045      	b.n	8005188 <wc_RNG_HealthTest_ex+0xe2>
    }
#else
    drbg = &drbg_var;
#endif

    if (Hash_DRBG_Instantiate(drbg, seedA, seedASz, nonce, nonceSz,
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	9302      	str	r3, [sp, #8]
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	69b8      	ldr	r0, [r7, #24]
 8005110:	f7ff fda8 	bl	8004c64 <Hash_DRBG_Instantiate>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11d      	bne.n	8005156 <wc_RNG_HealthTest_ex+0xb0>
                              heap, devId) != 0) {
        goto exit_rng_ht;
    }

    if (reseed) {
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <wc_RNG_HealthTest_ex+0x8a>
        if (Hash_DRBG_Reseed(drbg, seedB, seedBSz) != 0) {
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005124:	69b8      	ldr	r0, [r7, #24]
 8005126:	f7ff fb3b 	bl	80047a0 <Hash_DRBG_Reseed>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d114      	bne.n	800515a <wc_RNG_HealthTest_ex+0xb4>
    /* This call to generate is prescribed by the NIST DRBGVS
     * procedure. The results are thrown away. The known
     * answer test checks the second block of DRBG out of
     * the generator to ensure the internal state is updated
     * as expected. */
    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
 8005130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005134:	69b8      	ldr	r0, [r7, #24]
 8005136:	f7ff fce7 	bl	8004b08 <Hash_DRBG_Generate>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10e      	bne.n	800515e <wc_RNG_HealthTest_ex+0xb8>
        goto exit_rng_ht;
    }

    if (Hash_DRBG_Generate(drbg, output, outputSz) != 0) {
 8005140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005144:	69b8      	ldr	r0, [r7, #24]
 8005146:	f7ff fcdf 	bl	8004b08 <Hash_DRBG_Generate>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d108      	bne.n	8005162 <wc_RNG_HealthTest_ex+0xbc>
        goto exit_rng_ht;
    }

    /* Mark success */
    ret = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e006      	b.n	8005164 <wc_RNG_HealthTest_ex+0xbe>
        goto exit_rng_ht;
 8005156:	bf00      	nop
 8005158:	e004      	b.n	8005164 <wc_RNG_HealthTest_ex+0xbe>
            goto exit_rng_ht;
 800515a:	bf00      	nop
 800515c:	e002      	b.n	8005164 <wc_RNG_HealthTest_ex+0xbe>
        goto exit_rng_ht;
 800515e:	bf00      	nop
 8005160:	e000      	b.n	8005164 <wc_RNG_HealthTest_ex+0xbe>
        goto exit_rng_ht;
 8005162:	bf00      	nop

exit_rng_ht:

    /* This is safe to call even if Hash_DRBG_Instantiate fails */
    if (Hash_DRBG_Uninstantiate(drbg) != 0) {
 8005164:	69b8      	ldr	r0, [r7, #24]
 8005166:	f7ff fdbe 	bl	8004ce6 <Hash_DRBG_Uninstantiate>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <wc_RNG_HealthTest_ex+0xd0>
        ret = -1;
 8005170:	f04f 33ff 	mov.w	r3, #4294967295
 8005174:	61fb      	str	r3, [r7, #28]
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(drbg, heap, DYNAMIC_TYPE_RNG);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <wc_RNG_HealthTest_ex+0xe0>
 8005180:	6978      	ldr	r0, [r7, #20]
 8005182:	f7ff f98f 	bl	80044a4 <wolfSSL_Free>
#endif

    return ret;
 8005186:	69fb      	ldr	r3, [r7, #28]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <wc_RNG_HealthTestLocal>:
    0xd4, 0x31, 0xf4, 0xc9, 0xf7, 0x04, 0x27, 0xdf
};


static int wc_RNG_HealthTestLocal(int reseed)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b092      	sub	sp, #72	; 0x48
 8005194:	af08      	add	r7, sp, #32
 8005196:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
#else
    byte  check[RNG_HEALTH_TEST_CHECK_SIZE];
#endif

#ifdef WOLFSSL_SMALL_STACK
    check = (byte*)XMALLOC(RNG_HEALTH_TEST_CHECK_SIZE, NULL,
 800519c:	2080      	movs	r0, #128	; 0x80
 800519e:	f7ff f965 	bl	800446c <wolfSSL_Malloc>
 80051a2:	6238      	str	r0, [r7, #32]
                           DYNAMIC_TYPE_TMP_BUFFER);
    if (check == NULL) {
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <wc_RNG_HealthTestLocal+0x20>
        return MEMORY_E;
 80051aa:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80051ae:	e075      	b.n	800529c <wc_RNG_HealthTestLocal+0x10c>
    }
#endif

    if (reseed) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d021      	beq.n	80051fa <wc_RNG_HealthTestLocal+0x6a>
        else {
            XMEMCPY_P(seedA, seedA_data, sizeof(seedA_data));
            XMEMCPY_P(reseedSeedA, reseedSeedA_data, sizeof(reseedSeedA_data));
            XMEMCPY_P(outputA, outputA_data, sizeof(outputA_data));
#else
        const byte* seedA = seedA_data;
 80051b6:	4b3b      	ldr	r3, [pc, #236]	; (80052a4 <wc_RNG_HealthTestLocal+0x114>)
 80051b8:	617b      	str	r3, [r7, #20]
        const byte* reseedSeedA = reseedSeedA_data;
 80051ba:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <wc_RNG_HealthTestLocal+0x118>)
 80051bc:	613b      	str	r3, [r7, #16]
        const byte* outputA = outputA_data;
 80051be:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <wc_RNG_HealthTestLocal+0x11c>)
 80051c0:	60fb      	str	r3, [r7, #12]
#endif
        ret = wc_RNG_HealthTest(1, seedA, sizeof(seedA_data),
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	2320      	movs	r3, #32
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2230      	movs	r2, #48	; 0x30
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	2001      	movs	r0, #1
 80051d6:	f7ff ff45 	bl	8005064 <wc_RNG_HealthTest>
 80051da:	6278      	str	r0, [r7, #36]	; 0x24
                                reseedSeedA, sizeof(reseedSeedA_data),
                                check, RNG_HEALTH_TEST_CHECK_SIZE);
        if (ret == 0) {
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d153      	bne.n	800528a <wc_RNG_HealthTestLocal+0xfa>
            if (ConstantCompare(check, outputA,
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	6a38      	ldr	r0, [r7, #32]
 80051e8:	f7ff f9b3 	bl	8004552 <ConstantCompare>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04b      	beq.n	800528a <wc_RNG_HealthTestLocal+0xfa>
                                RNG_HEALTH_TEST_CHECK_SIZE) != 0)
                ret = -1;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
 80051f8:	e047      	b.n	800528a <wc_RNG_HealthTestLocal+0xfa>
        }
        else {
            XMEMCPY_P(seedB, seedB_data, sizeof(seedB_data));
            XMEMCPY_P(outputB, outputB_data, sizeof(outputB_data));
#else
        const byte* seedB = seedB_data;
 80051fa:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <wc_RNG_HealthTestLocal+0x120>)
 80051fc:	61fb      	str	r3, [r7, #28]
        const byte* outputB = outputB_data;
 80051fe:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <wc_RNG_HealthTestLocal+0x124>)
 8005200:	61bb      	str	r3, [r7, #24]
#endif
        ret = wc_RNG_HealthTest(0, seedB, sizeof(seedB_data),
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	9302      	str	r3, [sp, #8]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	2300      	movs	r3, #0
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	2300      	movs	r3, #0
 8005210:	2230      	movs	r2, #48	; 0x30
 8005212:	69f9      	ldr	r1, [r7, #28]
 8005214:	2000      	movs	r0, #0
 8005216:	f7ff ff25 	bl	8005064 <wc_RNG_HealthTest>
 800521a:	6278      	str	r0, [r7, #36]	; 0x24
                                NULL, 0,
                                check, RNG_HEALTH_TEST_CHECK_SIZE);
        if (ret == 0) {
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <wc_RNG_HealthTestLocal+0xa8>
            if (ConstantCompare(check, outputB,
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	6a38      	ldr	r0, [r7, #32]
 8005228:	f7ff f993 	bl	8004552 <ConstantCompare>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <wc_RNG_HealthTestLocal+0xa8>
                                RNG_HEALTH_TEST_CHECK_SIZE) != 0)
                ret = -1;
 8005232:	f04f 33ff 	mov.w	r3, #4294967295
 8005236:	627b      	str	r3, [r7, #36]	; 0x24

        /* The previous test cases use a large seed instead of a seed and nonce.
         * seedB is actually from a test case with a seed and nonce, and
         * just concatenates them. The pivot point between seed and nonce is
         * byte 32, feed them into the health test separately. */
        if (ret == 0) {
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d125      	bne.n	800528a <wc_RNG_HealthTestLocal+0xfa>
            ret = wc_RNG_HealthTest_ex(0,
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f103 0120 	add.w	r1, r3, #32
 8005244:	f06f 0301 	mvn.w	r3, #1
 8005248:	9306      	str	r3, [sp, #24]
 800524a:	2300      	movs	r3, #0
 800524c:	9305      	str	r3, [sp, #20]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	9303      	str	r3, [sp, #12]
 8005256:	2300      	movs	r3, #0
 8005258:	9302      	str	r3, [sp, #8]
 800525a:	2300      	movs	r3, #0
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	2320      	movs	r3, #32
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2210      	movs	r2, #16
 8005266:	2000      	movs	r0, #0
 8005268:	f7ff ff1d 	bl	80050a6 <wc_RNG_HealthTest_ex>
 800526c:	6278      	str	r0, [r7, #36]	; 0x24
                                    seedB + 32, sizeof(seedB_data) - 32,
                                    seedB, 32,
                                    NULL, 0,
                                    check, RNG_HEALTH_TEST_CHECK_SIZE,
                                    NULL, INVALID_DEVID);
            if (ret == 0) {
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <wc_RNG_HealthTestLocal+0xfa>
                if (ConstantCompare(check, outputB, sizeof(outputB_data)) != 0)
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	6a38      	ldr	r0, [r7, #32]
 800527a:	f7ff f96a 	bl	8004552 <ConstantCompare>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <wc_RNG_HealthTestLocal+0xfa>
                    ret = -1;
 8005284:	f04f 33ff 	mov.w	r3, #4294967295
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(check, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <wc_RNG_HealthTestLocal+0x10a>
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f7ff f905 	bl	80044a4 <wolfSSL_Free>
#endif

    return ret;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800529c:	4618      	mov	r0, r3
 800529e:	3728      	adds	r7, #40	; 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	0800c978 	.word	0x0800c978
 80052a8:	0800c9a8 	.word	0x0800c9a8
 80052ac:	0800c9c8 	.word	0x0800c9c8
 80052b0:	0800ca48 	.word	0x0800ca48
 80052b4:	0800ca78 	.word	0x0800ca78

080052b8 <wc_GenerateSeed>:
     /* Generate a RNG seed using the hardware random number generator
      * on the STM32F2/F4/F7/L4. */

    #ifdef WOLFSSL_STM32_CUBEMX
    int wc_GenerateSeed(OS_Seed* os, byte* output, word32 sz)
    {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08c      	sub	sp, #48	; 0x30
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
        int ret;
        RNG_HandleTypeDef hrng;
        word32 i = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        (void)os;

        ret = wolfSSL_CryptHwMutexLock();
 80052c8:	f005 fd3c 	bl	800ad44 <wolfSSL_CryptHwMutexLock>
 80052cc:	62b8      	str	r0, [r7, #40]	; 0x28
        if (ret != 0) {
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <wc_GenerateSeed+0x20>
            return ret;
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	e061      	b.n	800539c <wc_GenerateSeed+0xe4>
        }

        /* enable RNG clock source */
        __HAL_RCC_RNG_CLK_ENABLE();
 80052d8:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <wc_GenerateSeed+0xec>)
 80052da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052dc:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <wc_GenerateSeed+0xec>)
 80052de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052e4:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <wc_GenerateSeed+0xec>)
 80052e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	697b      	ldr	r3, [r7, #20]

        /* enable RNG peripheral */
        XMEMSET(&hrng, 0, sizeof(hrng));
 80052f0:	f107 0318 	add.w	r3, r7, #24
 80052f4:	2210      	movs	r2, #16
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f006 fb2f 	bl	800b95c <memset>
        hrng.Instance = RNG;
 80052fe:	4b2a      	ldr	r3, [pc, #168]	; (80053a8 <wc_GenerateSeed+0xf0>)
 8005300:	61bb      	str	r3, [r7, #24]
        HAL_RNG_Init(&hrng);
 8005302:	f107 0318 	add.w	r3, r7, #24
 8005306:	4618      	mov	r0, r3
 8005308:	f7fd fae8 	bl	80028dc <HAL_RNG_Init>

        while (i < sz) {
 800530c:	e03a      	b.n	8005384 <wc_GenerateSeed+0xcc>
            /* If not aligned or there is odd/remainder */
            if( (i + sizeof(word32)) > sz ||
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	3304      	adds	r3, #4
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d306      	bcc.n	8005326 <wc_GenerateSeed+0x6e>
                ((wc_ptr_t)&output[i] % sizeof(word32)) != 0
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	4413      	add	r3, r2
 800531e:	f003 0303 	and.w	r3, r3, #3
            if( (i + sizeof(word32)) > sz ||
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01a      	beq.n	800535c <wc_GenerateSeed+0xa4>
            ) {
                /* Single byte at a time */
                uint32_t tmpRng = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
                if (HAL_RNG_GenerateRandomNumber(&hrng, &tmpRng) != HAL_OK) {
 800532a:	f107 0210 	add.w	r2, r7, #16
 800532e:	f107 0318 	add.w	r3, r7, #24
 8005332:	4611      	mov	r1, r2
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd fb52 	bl	80029de <HAL_RNG_GenerateRandomNumber>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <wc_GenerateSeed+0x92>
                    wolfSSL_CryptHwMutexUnLock();
 8005340:	f005 fd18 	bl	800ad74 <wolfSSL_CryptHwMutexUnLock>
                    return RAN_BLOCK_E;
 8005344:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8005348:	e028      	b.n	800539c <wc_GenerateSeed+0xe4>
                }
                output[i++] = (byte)tmpRng;
 800534a:	6939      	ldr	r1, [r7, #16]
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4413      	add	r3, r2
 8005356:	b2ca      	uxtb	r2, r1
 8005358:	701a      	strb	r2, [r3, #0]
            ) {
 800535a:	e013      	b.n	8005384 <wc_GenerateSeed+0xcc>
            }
            else {
                /* Use native 32 instruction */
                if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t*)&output[i]) != HAL_OK) {
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	441a      	add	r2, r3
 8005362:	f107 0318 	add.w	r3, r7, #24
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd fb38 	bl	80029de <HAL_RNG_GenerateRandomNumber>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <wc_GenerateSeed+0xc6>
                    wolfSSL_CryptHwMutexUnLock();
 8005374:	f005 fcfe 	bl	800ad74 <wolfSSL_CryptHwMutexUnLock>
                    return RAN_BLOCK_E;
 8005378:	f06f 0368 	mvn.w	r3, #104	; 0x68
 800537c:	e00e      	b.n	800539c <wc_GenerateSeed+0xe4>
                }
                i += sizeof(word32);
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	3304      	adds	r3, #4
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (i < sz) {
 8005384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d3c0      	bcc.n	800530e <wc_GenerateSeed+0x56>
            }
        }

        HAL_RNG_DeInit(&hrng);
 800538c:	f107 0318 	add.w	r3, r7, #24
 8005390:	4618      	mov	r0, r3
 8005392:	f7fd fafa 	bl	800298a <HAL_RNG_DeInit>

        wolfSSL_CryptHwMutexUnLock();
 8005396:	f005 fced 	bl	800ad74 <wolfSSL_CryptHwMutexUnLock>

        return 0;
 800539a:	2300      	movs	r3, #0
    }
 800539c:	4618      	mov	r0, r3
 800539e:	3730      	adds	r7, #48	; 0x30
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40021000 	.word	0x40021000
 80053a8:	50060800 	.word	0x50060800

080053ac <XorWords>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
    for (i = 0; i < n; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e010      	b.n	80053e0 <XorWords+0x34>
        *((*r)++) ^= *((*a)++);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	1d19      	adds	r1, r3, #4
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	6011      	str	r1, [r2, #0]
 80053c8:	6819      	ldr	r1, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1d18      	adds	r0, r3, #4
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	6010      	str	r0, [r2, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	404a      	eors	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < n; i++)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3301      	adds	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d3ea      	bcc.n	80053be <XorWords+0x12>
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <xorbuf>:
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b088      	sub	sp, #32
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
    b = (byte*)buf;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	61bb      	str	r3, [r7, #24]
    m = (const byte*)mask;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	617b      	str	r3, [r7, #20]
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	461a      	mov	r2, r3
            ((wc_ptr_t)m) % WOLFSSL_WORD_SIZE) {
 800540e:	697b      	ldr	r3, [r7, #20]
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8005410:	4053      	eors	r3, r2
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d123      	bne.n	8005462 <xorbuf+0x6c>
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 800541a:	e00d      	b.n	8005438 <xorbuf+0x42>
            *(b++) ^= *(m++);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	617a      	str	r2, [r7, #20]
 8005422:	7819      	ldrb	r1, [r3, #0]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	61ba      	str	r2, [r7, #24]
 800542a:	781a      	ldrb	r2, [r3, #0]
 800542c:	404a      	eors	r2, r1
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
            count--;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3b01      	subs	r3, #1
 8005436:	607b      	str	r3, [r7, #4]
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <xorbuf+0x52>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e9      	bne.n	800541c <xorbuf+0x26>
        XorWords( (wolfssl_word**)&b,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	089a      	lsrs	r2, r3, #2
 800544c:	f107 0114 	add.w	r1, r7, #20
 8005450:	f107 0318 	add.w	r3, r7, #24
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff ffa9 	bl	80053ac <XorWords>
        count %= WOLFSSL_WORD_SIZE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	607b      	str	r3, [r7, #4]
    for (i = 0; i < count; i++)
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	e010      	b.n	800548a <xorbuf+0x94>
        b[i] ^= m[i];
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	7819      	ldrb	r1, [r3, #0]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	69b8      	ldr	r0, [r7, #24]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4403      	add	r3, r0
 800547e:	404a      	eors	r2, r1
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	3301      	adds	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d3ea      	bcc.n	8005468 <xorbuf+0x72>
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <ForceZero>:
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 80054aa:	e004      	b.n	80054b6 <ForceZero+0x1a>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	60fa      	str	r2, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	603a      	str	r2, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f5      	bne.n	80054ac <ForceZero+0x10>
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <wc_RsaCleanup>:
    RSA_STATE_DECRYPT_RES
};


static void wc_RsaCleanup(RsaKey* key)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
#if !defined(WOLFSSL_RSA_VERIFY_INLINE) && !defined(WOLFSSL_NO_MALLOC)
    if (key && key->data) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d049      	beq.n	8005570 <wc_RsaCleanup+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d042      	beq.n	8005570 <wc_RsaCleanup+0xa2>
        /* make sure any allocated memory is free'd */
        if (key->dataIsAlloc) {
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f0:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02d      	beq.n	8005554 <wc_RsaCleanup+0x86>
        #ifndef WOLFSSL_RSA_PUBLIC_ONLY
            if (key->type == RSA_PRIVATE_DECRYPT ||
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005502:	2b03      	cmp	r3, #3
 8005504:	d006      	beq.n	8005514 <wc_RsaCleanup+0x46>
                key->type == RSA_PRIVATE_ENCRYPT) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
            if (key->type == RSA_PRIVATE_DECRYPT ||
 8005510:	2b02      	cmp	r3, #2
 8005512:	d10d      	bne.n	8005530 <wc_RsaCleanup+0x62>
                ForceZero(key->data, key->dataLen);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005524:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7ff ffb6 	bl	800549c <ForceZero>
            }
        #endif
            XFREE(key->data, key->heap, DYNAMIC_TYPE_WOLF_BIGINT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005536:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <wc_RsaCleanup+0x7a>
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7fe ffae 	bl	80044a4 <wolfSSL_Free>
            key->dataIsAlloc = 0;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        }
        key->data = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
        key->dataLen = 0;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005568:	461a      	mov	r2, r3
 800556a:	2300      	movs	r3, #0
 800556c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
    }
#else
    (void)key;
#endif
}
 8005570:	bf00      	nop
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <wc_InitRsaKey_ex>:

int wc_InitRsaKey_ex(RsaKey* key, void* heap, int devId)
{
 8005578:	b5b0      	push	{r4, r5, r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
    int ret      = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
#if defined(HAVE_PKCS11)
    int isPkcs11 = 0;
#endif

    if (key == NULL) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <wc_InitRsaKey_ex+0x1c>
        return BAD_FUNC_ARG;
 800558e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8005592:	e071      	b.n	8005678 <wc_InitRsaKey_ex+0x100>
    if (key->isPkcs11) {
        isPkcs11 = 1;
    }
#endif

    XMEMSET(key, 0, sizeof(RsaKey));
 8005594:	f241 125c 	movw	r2, #4444	; 0x115c
 8005598:	2100      	movs	r1, #0
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f006 f9de 	bl	800b95c <memset>

    key->type = RSA_TYPE_UNKNOWN;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a6:	461a      	mov	r2, r3
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ac:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    key->state = RSA_STATE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b6:	461a      	mov	r2, r3
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
    key->heap = heap;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
#if !defined(WOLFSSL_RSA_VERIFY_INLINE) && !defined(WOLFSSL_NO_MALLOC)
    key->dataIsAlloc = 0;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    key->data = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
#endif
    key->dataLen = 0;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ec:	461a      	mov	r2, r3
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
#ifdef WC_RSA_BLINDING
    key->rng = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fa:	461a      	mov	r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
#elif defined(HAVE_PKCS11)
    (void)isPkcs11;
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifndef WOLFSSL_RSA_PUBLIC_ONLY
    ret = mp_init_multi(&key->n, &key->e, NULL, NULL, NULL, NULL);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 710a 	add.w	r1, r3, #552	; 0x228
 800560a:	2300      	movs	r3, #0
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	2300      	movs	r3, #0
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	2200      	movs	r2, #0
 8005616:	f005 fa01 	bl	800aa1c <mp_init_multi>
 800561a:	6178      	str	r0, [r7, #20]
    if (ret != MP_OKAY)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <wc_InitRsaKey_ex+0xae>
        return ret;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	e028      	b.n	8005678 <wc_InitRsaKey_ex+0x100>

#if !defined(WOLFSSL_KEY_GEN) && !defined(OPENSSL_EXTRA) && defined(RSA_LOW_MEM)
    ret = mp_init_multi(&key->d, &key->p, &key->q, NULL, NULL, NULL);
#else
    ret = mp_init_multi(&key->d, &key->p, &key->q, &key->dP, &key->dQ, &key->u);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 608a 	add.w	r0, r3, #1104	; 0x450
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 61cf 	add.w	r1, r3, #1656	; 0x678
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 640a 	add.w	r4, r3, #2208	; 0x8a0
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f603 25c8 	addw	r5, r3, #2760	; 0xac8
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f602 7218 	addw	r2, r2, #3864	; 0xf18
 800564a:	9201      	str	r2, [sp, #4]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	462b      	mov	r3, r5
 8005650:	4622      	mov	r2, r4
 8005652:	f005 f9e3 	bl	800aa1c <mp_init_multi>
 8005656:	6178      	str	r0, [r7, #20]
#endif
    if (ret != MP_OKAY) {
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <wc_InitRsaKey_ex+0xfe>
        mp_clear(&key->n);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4618      	mov	r0, r3
 8005662:	f005 f9cc 	bl	800a9fe <mp_clear>
        mp_clear(&key->e);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800566c:	4618      	mov	r0, r3
 800566e:	f005 f9c6 	bl	800a9fe <mp_clear>
        return ret;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	e000      	b.n	8005678 <wc_InitRsaKey_ex+0x100>

#ifdef WOLFSSL_KCAPI_RSA
    key->handle = NULL;
#endif

    return ret;
 8005676:	697b      	ldr	r3, [r7, #20]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bdb0      	pop	{r4, r5, r7, pc}

08005680 <wc_InitRsaKey>:

int wc_InitRsaKey(RsaKey* key, void* heap)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
    return wc_InitRsaKey_ex(key, heap, INVALID_DEVID);
 800568a:	f06f 0201 	mvn.w	r2, #1
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ff71 	bl	8005578 <wc_InitRsaKey_ex>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <RsaMGF1>:
   outSz: size of output buffer
 */
#if !defined(NO_SHA) || !defined(NO_SHA256) || defined(WOLFSSL_SHA384) || defined(WOLFSSL_SHA512)
static int RsaMGF1(enum wc_HashType hType, byte* seed, word32 seedSz,
                                        byte* out, word32 outSz, void* heap)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b09a      	sub	sp, #104	; 0x68
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    byte* tmp = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    byte   tmpF = 0;     /* 1 if dynamic memory needs freed */
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
#else
    byte tmp[RSA_MAX_SIZE/8];
#endif
    /* needs to be large enough for seed size plus counter(4) */
    byte  tmpA[WC_MAX_DIGEST_SIZE + 4];
    word32 tmpSz = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	657b      	str	r3, [r7, #84]	; 0x54
    word32 counter;
    word32 idx;
#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_HashAlg *hash;
#endif
    hLen    = wc_HashGetDigestSize(hType);
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fe01 	bl	80042c8 <wc_HashGetDigestSize>
 80056c6:	6478      	str	r0, [r7, #68]	; 0x44
    counter = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	653b      	str	r3, [r7, #80]	; 0x50
    idx     = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    (void)heap;

    XMEMSET(tmpA, 0, sizeof(tmpA));
 80056d0:	f107 0314 	add.w	r3, r7, #20
 80056d4:	2224      	movs	r2, #36	; 0x24
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f006 f93f 	bl	800b95c <memset>
    /* check error return of wc_HashGetDigestSize */
    if (hLen < 0) {
 80056de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da01      	bge.n	80056e8 <RsaMGF1+0x48>
        return hLen;
 80056e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e6:	e08f      	b.n	8005808 <RsaMGF1+0x168>
    }

    /* if tmp is not large enough than use some dynamic memory */
    if ((seedSz + 4) > sizeof(tmpA) || (word32)hLen > sizeof(tmpA)) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3304      	adds	r3, #4
 80056ec:	2b24      	cmp	r3, #36	; 0x24
 80056ee:	d802      	bhi.n	80056f6 <RsaMGF1+0x56>
 80056f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f2:	2b24      	cmp	r3, #36	; 0x24
 80056f4:	d914      	bls.n	8005720 <RsaMGF1+0x80>
        /* find largest amount of memory needed which will be the max of
         * hLen and (seedSz + 4) since tmp is used to store the hash digest */
        tmpSz = ((seedSz + 4) > (word32)hLen)? seedSz + 4: (word32)hLen;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1d1a      	adds	r2, r3, #4
 80056fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bf38      	it	cc
 8005700:	4613      	movcc	r3, r2
 8005702:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
        tmp = (byte*)XMALLOC(tmpSz, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005704:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005706:	f7fe feb1 	bl	800446c <wolfSSL_Malloc>
 800570a:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (tmp == NULL) {
 800570c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <RsaMGF1+0x78>
            return MEMORY_E;
 8005712:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005716:	e077      	b.n	8005808 <RsaMGF1+0x168>
        }
        tmpF = 1; /* make sure to free memory when done */
 8005718:	2301      	movs	r3, #1
 800571a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800571e:	e007      	b.n	8005730 <RsaMGF1+0x90>
#endif
    }
    else {
        /* use array on the stack */
    #ifndef WOLFSSL_SMALL_STACK_CACHE
        tmpSz = sizeof(tmpA);
 8005720:	2324      	movs	r3, #36	; 0x24
 8005722:	657b      	str	r3, [r7, #84]	; 0x54
    #endif
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
        tmp  = tmpA;
 8005724:	f107 0314 	add.w	r3, r7, #20
 8005728:	65fb      	str	r3, [r7, #92]	; 0x5c
        tmpF = 0; /* no need to free memory at end */
 800572a:	2300      	movs	r3, #0
 800572c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        return ret;
    }
#endif

    do {
        int i = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
        XMEMCPY(tmp, seed, seedSz);
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800573a:	f006 f9ad 	bl	800ba98 <memcpy>

        /* counter to byte array appended to tmp */
        tmp[seedSz]     = (byte)((counter >> 24) & 0xFF);
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	0e19      	lsrs	r1, r3, #24
 8005742:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	b2ca      	uxtb	r2, r1
 800574a:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 1] = (byte)((counter >> 16) & 0xFF);
 800574c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574e:	0c19      	lsrs	r1, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3301      	adds	r3, #1
 8005754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005756:	4413      	add	r3, r2
 8005758:	b2ca      	uxtb	r2, r1
 800575a:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 2] = (byte)((counter >>  8) & 0xFF);
 800575c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575e:	0a19      	lsrs	r1, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3302      	adds	r3, #2
 8005764:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005766:	4413      	add	r3, r2
 8005768:	b2ca      	uxtb	r2, r1
 800576a:	701a      	strb	r2, [r3, #0]
        tmp[seedSz + 3] = (byte)((counter)       & 0xFF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3303      	adds	r3, #3
 8005770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005772:	4413      	add	r3, r2
 8005774:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
        ret = wc_HashUpdate(hash, hType, tmp, (seedSz + 4));
        if (ret == 0) {
            ret = wc_HashFinal(hash, hType, tmp);
        }
#else
        ret = wc_Hash(hType, tmp, (seedSz + 4), tmp, tmpSz);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	7bf8      	ldrb	r0, [r7, #15]
 8005780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005786:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005788:	f7fe fde0 	bl	800434c <wc_Hash>
 800578c:	6438      	str	r0, [r7, #64]	; 0x40
#endif
        if (ret != 0) {
 800578e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <RsaMGF1+0x110>
            /* check for if dynamic memory was needed, then free */
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
            if (tmpF) {
 8005794:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <RsaMGF1+0x10c>
                XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 800579c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <RsaMGF1+0x10c>
 80057a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057a8:	f7fe fe7c 	bl	80044a4 <wolfSSL_Free>
            }
#endif
            return ret;
 80057ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ae:	e02b      	b.n	8005808 <RsaMGF1+0x168>
        }

        for (i = 0; i < hLen && idx < outSz; i++) {
 80057b0:	2300      	movs	r3, #0
 80057b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b4:	e00c      	b.n	80057d0 <RsaMGF1+0x130>
            out[idx++] = tmp[i];
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ba:	441a      	add	r2, r3
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	440b      	add	r3, r1
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < hLen && idx < outSz; i++) {
 80057ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057cc:	3301      	adds	r3, #1
 80057ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	429a      	cmp	r2, r3
 80057d6:	da03      	bge.n	80057e0 <RsaMGF1+0x140>
 80057d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3ea      	bcc.n	80057b6 <RsaMGF1+0x116>
        }
        counter++;
 80057e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e2:	3301      	adds	r3, #1
 80057e4:	653b      	str	r3, [r7, #80]	; 0x50
    } while (idx < outSz);
 80057e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3a0      	bcc.n	8005730 <RsaMGF1+0x90>
#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    /* check for if dynamic memory was needed, then free */
    if (tmpF) {
 80057ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <RsaMGF1+0x166>
        XFREE(tmp, heap, DYNAMIC_TYPE_RSA_BUFFER);
 80057f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <RsaMGF1+0x166>
 8005800:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005802:	f7fe fe4f 	bl	80044a4 <wolfSSL_Free>
#ifdef WOLFSSL_SMALL_STACK_CACHE
    wc_HashFree(hash, hType);
    XFREE(hash, heap, DYNAMIC_TYPE_DIGEST);
#endif

    return 0;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3760      	adds	r7, #96	; 0x60
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <RsaMGF>:
/* helper function to direct which mask generation function is used
   switched on type input
 */
static int RsaMGF(int type, byte* seed, word32 seedSz, byte* out,
                                                    word32 outSz, void* heap)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
    int ret;

    switch(type) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10b      	bne.n	800583c <RsaMGF+0x2c>
        case WC_MGF1SHA224:
            ret = RsaMGF1(WC_HASH_TYPE_SHA224, seed, seedSz, out, outSz, heap);
            break;
    #endif
        case WC_MGF1SHA256:
            ret = RsaMGF1(WC_HASH_TYPE_SHA256, seed, seedSz, out, outSz, heap);
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	2006      	movs	r0, #6
 8005834:	f7ff ff34 	bl	80056a0 <RsaMGF1>
 8005838:	6178      	str	r0, [r7, #20]
            break;
 800583a:	e002      	b.n	8005842 <RsaMGF+0x32>
            break;
        #endif
    #endif
        default:
            WOLFSSL_MSG("Unknown MGF type: check build options");
            ret = BAD_FUNC_ARG;
 800583c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8005840:	617b      	str	r3, [r7, #20]
    (void)seedSz;
    (void)out;
    (void)outSz;
    (void)heap;

    return ret;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <RsaPad_OAEP>:
#ifndef WC_NO_RSA_OAEP
static int RsaPad_OAEP(const byte* input, word32 inputLen, byte* pkcsBlock,
        word32 pkcsBlockLen, byte padValue, WC_RNG* rng,
        enum wc_HashType hType, int mgf, byte* optLabel, word32 labelLen,
        void* heap)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b0a2      	sub	sp, #136	; 0x88
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
    word32 hLen;
    int psLen;
    word32 idx;

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
        byte* dbMask = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	67fb      	str	r3, [r7, #124]	; 0x7c
        byte* lHash = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	67bb      	str	r3, [r7, #120]	; 0x78
        byte* seed  = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	677b      	str	r3, [r7, #116]	; 0x74
        byte lHash[WC_MAX_DIGEST_SIZE];
        byte seed[WC_MAX_DIGEST_SIZE];
    #endif

    /* no label is allowed, but catch if no label provided and length > 0 */
    if (optLabel == NULL && labelLen > 0) {
 8005866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <RsaPad_OAEP+0x30>
 800586e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <RsaPad_OAEP+0x30>
        return BUFFER_E;
 8005876:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800587a:	e19b      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }

    /* limit of label is the same as limit of hash function which is massive */
    ret = wc_HashGetDigestSize(hType);
 800587c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe fd21 	bl	80042c8 <wc_HashGetDigestSize>
 8005886:	6738      	str	r0, [r7, #112]	; 0x70
    if (ret < 0) {
 8005888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800588a:	2b00      	cmp	r3, #0
 800588c:	da01      	bge.n	8005892 <RsaPad_OAEP+0x46>
        return ret;
 800588e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005890:	e190      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }
    hLen = (word32)ret;
 8005892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005894:	66fb      	str	r3, [r7, #108]	; 0x6c

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
        lHash = (byte*)XMALLOC(hLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005896:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005898:	f7fe fde8 	bl	800446c <wolfSSL_Malloc>
 800589c:	67b8      	str	r0, [r7, #120]	; 0x78
        if (lHash == NULL) {
 800589e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <RsaPad_OAEP+0x5e>
            return MEMORY_E;
 80058a4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80058a8:	e184      	b.n	8005bb4 <RsaPad_OAEP+0x368>
        }
        seed = (byte*)XMALLOC(hLen, heap, DYNAMIC_TYPE_RSA_BUFFER);
 80058aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80058ac:	f7fe fdde 	bl	800446c <wolfSSL_Malloc>
 80058b0:	6778      	str	r0, [r7, #116]	; 0x74
        if (seed == NULL) {
 80058b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10a      	bne.n	80058ce <RsaPad_OAEP+0x82>
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <RsaPad_OAEP+0x7c>
 80058c2:	6938      	ldr	r0, [r7, #16]
 80058c4:	f7fe fdee 	bl	80044a4 <wolfSSL_Free>
            return MEMORY_E;
 80058c8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80058cc:	e172      	b.n	8005bb4 <RsaPad_OAEP+0x368>
            WOLFSSL_MSG("OAEP lHash to small for digest!!");
            return MEMORY_E;
        }
    #endif

    if ((ret = wc_Hash(hType, optLabel, labelLen, lHash, hLen)) != 0) {
 80058ce:	f897 0090 	ldrb.w	r0, [r7, #144]	; 0x90
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80058dc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80058e0:	f7fe fd34 	bl	800434c <wc_Hash>
 80058e4:	6738      	str	r0, [r7, #112]	; 0x70
 80058e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d011      	beq.n	8005910 <RsaPad_OAEP+0xc4>
        WOLFSSL_MSG("OAEP hash type possibly not supported or lHash to small");
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 80058ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <RsaPad_OAEP+0xb0>
 80058f6:	69b8      	ldr	r0, [r7, #24]
 80058f8:	f7fe fdd4 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 80058fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <RsaPad_OAEP+0xc0>
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7fe fdcc 	bl	80044a4 <wolfSSL_Free>
        #endif
        return ret;
 800590c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800590e:	e151      	b.n	8005bb4 <RsaPad_OAEP+0x368>
       size approaches 0. In decryption if k is less than or equal -- then there
       is no possible room for msg.
       k = RSA key size
       hLen = hash digest size -- will always be >= 0 at this point
     */
    if ((2 * hLen + 2) > pkcsBlockLen) {
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	3301      	adds	r3, #1
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d212      	bcs.n	8005942 <RsaPad_OAEP+0xf6>
        WOLFSSL_MSG("OAEP pad error hash to big for RSA key size");
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 800591c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591e:	623b      	str	r3, [r7, #32]
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <RsaPad_OAEP+0xe0>
 8005926:	6a38      	ldr	r0, [r7, #32]
 8005928:	f7fe fdbc 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 800592c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <RsaPad_OAEP+0xf0>
 8005936:	69f8      	ldr	r0, [r7, #28]
 8005938:	f7fe fdb4 	bl	80044a4 <wolfSSL_Free>
        #endif
        return BAD_FUNC_ARG;
 800593c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8005940:	e138      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }

    if (inputLen > (pkcsBlockLen - 2 * hLen - 2)) {
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	3b02      	subs	r3, #2
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d912      	bls.n	8005978 <RsaPad_OAEP+0x12c>
        WOLFSSL_MSG("OAEP pad error message too long");
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <RsaPad_OAEP+0x116>
 800595c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595e:	f7fe fda1 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <RsaPad_OAEP+0x126>
 800596c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800596e:	f7fe fd99 	bl	80044a4 <wolfSSL_Free>
        #endif
        return BAD_FUNC_ARG;
 8005972:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8005976:	e11d      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }

    /* concatenate lHash || PS || 0x01 || msg */
    idx = pkcsBlockLen - 1 - inputLen;
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	66bb      	str	r3, [r7, #104]	; 0x68
    psLen = (int)pkcsBlockLen - (int)inputLen - 2 * (int)hLen - 2;
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	3b02      	subs	r3, #2
 8005990:	667b      	str	r3, [r7, #100]	; 0x64
    if (pkcsBlockLen < inputLen) { /*make sure not writing over end of buffer */
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	d212      	bcs.n	80059c0 <RsaPad_OAEP+0x174>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 800599a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <RsaPad_OAEP+0x15e>
 80059a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059a6:	f7fe fd7d 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 80059aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <RsaPad_OAEP+0x16e>
 80059b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059b6:	f7fe fd75 	bl	80044a4 <wolfSSL_Free>
        #endif
        return BUFFER_E;
 80059ba:	f06f 0383 	mvn.w	r3, #131	; 0x83
 80059be:	e0f9      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }
    XMEMCPY(pkcsBlock + (pkcsBlockLen - inputLen), input, inputLen);
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f006 f862 	bl	800ba98 <memcpy>
    pkcsBlock[idx--] = 0x01; /* PS and M separator */
 80059d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059d6:	1e5a      	subs	r2, r3, #1
 80059d8:	66ba      	str	r2, [r7, #104]	; 0x68
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
    XMEMSET(pkcsBlock + idx - psLen + 1, 0, (size_t)psLen);
 80059e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	3301      	adds	r3, #1
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f005 ffb2 	bl	800b95c <memset>
    idx -= (word32)psLen;
 80059f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	66bb      	str	r3, [r7, #104]	; 0x68

    idx = idx - hLen + 1;
 8005a00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	3301      	adds	r3, #1
 8005a08:	66bb      	str	r3, [r7, #104]	; 0x68
    XMEMCPY(pkcsBlock + idx, lHash, hLen);
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0e:	4413      	add	r3, r2
 8005a10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005a14:	4618      	mov	r0, r3
 8005a16:	f006 f83f 	bl	800ba98 <memcpy>

    /* generate random seed */
    if ((ret = wc_RNG_GenerateBlock(rng, seed, hLen)) != 0) {
 8005a1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005a1e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005a22:	f7ff fa88 	bl	8004f36 <wc_RNG_GenerateBlock>
 8005a26:	6738      	str	r0, [r7, #112]	; 0x70
 8005a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d011      	beq.n	8005a52 <RsaPad_OAEP+0x206>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <RsaPad_OAEP+0x1f2>
 8005a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a3a:	f7fe fd33 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <RsaPad_OAEP+0x202>
 8005a48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a4a:	f7fe fd2b 	bl	80044a4 <wolfSSL_Free>
        #endif
        return ret;
 8005a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a50:	e0b0      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
    /* create maskedDB from dbMask */
    dbMask = (byte*)XMALLOC(pkcsBlockLen - hLen - 1, heap, DYNAMIC_TYPE_RSA);
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fd06 	bl	800446c <wolfSSL_Malloc>
 8005a60:	67f8      	str	r0, [r7, #124]	; 0x7c
    if (dbMask == NULL) {
 8005a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d112      	bne.n	8005a8e <RsaPad_OAEP+0x242>

            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <RsaPad_OAEP+0x22c>
 8005a72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005a74:	f7fe fd16 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <RsaPad_OAEP+0x23c>
 8005a82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a84:	f7fe fd0e 	bl	80044a4 <wolfSSL_Free>
        return MEMORY_E;
 8005a88:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005a8c:	e092      	b.n	8005bb4 <RsaPad_OAEP+0x368>
#else
    if (pkcsBlockLen - hLen - 1 > sizeof(dbMask)) {
        return MEMORY_E;
    }
#endif
    XMEMSET(dbMask, 0, pkcsBlockLen - hLen - 1); /* help static analyzer */
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	461a      	mov	r2, r3
 8005a98:	2100      	movs	r1, #0
 8005a9a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005a9c:	f005 ff5e 	bl	800b95c <memset>
    ret = RsaMGF(mgf, seed, hLen, dbMask, pkcsBlockLen - hLen - 1, heap);
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005aac:	9201      	str	r2, [sp, #4]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ab2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ab4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005ab6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005aba:	f7ff fea9 	bl	8005810 <RsaMGF>
 8005abe:	6738      	str	r0, [r7, #112]	; 0x70
    if (ret != 0) {
 8005ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d019      	beq.n	8005afa <RsaPad_OAEP+0x2ae>
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
 8005ac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <RsaPad_OAEP+0x28a>
 8005ad0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005ad2:	f7fe fce7 	bl	80044a4 <wolfSSL_Free>
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <RsaPad_OAEP+0x29a>
 8005ae0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005ae2:	f7fe fcdf 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8005aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <RsaPad_OAEP+0x2aa>
 8005af0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005af2:	f7fe fcd7 	bl	80044a4 <wolfSSL_Free>
        #endif
        return ret;
 8005af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005af8:	e05c      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }

    xorbuf(pkcsBlock + hLen + 1, dbMask,pkcsBlockLen - hLen - 1);
 8005afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afc:	3301      	adds	r3, #1
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	18d0      	adds	r0, r2, r3
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b0e:	f7ff fc72 	bl	80053f6 <xorbuf>

#ifdef WOLFSSL_SMALL_STACK
    XFREE(dbMask, heap, DYNAMIC_TYPE_RSA);
 8005b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b14:	663b      	str	r3, [r7, #96]	; 0x60
 8005b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <RsaPad_OAEP+0x2d6>
 8005b1c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005b1e:	f7fe fcc1 	bl	80044a4 <wolfSSL_Free>
#endif

    /* create maskedSeed from seedMask */
    pkcsBlock[0] = 0x00;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
    /* create seedMask inline */
    if ((ret = RsaMGF(mgf, pkcsBlock + hLen + 1, pkcsBlockLen - hLen - 1,
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	18d1      	adds	r1, r2, r3
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	1e5a      	subs	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	1c58      	adds	r0, r3, #1
 8005b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	4603      	mov	r3, r0
 8005b48:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005b4c:	f7ff fe60 	bl	8005810 <RsaMGF>
 8005b50:	6738      	str	r0, [r7, #112]	; 0x70
 8005b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d011      	beq.n	8005b7c <RsaPad_OAEP+0x330>
                                           pkcsBlock + 1, hLen, heap)) != 0) {
        #ifdef WOLFSSL_SMALL_STACK
            XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <RsaPad_OAEP+0x31c>
 8005b62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005b64:	f7fe fc9e 	bl	80044a4 <wolfSSL_Free>
            XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <RsaPad_OAEP+0x32c>
 8005b72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b74:	f7fe fc96 	bl	80044a4 <wolfSSL_Free>
        #endif
        return ret;
 8005b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b7a:	e01b      	b.n	8005bb4 <RsaPad_OAEP+0x368>
    }

    /* xor created seedMask with seed to make maskedSeed */
    xorbuf(pkcsBlock + 1, seed, hLen);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b82:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fc36 	bl	80053f6 <xorbuf>
    /* Seed must be zeroized now that it has been used. */
    wc_MemZero_Add("Pad OAEP seed", seed, hLen);
#endif

    /* Zeroize masking bytes so that padding can't be unmasked. */
    ForceZero(seed, hLen);
 8005b8a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005b8c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8005b8e:	f7ff fc85 	bl	800549c <ForceZero>
    #ifdef WOLFSSL_SMALL_STACK
        XFREE(lHash, heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <RsaPad_OAEP+0x356>
 8005b9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005b9e:	f7fe fc81 	bl	80044a4 <wolfSSL_Free>
        XFREE(seed,  heap, DYNAMIC_TYPE_RSA_BUFFER);
 8005ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <RsaPad_OAEP+0x366>
 8005bac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005bae:	f7fe fc79 	bl	80044a4 <wolfSSL_Free>
    #elif defined(WOLFSSL_CHECK_MEM_ZERO)
        wc_MemZero_Check(seed, hLen);
    #endif
    (void)padValue;

    return 0;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3780      	adds	r7, #128	; 0x80
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <RsaPad>:
#endif /* WC_RSA_PSS */
#endif /* !WC_NO_RNG */

static int RsaPad(const byte* input, word32 inputLen, byte* pkcsBlock,
                           word32 pkcsBlockLen, byte padValue, WC_RNG* rng)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
    if (input == NULL || inputLen == 0 || pkcsBlock == NULL ||
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <RsaPad+0x26>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <RsaPad+0x26>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <RsaPad+0x26>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <RsaPad+0x2c>
                                                        pkcsBlockLen == 0) {
        return BAD_FUNC_ARG;
 8005be2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8005be6:	e05d      	b.n	8005ca4 <RsaPad+0xe8>
    }

    if (pkcsBlockLen - RSA_MIN_PAD_SZ < inputLen) {
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	3b0b      	subs	r3, #11
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d902      	bls.n	8005bf8 <RsaPad+0x3c>
        WOLFSSL_MSG("RsaPad error, invalid length");
        return RSA_PAD_E;
 8005bf2:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 8005bf6:	e055      	b.n	8005ca4 <RsaPad+0xe8>
    }
    pkcsBlock[0] = 0x0;       /* set first byte to zero and advance */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    pkcsBlock++; pkcsBlockLen--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3301      	adds	r3, #1
 8005c02:	607b      	str	r3, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	603b      	str	r3, [r7, #0]
    pkcsBlock[0] = padValue;  /* insert padValue */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005c10:	701a      	strb	r2, [r3, #0]

    if (padValue == RSA_BLOCK_TYPE_1) {
 8005c12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10a      	bne.n	8005c30 <RsaPad+0x74>

        /* pad with 0xff bytes */
        XMEMSET(&pkcsBlock[1], 0xFF, pkcsBlockLen - inputLen - 2);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	1c58      	adds	r0, r3, #1
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	3b02      	subs	r3, #2
 8005c26:	461a      	mov	r2, r3
 8005c28:	21ff      	movs	r1, #255	; 0xff
 8005c2a:	f005 fe97 	bl	800b95c <memset>
 8005c2e:	e026      	b.n	8005c7e <RsaPad+0xc2>
    else {
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WC_NO_RNG)
        /* pad with non-zero random bytes */
        word32 padLen, i;
        int    ret;
        padLen = pkcsBlockLen - inputLen - 1;
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	61bb      	str	r3, [r7, #24]
        ret    = wc_RNG_GenerateBlock(rng, &pkcsBlock[1], padLen);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4619      	mov	r1, r3
 8005c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c44:	f7ff f977 	bl	8004f36 <wc_RNG_GenerateBlock>
 8005c48:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <RsaPad+0x98>
            return ret;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	e027      	b.n	8005ca4 <RsaPad+0xe8>
        }

        /* remove zeros */
        for (i = 1; i < padLen; i++) {
 8005c54:	2301      	movs	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e00d      	b.n	8005c76 <RsaPad+0xba>
            if (pkcsBlock[i] == 0) pkcsBlock[i] = 0x01;
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <RsaPad+0xb4>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
        for (i = 1; i < padLen; i++) {
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d3ed      	bcc.n	8005c5a <RsaPad+0x9e>
        (void)rng;
        return RSA_WRONG_TYPE_E;
#endif
    }

    pkcsBlock[pkcsBlockLen-inputLen-1] = 0;     /* separator */
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
    XMEMCPY(pkcsBlock+pkcsBlockLen-inputLen, input, inputLen);
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f005 fefb 	bl	800ba98 <memcpy>

    return 0;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <wc_RsaPad_ex>:
/* helper function to direct which padding is used */
int wc_RsaPad_ex(const byte* input, word32 inputLen, byte* pkcsBlock,
    word32 pkcsBlockLen, byte padValue, WC_RNG* rng, int padType,
    enum wc_HashType hType, int mgf, byte* optLabel, word32 labelLen,
    int saltLen, int bits, void* heap)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08e      	sub	sp, #56	; 0x38
 8005cb0:	af08      	add	r7, sp, #32
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
    int ret;

    switch (padType)
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <wc_RsaPad_ex+0x1c>
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d00d      	beq.n	8005ce2 <wc_RsaPad_ex+0x36>
 8005cc6:	e024      	b.n	8005d12 <wc_RsaPad_ex+0x66>
    {
        case WC_RSA_PKCSV15_PAD:
            /*WOLFSSL_MSG("wolfSSL Using RSA PKCSV15 padding");*/
            ret = RsaPad(input, inputLen, pkcsBlock, pkcsBlockLen,
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff ff6f 	bl	8005bbc <RsaPad>
 8005cde:	6178      	str	r0, [r7, #20]
                                                                 padValue, rng);
            break;
 8005ce0:	e01a      	b.n	8005d18 <wc_RsaPad_ex+0x6c>

#ifndef WC_NO_RNG
    #ifndef WC_NO_RSA_OAEP
        case WC_RSA_OAEP_PAD:
            WOLFSSL_MSG("wolfSSL Using RSA OAEP padding");
            ret = RsaPad_OAEP(input, inputLen, pkcsBlock, pkcsBlockLen,
 8005ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce4:	9306      	str	r3, [sp, #24]
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	9305      	str	r3, [sp, #20]
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	9303      	str	r3, [sp, #12]
 8005cf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff fd9f 	bl	800584c <RsaPad_OAEP>
 8005d0e:	6178      	str	r0, [r7, #20]
                           padValue, rng, hType, mgf, optLabel, labelLen, heap);
            break;
 8005d10:	e002      	b.n	8005d18 <wc_RsaPad_ex+0x6c>
        }
    #endif

        default:
            WOLFSSL_MSG("Unknown RSA Pad Type");
            ret = RSA_PAD_E;
 8005d12:	f06f 03c8 	mvn.w	r3, #200	; 0xc8
 8005d16:	617b      	str	r3, [r7, #20]
    (void)labelLen;
    (void)saltLen;
    (void)bits;
    (void)heap;

    return ret;
 8005d18:	697b      	ldr	r3, [r7, #20]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <RsaFunctionPrivate>:
#endif

#if !defined(WOLFSSL_SP_MATH)
#if !defined(WOLFSSL_RSA_PUBLIC_ONLY) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
static int RsaFunctionPrivate(mp_int* tmp, RsaKey* key, WC_RNG* rng)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b08e      	sub	sp, #56	; 0x38
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
    int    ret = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
#if defined(WC_RSA_BLINDING) && !defined(WC_NO_RNG)
    DECL_MP_INT_SIZE_DYN(rnd, mp_bitsused(&key->n), RSA_MAX_SIZE);
 8005d32:	2300      	movs	r3, #0
 8005d34:	633b      	str	r3, [r7, #48]	; 0x30
    DECL_MP_INT_SIZE_DYN(rndi, mp_bitsused(&key->n), RSA_MAX_SIZE);
 8005d36:	2300      	movs	r3, #0
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* WC_RSA_BLINDING && !WC_NO_RNG */

    (void)rng;

#if defined(WC_RSA_BLINDING) && !defined(WC_NO_RNG)
    NEW_MP_INT_SIZE(rnd, mp_bitsused(&key->n), key->heap, DYNAMIC_TYPE_RSA);
 8005d3a:	f44f 700a 	mov.w	r0, #552	; 0x228
 8005d3e:	f7fe fb95 	bl	800446c <wolfSSL_Malloc>
 8005d42:	6338      	str	r0, [r7, #48]	; 0x30
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <RsaFunctionPrivate+0x34>
 8005d4a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d52:	f005 fe03 	bl	800b95c <memset>
    NEW_MP_INT_SIZE(rndi, mp_bitsused(&key->n), key->heap, DYNAMIC_TYPE_RSA);
 8005d56:	f44f 700a 	mov.w	r0, #552	; 0x228
 8005d5a:	f7fe fb87 	bl	800446c <wolfSSL_Malloc>
 8005d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <RsaFunctionPrivate+0x50>
 8005d66:	f44f 720a 	mov.w	r2, #552	; 0x228
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d6e:	f005 fdf5 	bl	800b95c <memset>
#ifdef MP_INT_SIZE_CHECK_NULL
    if ((rnd == NULL) || (rndi == NULL)) {
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <RsaFunctionPrivate+0x5c>
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d112      	bne.n	8005da4 <RsaFunctionPrivate+0x82>
        FREE_MP_INT_SIZE(rnd, key->heap, DYNAMIC_TYPE_RSA);
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <RsaFunctionPrivate+0x6c>
 8005d88:	69b8      	ldr	r0, [r7, #24]
 8005d8a:	f7fe fb8b 	bl	80044a4 <wolfSSL_Free>
        FREE_MP_INT_SIZE(rndi, key->heap, DYNAMIC_TYPE_RSA);
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <RsaFunctionPrivate+0x7c>
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	f7fe fb83 	bl	80044a4 <wolfSSL_Free>
        return MEMORY_E;
 8005d9e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005da2:	e0de      	b.n	8005f62 <RsaFunctionPrivate+0x240>
    }
#endif

    if ((INIT_MP_INT_SIZE(rnd, mp_bitsused(&key->n)) != MP_OKAY) ||
 8005da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005da6:	f004 fdaa 	bl	800a8fe <mp_init>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <RsaFunctionPrivate+0x9a>
            (INIT_MP_INT_SIZE(rndi, mp_bitsused(&key->n)) != MP_OKAY)) {
 8005db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005db2:	f004 fda4 	bl	800a8fe <mp_init>
 8005db6:	4603      	mov	r3, r0
    if ((INIT_MP_INT_SIZE(rnd, mp_bitsused(&key->n)) != MP_OKAY) ||
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <RsaFunctionPrivate+0xa0>
        ret = MP_INIT_E;
 8005dbc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (ret == 0) {
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <RsaFunctionPrivate+0xbc>
        /* blind */
        ret = mp_rand(rnd, get_digit_count(&key->n), rng);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f005 f80b 	bl	800ade6 <get_digit_count>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd8:	f005 f825 	bl	800ae26 <mp_rand>
 8005ddc:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if (ret == 0) {
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10b      	bne.n	8005dfc <RsaFunctionPrivate+0xda>
        /* rndi = 1/rnd mod n */
        if (mp_invmod(rnd, &key->n, rndi) != MP_OKAY) {
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de8:	4619      	mov	r1, r3
 8005dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dec:	f004 fe98 	bl	800ab20 <mp_invmod>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <RsaFunctionPrivate+0xda>
            ret = MP_INVMOD_E;
 8005df6:	f06f 0376 	mvn.w	r3, #118	; 0x76
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    if (ret == 0) {
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <RsaFunctionPrivate+0xfc>
        mp_memzero_add("RSA Private rndi", rndi);
    #endif

        /* rnd = rnd^e */
    #ifndef WOLFSSL_SP_MATH_ALL
        if (mp_exptmod(rnd, &key->e, &key->n, rnd) != MP_OKAY) {
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f503 710a 	add.w	r1, r3, #552	; 0x228
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0e:	f004 fe97 	bl	800ab40 <mp_exptmod>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <RsaFunctionPrivate+0xfc>
            ret = MP_EXPTMOD_E;
 8005e18:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
            ret = MP_EXPTMOD_E;
        }
    #endif
    }

    if (ret == 0) {
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <RsaFunctionPrivate+0x11a>
        /* tmp = tmp*rnd mod n */
        if (mp_mulmod(tmp, rnd, &key->n, tmp) != MP_OKAY) {
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f004 fe56 	bl	800aadc <mp_mulmod>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <RsaFunctionPrivate+0x11a>
            ret = MP_MULMOD_E;
 8005e36:	f06f 0374 	mvn.w	r3, #116	; 0x74
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
        if (mp_exptmod(tmp, &key->d, &key->n, tmp) != MP_OKAY) {
            ret = MP_EXPTMOD_E;
        }
    }
#else
    if (ret == 0) {
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d169      	bne.n	8005f16 <RsaFunctionPrivate+0x1f4>
        mp_int* tmpa = tmp;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(WC_RSA_BLINDING) && !defined(WC_NO_RNG)
        mp_int* tmpb = rnd;
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
            mp_memzero_add("RSA Sync tmpb", tmpb);
        }
    #endif

        /* tmpb = tmp^dQ mod q */
        if (ret == 0 && mp_exptmod(tmp, &key->dQ, &key->q, tmpb) != MP_OKAY)
 8005e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10f      	bne.n	8005e70 <RsaFunctionPrivate+0x14e>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f503 614f 	add.w	r1, r3, #3312	; 0xcf0
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f004 fe6e 	bl	800ab40 <mp_exptmod>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <RsaFunctionPrivate+0x14e>
            ret = MP_EXPTMOD_E;
 8005e6a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34

        /* tmpa = tmp^dP mod p */
        if (ret == 0 && mp_exptmod(tmp, &key->dP, &key->p, tmpa) != MP_OKAY)
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10f      	bne.n	8005e96 <RsaFunctionPrivate+0x174>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f603 21c8 	addw	r1, r3, #2760	; 0xac8
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f503 62cf 	add.w	r2, r3, #1656	; 0x678
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f004 fe5b 	bl	800ab40 <mp_exptmod>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <RsaFunctionPrivate+0x174>
            ret = MP_EXPTMOD_E;
 8005e90:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
    #if (defined(WOLFSSL_SP_MATH) || (defined(WOLFSSL_SP_MATH_ALL)) && \
                                              !defined(WOLFSSL_SP_INT_NEGATIVE))
        if (ret == 0 && mp_submod(tmpa, tmpb, &key->p, tmp) != MP_OKAY)
            ret = MP_SUB_E;
    #else
        if (ret == 0 && mp_sub(tmpa, tmpb, tmp) != MP_OKAY)
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <RsaFunctionPrivate+0x190>
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea2:	f004 fdfb 	bl	800aa9c <mp_sub>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <RsaFunctionPrivate+0x190>
            ret = MP_SUB_E;
 8005eac:	f06f 0371 	mvn.w	r3, #113	; 0x71
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
    #endif

        if (ret == 0 && mp_mulmod(tmp, &key->u, &key->p, tmp) != MP_OKAY)
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <RsaFunctionPrivate+0x1b6>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f603 7118 	addw	r1, r3, #3864	; 0xf18
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f503 62cf 	add.w	r2, r3, #1656	; 0x678
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f004 fe08 	bl	800aadc <mp_mulmod>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <RsaFunctionPrivate+0x1b6>
            ret = MP_MULMOD_E;
 8005ed2:	f06f 0374 	mvn.w	r3, #116	; 0x74
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34

        /* tmp = tmpb + q * tmp */
        if (ret == 0 && mp_mul(tmp, &key->q, tmp) != MP_OKAY)
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <RsaFunctionPrivate+0x1d8>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f004 fde7 	bl	800aabc <mp_mul>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <RsaFunctionPrivate+0x1d8>
            ret = MP_MUL_E;
 8005ef4:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34

        if (ret == 0 && mp_add(tmp, tmpb, tmp) != MP_OKAY)
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <RsaFunctionPrivate+0x1f4>
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f004 fdb9 	bl	800aa7c <mp_add>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <RsaFunctionPrivate+0x1f4>
            ret = MP_ADD_E;
 8005f10:	f06f 0372 	mvn.w	r3, #114	; 0x72
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif   /* RSA_LOW_MEM */

#if defined(WC_RSA_BLINDING) && !defined(WC_NO_RNG)
    /* unblind */
    if (ret == 0 && mp_mulmod(tmp, rndi, &key->n, tmp) != MP_OKAY)
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <RsaFunctionPrivate+0x212>
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f004 fdda 	bl	800aadc <mp_mulmod>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <RsaFunctionPrivate+0x212>
        ret = MP_MULMOD_E;
 8005f2e:	f06f 0374 	mvn.w	r3, #116	; 0x74
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34

    mp_forcezero(rndi);
 8005f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f36:	f004 fd4d 	bl	800a9d4 <mp_forcezero>
    mp_forcezero(rnd);
 8005f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f3c:	f004 fd4a 	bl	800a9d4 <mp_forcezero>
    FREE_MP_INT_SIZE(rndi, key->heap, DYNAMIC_TYPE_RSA);
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <RsaFunctionPrivate+0x22e>
 8005f4a:	6a38      	ldr	r0, [r7, #32]
 8005f4c:	f7fe faaa 	bl	80044a4 <wolfSSL_Free>
    FREE_MP_INT_SIZE(rnd, key->heap, DYNAMIC_TYPE_RSA);
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <RsaFunctionPrivate+0x23e>
 8005f5a:	69f8      	ldr	r0, [r7, #28]
 8005f5c:	f7fe faa2 	bl	80044a4 <wolfSSL_Free>
#if !defined(MP_INT_SIZE_CHECK_NULL) && defined(WOLFSSL_CHECK_MEM_ZERO)
    mp_memzero_check(rnd);
    mp_memzero_check(rndi);
#endif
#endif /* WC_RSA_BLINDING && !WC_NO_RNG */
    return ret;
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3738      	adds	r7, #56	; 0x38
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <RsaFunctionSync>:
#endif

static int RsaFunctionSync(const byte* in, word32 inLen, byte* out,
    word32* outLen, int type, RsaKey* key, WC_RNG* rng)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b088      	sub	sp, #32
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
    DECL_MP_INT_SIZE_DYN(tmp, mp_bitsused(&key->n), RSA_MAX_SIZE);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
    int    ret = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]

    (void)rng;

    NEW_MP_INT_SIZE(tmp, mp_bitsused(&key->n), key->heap, DYNAMIC_TYPE_RSA);
 8005f80:	f44f 700a 	mov.w	r0, #552	; 0x228
 8005f84:	f7fe fa72 	bl	800446c <wolfSSL_Malloc>
 8005f88:	61b8      	str	r0, [r7, #24]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <RsaFunctionSync+0x32>
 8005f90:	f44f 720a 	mov.w	r2, #552	; 0x228
 8005f94:	2100      	movs	r1, #0
 8005f96:	69b8      	ldr	r0, [r7, #24]
 8005f98:	f005 fce0 	bl	800b95c <memset>
#ifdef MP_INT_SIZE_CHECK_NULL
    if (tmp == NULL)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <RsaFunctionSync+0x3e>
        return MEMORY_E;
 8005fa2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8005fa6:	e05c      	b.n	8006062 <RsaFunctionSync+0xf8>
#endif

    if (INIT_MP_INT_SIZE(tmp, mp_bitsused(&key->n)) != MP_OKAY)
 8005fa8:	69b8      	ldr	r0, [r7, #24]
 8005faa:	f004 fca8 	bl	800a8fe <mp_init>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <RsaFunctionSync+0x50>
        ret = MP_INIT_E;
 8005fb4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8005fb8:	61fb      	str	r3, [r7, #28]

#ifndef TEST_UNPAD_CONSTANT_TIME
    if (ret == 0 && mp_read_unsigned_bin(tmp, in, inLen) != MP_OKAY)
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <RsaFunctionSync+0x6e>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	69b8      	ldr	r0, [r7, #24]
 8005fc8:	f004 fe16 	bl	800abf8 <mp_read_unsigned_bin>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <RsaFunctionSync+0x6e>
        ret = MP_READ_E;
 8005fd2:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8005fd6:	61fb      	str	r3, [r7, #28]
    if (ret == 0) {
        mp_memzero_add("RSA sync tmp", tmp);
    }
#endif

    if (ret == 0) {
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d125      	bne.n	800602a <RsaFunctionSync+0xc0>
        switch(type) {
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	dc03      	bgt.n	8005fec <RsaFunctionSync+0x82>
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da0b      	bge.n	8006002 <RsaFunctionSync+0x98>
 8005fea:	e019      	b.n	8006020 <RsaFunctionSync+0xb6>
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	3b02      	subs	r3, #2
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d815      	bhi.n	8006020 <RsaFunctionSync+0xb6>
    #if !defined(WOLFSSL_RSA_PUBLIC_ONLY) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
        case RSA_PRIVATE_DECRYPT:
        case RSA_PRIVATE_ENCRYPT:
        {
            ret = RsaFunctionPrivate(tmp, key, rng);
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff8:	69b8      	ldr	r0, [r7, #24]
 8005ffa:	f7ff fe92 	bl	8005d22 <RsaFunctionPrivate>
 8005ffe:	61f8      	str	r0, [r7, #28]
            break;
 8006000:	e013      	b.n	800602a <RsaFunctionSync+0xc0>
        }
    #endif
        case RSA_PUBLIC_ENCRYPT:
        case RSA_PUBLIC_DECRYPT:
            if (mp_exptmod_nct(tmp, &key->e, &key->n, tmp) != MP_OKAY)
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	f503 710a 	add.w	r1, r3, #552	; 0x228
 8006008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	69b8      	ldr	r0, [r7, #24]
 800600e:	f004 fda9 	bl	800ab64 <mp_exptmod_nct>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <RsaFunctionSync+0xbe>
                ret = MP_EXPTMOD_E;
 8006018:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800601c:	61fb      	str	r3, [r7, #28]
            break;
 800601e:	e003      	b.n	8006028 <RsaFunctionSync+0xbe>
        default:
            ret = RSA_WRONG_TYPE_E;
 8006020:	f06f 0381 	mvn.w	r3, #129	; 0x81
 8006024:	61fb      	str	r3, [r7, #28]
            break;
 8006026:	e000      	b.n	800602a <RsaFunctionSync+0xc0>
            break;
 8006028:	bf00      	nop
        }
    }

    if (ret == 0) {
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10c      	bne.n	800604a <RsaFunctionSync+0xe0>
        if (mp_to_unsigned_bin_len(tmp, out, (int)*outLen) != MP_OKAY)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	69b8      	ldr	r0, [r7, #24]
 800603a:	f004 fdcd 	bl	800abd8 <mp_to_unsigned_bin_len>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <RsaFunctionSync+0xe0>
             ret = MP_TO_E;
 8006044:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8006048:	61fb      	str	r3, [r7, #28]
    (void)type;
    (void)key;
    XMEMCPY(out, in, inLen);
#endif

    mp_forcezero(tmp);
 800604a:	69b8      	ldr	r0, [r7, #24]
 800604c:	f004 fcc2 	bl	800a9d4 <mp_forcezero>
    FREE_MP_INT_SIZE(tmp, key->heap, DYNAMIC_TYPE_RSA);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <RsaFunctionSync+0xf6>
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f7fe fa22 	bl	80044a4 <wolfSSL_Free>
#if !defined(MP_INT_SIZE_CHECK_NULL) && defined(WOLFSSL_CHECK_MEM_ZERO)
    mp_memzero_check(tmp);
#endif
    return ret;
 8006060:	69fb      	ldr	r3, [r7, #28]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <wc_RsaFunctionSync>:
#endif /* !WOLFSSL_SP_MATH */

static int wc_RsaFunctionSync(const byte* in, word32 inLen, byte* out,
                          word32* outLen, int type, RsaKey* key, WC_RNG* rng)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b08a      	sub	sp, #40	; 0x28
 800606e:	af04      	add	r7, sp, #16
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
    int ret;
    word32 keyLen;

    ret = wc_RsaEncryptSize(key);
 8006078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800607a:	f000 fa1b 	bl	80064b4 <wc_RsaEncryptSize>
 800607e:	6178      	str	r0, [r7, #20]
    if (ret < 0) {
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da01      	bge.n	800608a <wc_RsaFunctionSync+0x20>
        return ret;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	e02d      	b.n	80060e6 <wc_RsaFunctionSync+0x7c>
    }
    keyLen = (word32)ret;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	613b      	str	r3, [r7, #16]

    if (inLen > keyLen) {
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d902      	bls.n	800609c <wc_RsaFunctionSync+0x32>
        WOLFSSL_MSG("Expected that inLen be no longer RSA key length");
        return BAD_FUNC_ARG;
 8006096:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800609a:	e024      	b.n	80060e6 <wc_RsaFunctionSync+0x7c>
    }
    if (keyLen > *outLen) {
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d902      	bls.n	80060ac <wc_RsaFunctionSync+0x42>
        WOLFSSL_MSG("Expected that outLen be no shorter RSA key length");
        return RSA_BUFFER_E;
 80060a6:	f06f 0382 	mvn.w	r3, #130	; 0x82
 80060aa:	e01c      	b.n	80060e6 <wc_RsaFunctionSync+0x7c>
    }

    if (mp_iseven(&key->n)) {
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dd08      	ble.n	80060c6 <wc_RsaFunctionSync+0x5c>
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <wc_RsaFunctionSync+0x5c>
        return MP_VAL;
 80060c0:	f04f 33ff 	mov.w	r3, #4294967295
 80060c4:	e00f      	b.n	80060e6 <wc_RsaFunctionSync+0x7c>
#else
    WOLFSSL_MSG("SP Key Size Error");
    return WC_KEY_SIZE_E;
#endif
#else
    *outLen = keyLen;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	601a      	str	r2, [r3, #0]
    return RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	9302      	str	r3, [sp, #8]
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff ff43 	bl	8005f6a <RsaFunctionSync>
 80060e4:	4603      	mov	r3, r0
#endif /* WOLFSSL_SP_MATH */
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <RsaFunctionCheckIn>:
#ifndef WOLF_CRYPTO_CB_ONLY_RSA
#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(TEST_UNPAD_CONSTANT_TIME) &&     !defined(NO_RSA_BOUNDS_CHECK)
/* Check that 1 < in < n-1. (Requirement of 800-56B.) */
static int RsaFunctionCheckIn(const byte* in, word32 inLen, RsaKey* key,
    int checkSmallCt)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b088      	sub	sp, #32
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
    DECL_MP_INT_SIZE_DYN(c, mp_bitsused(&key->n), RSA_MAX_SIZE);
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]

    NEW_MP_INT_SIZE(c, mp_bitsused(&key->n), key->heap, DYNAMIC_TYPE_RSA);
 8006104:	f44f 700a 	mov.w	r0, #552	; 0x228
 8006108:	f7fe f9b0 	bl	800446c <wolfSSL_Malloc>
 800610c:	61b8      	str	r0, [r7, #24]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <RsaFunctionCheckIn+0x32>
 8006114:	f44f 720a 	mov.w	r2, #552	; 0x228
 8006118:	2100      	movs	r1, #0
 800611a:	69b8      	ldr	r0, [r7, #24]
 800611c:	f005 fc1e 	bl	800b95c <memset>
#ifdef MP_INT_SIZE_CHECK_NULL
    if (c == NULL)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <RsaFunctionCheckIn+0x3e>
        ret = MEMORY_E;
 8006126:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800612a:	61fb      	str	r3, [r7, #28]
#endif

    if (ret == 0 && INIT_MP_INT_SIZE(c, mp_bitsused(&key->n)) != MP_OKAY) {
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d108      	bne.n	8006144 <RsaFunctionCheckIn+0x56>
 8006132:	69b8      	ldr	r0, [r7, #24]
 8006134:	f004 fbe3 	bl	800a8fe <mp_init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <RsaFunctionCheckIn+0x56>
        ret = MP_INIT_E;
 800613e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8006142:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <RsaFunctionCheckIn+0x74>
        if (mp_read_unsigned_bin(c, in, inLen) != 0)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	461a      	mov	r2, r3
 800614e:	68f9      	ldr	r1, [r7, #12]
 8006150:	69b8      	ldr	r0, [r7, #24]
 8006152:	f004 fd51 	bl	800abf8 <mp_read_unsigned_bin>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <RsaFunctionCheckIn+0x74>
            ret = MP_READ_E;
 800615c:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8006160:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10c      	bne.n	8006182 <RsaFunctionCheckIn+0x94>
        /* check c > 1 */
        if (checkSmallCt && (mp_cmp_d(c, 1) != MP_GT))
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <RsaFunctionCheckIn+0x94>
 800616e:	2101      	movs	r1, #1
 8006170:	69b8      	ldr	r0, [r7, #24]
 8006172:	f004 fd17 	bl	800aba4 <mp_cmp_d>
 8006176:	4603      	mov	r3, r0
 8006178:	2b01      	cmp	r3, #1
 800617a:	d002      	beq.n	8006182 <RsaFunctionCheckIn+0x94>
            ret = RSA_OUT_OF_RANGE_E;
 800617c:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
 8006180:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <RsaFunctionCheckIn+0xb0>
        /* add c+1 */
        if (mp_add_d(c, 1, c) != MP_OKAY)
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	2101      	movs	r1, #1
 800618c:	69b8      	ldr	r0, [r7, #24]
 800618e:	f004 fdad 	bl	800acec <mp_add_d>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <RsaFunctionCheckIn+0xb0>
            ret = MP_ADD_E;
 8006198:	f06f 0372 	mvn.w	r3, #114	; 0x72
 800619c:	61fb      	str	r3, [r7, #28]
    }
    if (ret == 0) {
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <RsaFunctionCheckIn+0xce>
        /* check c+1 < n */
        if (mp_cmp(c, &key->n) != MP_LT)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4619      	mov	r1, r3
 80061a8:	69b8      	ldr	r0, [r7, #24]
 80061aa:	f004 fced 	bl	800ab88 <mp_cmp>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d002      	beq.n	80061bc <RsaFunctionCheckIn+0xce>
            ret = RSA_OUT_OF_RANGE_E;
 80061b6:	f06f 03fc 	mvn.w	r3, #252	; 0xfc
 80061ba:	61fb      	str	r3, [r7, #28]
    }
    mp_clear(c);
 80061bc:	69b8      	ldr	r0, [r7, #24]
 80061be:	f004 fc1e 	bl	800a9fe <mp_clear>

    FREE_MP_INT_SIZE(c, key->heap, DYNAMIC_TYPE_RSA);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <RsaFunctionCheckIn+0xe4>
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	f7fe f969 	bl	80044a4 <wolfSSL_Free>

    return ret;
 80061d2:	69fb      	ldr	r3, [r7, #28]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3720      	adds	r7, #32
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <wc_RsaFunction_ex>:
#endif /* WOLF_CRYPTO_CB_ONLY_RSA */

static int wc_RsaFunction_ex(const byte* in, word32 inLen, byte* out,
                             word32* outLen, int type, RsaKey* key, WC_RNG* rng,
                             int checkSmallCt)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af04      	add	r7, sp, #16
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
    (void)rng;
    (void)checkSmallCt;

    if (key == NULL || in == NULL || inLen == 0 || out == NULL ||
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <wc_RsaFunction_ex+0x40>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <wc_RsaFunction_ex+0x40>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <wc_RsaFunction_ex+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <wc_RsaFunction_ex+0x40>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <wc_RsaFunction_ex+0x40>
            outLen == NULL || *outLen == 0 || type == RSA_TYPE_UNKNOWN) {
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <wc_RsaFunction_ex+0x40>
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d102      	bne.n	8006222 <wc_RsaFunction_ex+0x46>
        return BAD_FUNC_ARG;
 800621c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006220:	e034      	b.n	800628c <wc_RsaFunction_ex+0xb0>
#ifndef WOLF_CRYPTO_CB_ONLY_RSA
    SAVE_VECTOR_REGISTERS(return _svr_ret;);

#if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(TEST_UNPAD_CONSTANT_TIME) && \
    !defined(NO_RSA_BOUNDS_CHECK)
    if (type == RSA_PRIVATE_DECRYPT &&
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d112      	bne.n	800624e <wc_RsaFunction_ex+0x72>
        key->state == RSA_STATE_DECRYPT_EXPTMOD) {
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    if (type == RSA_PRIVATE_DECRYPT &&
 8006232:	2b04      	cmp	r3, #4
 8006234:	d10b      	bne.n	800624e <wc_RsaFunction_ex+0x72>

        ret = RsaFunctionCheckIn(in, inLen, key, checkSmallCt);
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff ff56 	bl	80060ee <RsaFunctionCheckIn>
 8006242:	6178      	str	r0, [r7, #20]
        if (ret != 0) {
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <wc_RsaFunction_ex+0x72>
            RESTORE_VECTOR_REGISTERS();
            return ret;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	e01e      	b.n	800628c <wc_RsaFunction_ex+0xb0>
        ret = wc_RsaFunctionNonBlock(in, inLen, out, outLen, type, key);
    }
    else
#endif
    {
        ret = wc_RsaFunctionSync(in, inLen, out, outLen, type, key, rng);
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	9302      	str	r3, [sp, #8]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff02 	bl	800606a <wc_RsaFunctionSync>
 8006266:	6178      	str	r0, [r7, #20]
    }

    RESTORE_VECTOR_REGISTERS();

    /* handle error */
    if (ret < 0 && ret != WC_PENDING_E
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	da0d      	bge.n	800628a <wc_RsaFunction_ex+0xae>
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 8006274:	d009      	beq.n	800628a <wc_RsaFunction_ex+0xae>
        if (ret == MP_EXPTMOD_E) {
            /* This can happen due to incorrectly set FP_MAX_BITS or missing XREALLOC */
            WOLFSSL_MSG("RSA_FUNCTION MP_EXPTMOD_E: memory/config problem");
        }

        key->state = RSA_STATE_NONE;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
        wc_RsaCleanup(key);
 8006284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006286:	f7ff f922 	bl	80054ce <wc_RsaCleanup>
    }
    return ret;
 800628a:	697b      	ldr	r3, [r7, #20]
#endif /* WOLF_CRYPTO_CB_ONLY_RSA */
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <wc_RsaFunction>:

int wc_RsaFunction(const byte* in, word32 inLen, byte* out,
                          word32* outLen, int type, RsaKey* key, WC_RNG* rng)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af04      	add	r7, sp, #16
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
    /* Always check for ciphertext of 0 or 1. (Should't for OAEP decrypt.) */
    return wc_RsaFunction_ex(in, inLen, out, outLen, type, key, rng, 1);
 80062a2:	2301      	movs	r3, #1
 80062a4:	9303      	str	r3, [sp, #12]
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff ff8f 	bl	80061dc <wc_RsaFunction_ex>
 80062be:	4603      	mov	r3, r0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <RsaPublicEncryptEx>:
                            word32 outLen, RsaKey* key, int rsa_type,
                            byte pad_value, int pad_type,
                            enum wc_HashType hash, int mgf,
                            byte* label, word32 labelSz, int saltLen,
                            WC_RNG* rng)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b093      	sub	sp, #76	; 0x4c
 80062cc:	af0a      	add	r7, sp, #40	; 0x28
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
    int sz;
    int state;

    if (in == NULL || inLen == 0 || out == NULL || key == NULL) {
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <RsaPublicEncryptEx+0x2a>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <RsaPublicEncryptEx+0x2a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <RsaPublicEncryptEx+0x2a>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <RsaPublicEncryptEx+0x30>
        return BAD_FUNC_ARG;
 80062f2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80062f6:	e0b2      	b.n	800645e <RsaPublicEncryptEx+0x196>
    }

    sz = wc_RsaEncryptSize(key);
 80062f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062fa:	f000 f8db 	bl	80064b4 <wc_RsaEncryptSize>
 80062fe:	61b8      	str	r0, [r7, #24]
    if (sz > (int)outLen) {
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	dd02      	ble.n	800630e <RsaPublicEncryptEx+0x46>
        return RSA_BUFFER_E;
 8006308:	f06f 0382 	mvn.w	r3, #130	; 0x82
 800630c:	e0a7      	b.n	800645e <RsaPublicEncryptEx+0x196>
    }

    if (sz < RSA_MIN_PAD_SZ || sz > (int)RSA_MAX_SIZE/8) {
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b0a      	cmp	r3, #10
 8006312:	dd03      	ble.n	800631c <RsaPublicEncryptEx+0x54>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631a:	dd02      	ble.n	8006322 <RsaPublicEncryptEx+0x5a>
        return WC_KEY_SIZE_E;
 800631c:	f06f 03e9 	mvn.w	r3, #233	; 0xe9
 8006320:	e09d      	b.n	800645e <RsaPublicEncryptEx+0x196>
    }

    if (inLen > (word32)(sz - RSA_MIN_PAD_SZ)) {
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	3b0b      	subs	r3, #11
 8006326:	461a      	mov	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4293      	cmp	r3, r2
 800632c:	d902      	bls.n	8006334 <RsaPublicEncryptEx+0x6c>
#ifdef WC_RSA_NO_PADDING
        /* In the case that no padding is used the input length can and should
         * be the same size as the RSA key. */
        if (pad_type != WC_RSA_NO_PAD)
#endif
        return RSA_BUFFER_E;
 800632e:	f06f 0382 	mvn.w	r3, #130	; 0x82
 8006332:	e094      	b.n	800645e <RsaPublicEncryptEx+0x196>
    }

#ifndef WOLFSSL_BIND
    state = key->state;
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800633e:	617b      	str	r3, [r7, #20]
    state = RSA_STATE_NONE;
#ifdef WOLFSSL_ASYNC_CRYPT
#error wolfSSL does not handle building bind support with async crypto
#endif
#endif
    switch (state) {
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d06c      	beq.n	8006420 <RsaPublicEncryptEx+0x158>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b03      	cmp	r3, #3
 800634a:	dc70      	bgt.n	800642e <RsaPublicEncryptEx+0x166>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b01      	cmp	r3, #1
 8006350:	dc03      	bgt.n	800635a <RsaPublicEncryptEx+0x92>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	da04      	bge.n	8006362 <RsaPublicEncryptEx+0x9a>
 8006358:	e069      	b.n	800642e <RsaPublicEncryptEx+0x166>
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d037      	beq.n	80063d0 <RsaPublicEncryptEx+0x108>
 8006360:	e065      	b.n	800642e <RsaPublicEncryptEx+0x166>
                ret = 0; /* reset error code and try using software */
            }
       #endif
    #endif /* WOLFSSL_SE050 */

        key->state = RSA_STATE_ENCRYPT_PAD;
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006368:	461a      	mov	r2, r3
 800636a:	2301      	movs	r3, #1
 800636c:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
        ret = wc_RsaPad_ex(in, inLen, out, (word32)sz, pad_value, rng, pad_type,
 8006370:	69bc      	ldr	r4, [r7, #24]
                           hash, mgf, label, labelSz, saltLen,
                           mp_count_bits(&key->n), key->heap);
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        ret = wc_RsaPad_ex(in, inLen, out, (word32)sz, pad_value, rng, pad_type,
 8006374:	4618      	mov	r0, r3
 8006376:	f004 fc82 	bl	800ac7e <mp_count_bits>
 800637a:	4602      	mov	r2, r0
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006382:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006386:	9309      	str	r3, [sp, #36]	; 0x24
 8006388:	9208      	str	r2, [sp, #32]
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	9307      	str	r3, [sp, #28]
 800638e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006390:	9306      	str	r3, [sp, #24]
 8006392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006394:	9305      	str	r3, [sp, #20]
 8006396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4623      	mov	r3, r4
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fc79 	bl	8005cac <wc_RsaPad_ex>
 80063ba:	61f8      	str	r0, [r7, #28]
        if (ret < 0) {
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	db39      	blt.n	8006436 <RsaPublicEncryptEx+0x16e>
            break;
        }

        key->state = RSA_STATE_ENCRYPT_EXPTMOD;
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c8:	461a      	mov	r2, r3
 80063ca:	2302      	movs	r3, #2
 80063cc:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
        FALL_THROUGH;

    case RSA_STATE_ENCRYPT_EXPTMOD:

        key->dataLen = outLen;
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d6:	461a      	mov	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
        ret = wc_RsaFunction(out, (word32)sz, out, &key->dataLen, rsa_type, key,
 80063de:	69b9      	ldr	r1, [r7, #24]
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80063e6:	3310      	adds	r3, #16
 80063e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ea:	9202      	str	r2, [sp, #8]
 80063ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f2:	9200      	str	r2, [sp, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff ff4c 	bl	8006294 <wc_RsaFunction>
 80063fc:	61f8      	str	r0, [r7, #28]
                             rng);

        if (ret >= 0 || ret == WC_PENDING_E) {
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	da03      	bge.n	800640c <RsaPublicEncryptEx+0x144>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 800640a:	d106      	bne.n	800641a <RsaPublicEncryptEx+0x152>
            key->state = RSA_STATE_ENCRYPT_RES;
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	461a      	mov	r2, r3
 8006414:	2303      	movs	r3, #3
 8006416:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
        }
        if (ret < 0) {
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	db0c      	blt.n	800643a <RsaPublicEncryptEx+0x172>
        }

        FALL_THROUGH;

    case RSA_STATE_ENCRYPT_RES:
        ret = (int)key->dataLen;
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006426:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800642a:	61fb      	str	r3, [r7, #28]
        break;
 800642c:	e006      	b.n	800643c <RsaPublicEncryptEx+0x174>

    default:
        ret = BAD_STATE_E;
 800642e:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 8006432:	61fb      	str	r3, [r7, #28]
        break;
 8006434:	e002      	b.n	800643c <RsaPublicEncryptEx+0x174>
            break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <RsaPublicEncryptEx+0x174>
            break;
 800643a:	bf00      	nop
    }

    /* if async pending then return and skip done cleanup below */
    if (ret == WC_PENDING_E
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 8006442:	d101      	bne.n	8006448 <RsaPublicEncryptEx+0x180>
    #ifdef WC_RSA_NONBLOCK
        || ret == FP_WOULDBLOCK
    #endif
    ) {
        return ret;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	e00a      	b.n	800645e <RsaPublicEncryptEx+0x196>
    }

    key->state = RSA_STATE_NONE;
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644e:	461a      	mov	r2, r3
 8006450:	2300      	movs	r3, #0
 8006452:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
    wc_RsaCleanup(key);
 8006456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006458:	f7ff f839 	bl	80054ce <wc_RsaCleanup>

    return ret;
 800645c:	69fb      	ldr	r3, [r7, #28]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd90      	pop	{r4, r7, pc}

08006466 <wc_RsaSSL_Sign>:
#endif

#if !defined(WOLFSSL_RSA_PUBLIC_ONLY) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
int wc_RsaSSL_Sign(const byte* in, word32 inLen, byte* out, word32 outLen,
                                                   RsaKey* key, WC_RNG* rng)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b090      	sub	sp, #64	; 0x40
 800646a:	af0a      	add	r7, sp, #40	; 0x28
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
    int ret;
    SAVE_VECTOR_REGISTERS(return _svr_ret;);
    ret = RsaPublicEncryptEx(in, inLen, out, outLen, key,
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	9309      	str	r3, [sp, #36]	; 0x24
 8006478:	2300      	movs	r3, #0
 800647a:	9308      	str	r3, [sp, #32]
 800647c:	2300      	movs	r3, #0
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	2300      	movs	r3, #0
 8006482:	9306      	str	r3, [sp, #24]
 8006484:	2300      	movs	r3, #0
 8006486:	9305      	str	r3, [sp, #20]
 8006488:	2300      	movs	r3, #0
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	2300      	movs	r3, #0
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	2301      	movs	r3, #1
 8006492:	9302      	str	r3, [sp, #8]
 8006494:	2302      	movs	r3, #2
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff ff10 	bl	80062c8 <RsaPublicEncryptEx>
 80064a8:	6178      	str	r0, [r7, #20]
        RSA_PRIVATE_ENCRYPT, RSA_BLOCK_TYPE_1, WC_RSA_PKCSV15_PAD,
        WC_HASH_TYPE_NONE, WC_MGF1NONE, NULL, 0, 0, rng);
    RESTORE_VECTOR_REGISTERS();
    return ret;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <wc_RsaEncryptSize>:
}
#endif
#endif

int wc_RsaEncryptSize(const RsaKey* key)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    int ret;

    if (key == NULL) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <wc_RsaEncryptSize+0x14>
        return BAD_FUNC_ARG;
 80064c2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80064c6:	e005      	b.n	80064d4 <wc_RsaEncryptSize+0x20>
    }

    ret = mp_unsigned_bin_size(&key->n);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f004 fb78 	bl	800abc0 <mp_unsigned_bin_size>
 80064d0:	60f8      	str	r0, [r7, #12]
            ret = 2048/8; /* hardware handles, use 2048-bit as default */
        }
    }
#endif

    return ret;
 80064d2:	68fb      	ldr	r3, [r7, #12]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <wc_RsaSetRNG>:
#endif /* WOLFSSL_KEY_GEN */


#ifdef WC_RSA_BLINDING
int wc_RsaSetRNG(RsaKey* key, WC_RNG* rng)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
    if (key == NULL || rng == NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <wc_RsaSetRNG+0x16>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <wc_RsaSetRNG+0x1c>
        return BAD_FUNC_ARG;
 80064f2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80064f6:	e007      	b.n	8006508 <wc_RsaSetRNG+0x2c>

    key->rng = rng;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fe:	461a      	mov	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    return 0;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <rotlFixed>:
    {
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f1c3 0320 	rsb	r3, r3, #32
 8006526:	fa62 f303 	ror.w	r3, r2, r3
    }
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <rotrFixed>:
    {
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
        return (x >> y) | (x << (sizeof(y) * 8 - y));
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	fa62 f303 	ror.w	r3, r2, r3
    }
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <ByteReverseWord32>:
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800656c:	4313      	orrs	r3, r2
 800656e:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 8006570:	2110      	movs	r1, #16
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ffce 	bl	8006514 <rotlFixed>
 8006578:	4603      	mov	r3, r0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <ByteReverseWords>:
{
 8006582:	b590      	push	{r4, r7, lr}
 8006584:	b087      	sub	sp, #28
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
        word32 count = byteCount/(word32)sizeof(word32);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	089b      	lsrs	r3, r3, #2
 8006592:	613b      	str	r3, [r7, #16]
        for (i = 0; i < count; i++)
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e010      	b.n	80065bc <ByteReverseWords+0x3a>
            out[i] = ByteReverseWord32(in[i]);
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	18d4      	adds	r4, r2, r3
 80065ac:	4608      	mov	r0, r1
 80065ae:	f7ff ffd1 	bl	8006554 <ByteReverseWord32>
 80065b2:	4603      	mov	r3, r0
 80065b4:	6023      	str	r3, [r4, #0]
        for (i = 0; i < count; i++)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	3301      	adds	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d3ea      	bcc.n	800659a <ByteReverseWords+0x18>
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd90      	pop	{r4, r7, pc}

080065ce <min>:
    {
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	4293      	cmp	r3, r2
 80065de:	bf28      	it	cs
 80065e0:	4613      	movcs	r3, r2
    }
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
	...

080065f0 <InitSha256>:
    (!defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)) && \
    !defined(WOLFSSL_RENESAS_RX64_HASH)


static int InitSha256(wc_Sha256* sha256)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
    int ret = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

    if (sha256 == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <InitSha256+0x18>
        return BAD_FUNC_ARG;
 8006602:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006606:	e027      	b.n	8006658 <InitSha256+0x68>

    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f005 f9a4 	bl	800b95c <memset>
    sha256->digest[0] = 0x6A09E667L;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a12      	ldr	r2, [pc, #72]	; (8006660 <InitSha256+0x70>)
 8006618:	601a      	str	r2, [r3, #0]
    sha256->digest[1] = 0xBB67AE85L;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <InitSha256+0x74>)
 800661e:	605a      	str	r2, [r3, #4]
    sha256->digest[2] = 0x3C6EF372L;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a11      	ldr	r2, [pc, #68]	; (8006668 <InitSha256+0x78>)
 8006624:	609a      	str	r2, [r3, #8]
    sha256->digest[3] = 0xA54FF53AL;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a10      	ldr	r2, [pc, #64]	; (800666c <InitSha256+0x7c>)
 800662a:	60da      	str	r2, [r3, #12]
    sha256->digest[4] = 0x510E527FL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a10      	ldr	r2, [pc, #64]	; (8006670 <InitSha256+0x80>)
 8006630:	611a      	str	r2, [r3, #16]
    sha256->digest[5] = 0x9B05688CL;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a0f      	ldr	r2, [pc, #60]	; (8006674 <InitSha256+0x84>)
 8006636:	615a      	str	r2, [r3, #20]
    sha256->digest[6] = 0x1F83D9ABL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a0f      	ldr	r2, [pc, #60]	; (8006678 <InitSha256+0x88>)
 800663c:	619a      	str	r2, [r3, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <InitSha256+0x8c>)
 8006642:	61da      	str	r2, [r3, #28]

    sha256->buffLen = 0;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	661a      	str	r2, [r3, #96]	; 0x60
    sha256->loLen   = 0;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	665a      	str	r2, [r3, #100]	; 0x64
    sha256->hiLen   = 0;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	669a      	str	r2, [r3, #104]	; 0x68

#ifdef WOLFSSL_MAXQ10XX_CRYPTO
    XMEMSET(&sha256->maxq_ctx, 0, sizeof(sha256->maxq_ctx));
#endif

    return ret;
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	6a09e667 	.word	0x6a09e667
 8006664:	bb67ae85 	.word	0xbb67ae85
 8006668:	3c6ef372 	.word	0x3c6ef372
 800666c:	a54ff53a 	.word	0xa54ff53a
 8006670:	510e527f 	.word	0x510e527f
 8006674:	9b05688c 	.word	0x9b05688c
 8006678:	1f83d9ab 	.word	0x1f83d9ab
 800667c:	5be0cd19 	.word	0x5be0cd19

08006680 <wc_InitSha256_ex>:

#else
    #define NEED_SOFT_SHA256

    int wc_InitSha256_ex(wc_Sha256* sha256, void* heap, int devId)
    {
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
        int ret = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
        if (sha256 == NULL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <wc_InitSha256_ex+0x1c>
            return BAD_FUNC_ARG;
 8006696:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800669a:	e00c      	b.n	80066b6 <wc_InitSha256_ex+0x36>
        ret = InitSha256(sha256);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff ffa7 	bl	80065f0 <InitSha256>
 80066a2:	6178      	str	r0, [r7, #20]
        if (ret != 0)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <wc_InitSha256_ex+0x2e>
            return ret;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	e003      	b.n	80066b6 <wc_InitSha256_ex+0x36>

        sha256->heap = heap;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	66da      	str	r2, [r3, #108]	; 0x6c
    #endif /* WOLFSSL_ASYNC_CRYPT */
    #ifdef WOLFSSL_IMXRT1170_CAAM
         ret = wc_CAAM_HashInit(&sha256->hndl, &sha256->ctx, WC_HASH_TYPE_SHA256);
    #endif

        return ret;
 80066b4:	697b      	ldr	r3, [r7, #20]
    }
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 80066c0:	b5b0      	push	{r4, r5, r7, lr}
 80066c2:	b090      	sub	sp, #64	; 0x40
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 80066ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066ce:	f7fd fecd 	bl	800446c <wolfSSL_Malloc>
 80066d2:	63b8      	str	r0, [r7, #56]	; 0x38
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <Transform_Sha256+0x20>
            return MEMORY_E;
 80066da:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80066de:	e35f      	b.n	8006da0 <Transform_Sha256+0x6e0>
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
 80066e0:	2300      	movs	r3, #0
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e4:	e00c      	b.n	8006700 <Transform_Sha256+0x40>
            S[i] = sha256->digest[i];
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	3340      	adds	r3, #64	; 0x40
 80066f4:	443b      	add	r3, r7
 80066f6:	f843 2c34 	str.w	r2, [r3, #-52]
        for (i = 0; i < 8; i++)
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	3301      	adds	r3, #1
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006702:	2b07      	cmp	r3, #7
 8006704:	ddef      	ble.n	80066e6 <Transform_Sha256+0x26>

        for (i = 0; i < 16; i++)
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670a:	e00d      	b.n	8006728 <Transform_Sha256+0x68>
            W[i] = *((const word32*)&data[i*(int)sizeof(word32)]);
 800670c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	461a      	mov	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	441a      	add	r2, r3
 8006716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800671c:	440b      	add	r3, r1
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 16; i++)
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	3301      	adds	r3, #1
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672a:	2b0f      	cmp	r3, #15
 800672c:	ddee      	ble.n	800670c <Transform_Sha256+0x4c>

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800672e:	2310      	movs	r3, #16
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006732:	e066      	b.n	8006802 <Transform_Sha256+0x142>
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 8006734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006736:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800673a:	3b02      	subs	r3, #2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006740:	4413      	add	r3, r2
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2111      	movs	r1, #17
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fef5 	bl	8006536 <rotrFixed>
 800674c:	4604      	mov	r4, r0
 800674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006754:	3b02      	subs	r3, #2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800675a:	4413      	add	r3, r2
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2113      	movs	r1, #19
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fee8 	bl	8006536 <rotrFixed>
 8006766:	4603      	mov	r3, r0
 8006768:	ea84 0203 	eor.w	r2, r4, r3
 800676c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006772:	3b02      	subs	r3, #2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006778:	440b      	add	r3, r1
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	0a9b      	lsrs	r3, r3, #10
 800677e:	405a      	eors	r2, r3
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006786:	3b07      	subs	r3, #7
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800678c:	440b      	add	r3, r1
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	18d4      	adds	r4, r2, r3
 8006792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006798:	3b0f      	subs	r3, #15
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800679e:	4413      	add	r3, r2
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2107      	movs	r1, #7
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fec6 	bl	8006536 <rotrFixed>
 80067aa:	4605      	mov	r5, r0
 80067ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067b2:	3b0f      	subs	r3, #15
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b8:	4413      	add	r3, r2
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2112      	movs	r1, #18
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff feb9 	bl	8006536 <rotrFixed>
 80067c4:	4603      	mov	r3, r0
 80067c6:	ea85 0203 	eor.w	r2, r5, r3
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067d0:	3b0f      	subs	r3, #15
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067d6:	440b      	add	r3, r1
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	4053      	eors	r3, r2
 80067de:	18e1      	adds	r1, r4, r3
 80067e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067e6:	3b10      	subs	r3, #16
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ec:	4413      	add	r3, r2
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067f6:	4403      	add	r3, r0
 80067f8:	440a      	add	r2, r1
 80067fa:	601a      	str	r2, [r3, #0]
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 80067fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fe:	3301      	adds	r3, #1
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006804:	2b3f      	cmp	r3, #63	; 0x3f
 8006806:	dd95      	ble.n	8006734 <Transform_Sha256+0x74>
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 8006808:	2300      	movs	r3, #0
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680c:	e2a3      	b.n	8006d56 <Transform_Sha256+0x696>
            RND(0); RND(1); RND(2); RND(3);
 800680e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	2106      	movs	r1, #6
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff fe8e 	bl	8006536 <rotrFixed>
 800681a:	4605      	mov	r5, r0
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	210b      	movs	r1, #11
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fe88 	bl	8006536 <rotrFixed>
 8006826:	4603      	mov	r3, r0
 8006828:	405d      	eors	r5, r3
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2119      	movs	r1, #25
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fe81 	bl	8006536 <rotrFixed>
 8006834:	4603      	mov	r3, r0
 8006836:	406b      	eors	r3, r5
 8006838:	18e2      	adds	r2, r4, r3
 800683a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800683c:	69f8      	ldr	r0, [r7, #28]
 800683e:	6a3c      	ldr	r4, [r7, #32]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	4063      	eors	r3, r4
 8006844:	4003      	ands	r3, r0
 8006846:	404b      	eors	r3, r1
 8006848:	441a      	add	r2, r3
 800684a:	49bd      	ldr	r1, [pc, #756]	; (8006b40 <Transform_Sha256+0x480>)
 800684c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006852:	441a      	add	r2, r3
 8006854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800685a:	440b      	add	r3, r1
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4413      	add	r3, r2
 8006860:	633b      	str	r3, [r7, #48]	; 0x30
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2102      	movs	r1, #2
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fe65 	bl	8006536 <rotrFixed>
 800686c:	4604      	mov	r4, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	210d      	movs	r1, #13
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fe5f 	bl	8006536 <rotrFixed>
 8006878:	4603      	mov	r3, r0
 800687a:	405c      	eors	r4, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2116      	movs	r1, #22
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fe58 	bl	8006536 <rotrFixed>
 8006886:	4603      	mov	r3, r0
 8006888:	ea84 0203 	eor.w	r2, r4, r3
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4319      	orrs	r1, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	4019      	ands	r1, r3
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4003      	ands	r3, r0
 800689c:	430b      	orrs	r3, r1
 800689e:	4413      	add	r3, r2
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	4413      	add	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	4413      	add	r3, r2
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2106      	movs	r1, #6
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fe3c 	bl	8006536 <rotrFixed>
 80068be:	4605      	mov	r5, r0
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	210b      	movs	r1, #11
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fe36 	bl	8006536 <rotrFixed>
 80068ca:	4603      	mov	r3, r0
 80068cc:	405d      	eors	r5, r3
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2119      	movs	r1, #25
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fe2f 	bl	8006536 <rotrFixed>
 80068d8:	4603      	mov	r3, r0
 80068da:	406b      	eors	r3, r5
 80068dc:	18e2      	adds	r2, r4, r3
 80068de:	6a39      	ldr	r1, [r7, #32]
 80068e0:	69b8      	ldr	r0, [r7, #24]
 80068e2:	69fc      	ldr	r4, [r7, #28]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	4063      	eors	r3, r4
 80068e8:	4003      	ands	r3, r0
 80068ea:	404b      	eors	r3, r1
 80068ec:	441a      	add	r2, r3
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	3301      	adds	r3, #1
 80068f2:	4993      	ldr	r1, [pc, #588]	; (8006b40 <Transform_Sha256+0x480>)
 80068f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80068f8:	441a      	add	r2, r3
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	3301      	adds	r3, #1
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006902:	440b      	add	r3, r1
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4413      	add	r3, r2
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	2102      	movs	r1, #2
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff fe11 	bl	8006536 <rotrFixed>
 8006914:	4604      	mov	r4, r0
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	210d      	movs	r1, #13
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fe0b 	bl	8006536 <rotrFixed>
 8006920:	4603      	mov	r3, r0
 8006922:	405c      	eors	r4, r3
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	2116      	movs	r1, #22
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fe04 	bl	8006536 <rotrFixed>
 800692e:	4603      	mov	r3, r0
 8006930:	ea84 0203 	eor.w	r2, r4, r3
 8006934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4319      	orrs	r1, r3
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4019      	ands	r1, r3
 800693e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4003      	ands	r3, r0
 8006944:	430b      	orrs	r3, r1
 8006946:	4413      	add	r3, r2
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	4413      	add	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	4413      	add	r3, r2
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
 800695a:	6a3c      	ldr	r4, [r7, #32]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2106      	movs	r1, #6
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fde8 	bl	8006536 <rotrFixed>
 8006966:	4605      	mov	r5, r0
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	210b      	movs	r1, #11
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fde2 	bl	8006536 <rotrFixed>
 8006972:	4603      	mov	r3, r0
 8006974:	405d      	eors	r5, r3
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2119      	movs	r1, #25
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fddb 	bl	8006536 <rotrFixed>
 8006980:	4603      	mov	r3, r0
 8006982:	406b      	eors	r3, r5
 8006984:	18e2      	adds	r2, r4, r3
 8006986:	69f9      	ldr	r1, [r7, #28]
 8006988:	6978      	ldr	r0, [r7, #20]
 800698a:	69bc      	ldr	r4, [r7, #24]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4063      	eors	r3, r4
 8006990:	4003      	ands	r3, r0
 8006992:	404b      	eors	r3, r1
 8006994:	441a      	add	r2, r3
 8006996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006998:	3302      	adds	r3, #2
 800699a:	4969      	ldr	r1, [pc, #420]	; (8006b40 <Transform_Sha256+0x480>)
 800699c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80069a0:	441a      	add	r2, r3
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	3302      	adds	r3, #2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069aa:	440b      	add	r3, r1
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	2102      	movs	r1, #2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fdbd 	bl	8006536 <rotrFixed>
 80069bc:	4604      	mov	r4, r0
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	210d      	movs	r1, #13
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff fdb7 	bl	8006536 <rotrFixed>
 80069c8:	4603      	mov	r3, r0
 80069ca:	405c      	eors	r4, r3
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	2116      	movs	r1, #22
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fdb0 	bl	8006536 <rotrFixed>
 80069d6:	4603      	mov	r3, r0
 80069d8:	ea84 0203 	eor.w	r2, r4, r3
 80069dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	4319      	orrs	r1, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4019      	ands	r1, r3
 80069e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	4003      	ands	r3, r0
 80069ec:	430b      	orrs	r3, r1
 80069ee:	4413      	add	r3, r2
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	4413      	add	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	4413      	add	r3, r2
 8006a00:	623b      	str	r3, [r7, #32]
 8006a02:	69fc      	ldr	r4, [r7, #28]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2106      	movs	r1, #6
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff fd94 	bl	8006536 <rotrFixed>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	210b      	movs	r1, #11
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fd8e 	bl	8006536 <rotrFixed>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	405d      	eors	r5, r3
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2119      	movs	r1, #25
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fd87 	bl	8006536 <rotrFixed>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	406b      	eors	r3, r5
 8006a2c:	18e2      	adds	r2, r4, r3
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	6938      	ldr	r0, [r7, #16]
 8006a32:	697c      	ldr	r4, [r7, #20]
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	4063      	eors	r3, r4
 8006a38:	4003      	ands	r3, r0
 8006a3a:	404b      	eors	r3, r1
 8006a3c:	441a      	add	r2, r3
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a40:	3303      	adds	r3, #3
 8006a42:	493f      	ldr	r1, [pc, #252]	; (8006b40 <Transform_Sha256+0x480>)
 8006a44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006a48:	441a      	add	r2, r3
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4c:	3303      	adds	r3, #3
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a52:	440b      	add	r3, r1
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4413      	add	r3, r2
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fd69 	bl	8006536 <rotrFixed>
 8006a64:	4604      	mov	r4, r0
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	210d      	movs	r1, #13
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fd63 	bl	8006536 <rotrFixed>
 8006a70:	4603      	mov	r3, r0
 8006a72:	405c      	eors	r4, r3
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2116      	movs	r1, #22
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fd5c 	bl	8006536 <rotrFixed>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	ea84 0203 	eor.w	r2, r4, r3
 8006a84:	6a39      	ldr	r1, [r7, #32]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	4319      	orrs	r1, r3
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	4019      	ands	r1, r3
 8006a8e:	6a38      	ldr	r0, [r7, #32]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	4003      	ands	r3, r0
 8006a94:	430b      	orrs	r3, r1
 8006a96:	4413      	add	r3, r2
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	4413      	add	r3, r2
 8006aa8:	61fb      	str	r3, [r7, #28]
            RND(4); RND(5); RND(6); RND(7);
 8006aaa:	69bc      	ldr	r4, [r7, #24]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2106      	movs	r1, #6
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fd40 	bl	8006536 <rotrFixed>
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	210b      	movs	r1, #11
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff fd3a 	bl	8006536 <rotrFixed>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	405d      	eors	r5, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2119      	movs	r1, #25
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fd33 	bl	8006536 <rotrFixed>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	406b      	eors	r3, r5
 8006ad4:	18e2      	adds	r2, r4, r3
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	693c      	ldr	r4, [r7, #16]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4063      	eors	r3, r4
 8006ae0:	4003      	ands	r3, r0
 8006ae2:	404b      	eors	r3, r1
 8006ae4:	441a      	add	r2, r3
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4915      	ldr	r1, [pc, #84]	; (8006b40 <Transform_Sha256+0x480>)
 8006aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006af0:	441a      	add	r2, r3
 8006af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af4:	3304      	adds	r3, #4
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006afa:	440b      	add	r3, r1
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	633b      	str	r3, [r7, #48]	; 0x30
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2102      	movs	r1, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fd15 	bl	8006536 <rotrFixed>
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	210d      	movs	r1, #13
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fd0f 	bl	8006536 <rotrFixed>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	405c      	eors	r4, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2116      	movs	r1, #22
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fd08 	bl	8006536 <rotrFixed>
 8006b26:	4603      	mov	r3, r0
 8006b28:	ea84 0203 	eor.w	r2, r4, r3
 8006b2c:	69f9      	ldr	r1, [r7, #28]
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4319      	orrs	r1, r3
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	4019      	ands	r1, r3
 8006b36:	69f8      	ldr	r0, [r7, #28]
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	4003      	ands	r3, r0
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	e001      	b.n	8006b44 <Transform_Sha256+0x484>
 8006b40:	0800caf8 	.word	0x0800caf8
 8006b44:	4413      	add	r3, r2
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	4413      	add	r3, r2
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	4413      	add	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	697c      	ldr	r4, [r7, #20]
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	2106      	movs	r1, #6
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fce9 	bl	8006536 <rotrFixed>
 8006b64:	4605      	mov	r5, r0
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	210b      	movs	r1, #11
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fce3 	bl	8006536 <rotrFixed>
 8006b70:	4603      	mov	r3, r0
 8006b72:	405d      	eors	r5, r3
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	2119      	movs	r1, #25
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fcdc 	bl	8006536 <rotrFixed>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	406b      	eors	r3, r5
 8006b82:	18e2      	adds	r2, r4, r3
 8006b84:	6939      	ldr	r1, [r7, #16]
 8006b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b88:	68fc      	ldr	r4, [r7, #12]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	4063      	eors	r3, r4
 8006b8e:	4003      	ands	r3, r0
 8006b90:	404b      	eors	r3, r1
 8006b92:	441a      	add	r2, r3
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	3305      	adds	r3, #5
 8006b98:	4983      	ldr	r1, [pc, #524]	; (8006da8 <Transform_Sha256+0x6e8>)
 8006b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b9e:	441a      	add	r2, r3
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba2:	3305      	adds	r3, #5
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ba8:	440b      	add	r3, r1
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4413      	add	r3, r2
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2102      	movs	r1, #2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fcbe 	bl	8006536 <rotrFixed>
 8006bba:	4604      	mov	r4, r0
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	210d      	movs	r1, #13
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff fcb8 	bl	8006536 <rotrFixed>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	405c      	eors	r4, r3
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2116      	movs	r1, #22
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fcb1 	bl	8006536 <rotrFixed>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	ea84 0203 	eor.w	r2, r4, r3
 8006bda:	69b9      	ldr	r1, [r7, #24]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4319      	orrs	r1, r3
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	4019      	ands	r1, r3
 8006be4:	69b8      	ldr	r0, [r7, #24]
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4003      	ands	r3, r0
 8006bea:	430b      	orrs	r3, r1
 8006bec:	4413      	add	r3, r2
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	4413      	add	r3, r2
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	4413      	add	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	693c      	ldr	r4, [r7, #16]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	2106      	movs	r1, #6
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fc95 	bl	8006536 <rotrFixed>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	210b      	movs	r1, #11
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff fc8f 	bl	8006536 <rotrFixed>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	405d      	eors	r5, r3
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	2119      	movs	r1, #25
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fc88 	bl	8006536 <rotrFixed>
 8006c26:	4603      	mov	r3, r0
 8006c28:	406b      	eors	r3, r5
 8006c2a:	18e2      	adds	r2, r4, r3
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c30:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4063      	eors	r3, r4
 8006c36:	4003      	ands	r3, r0
 8006c38:	404b      	eors	r3, r1
 8006c3a:	441a      	add	r2, r3
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3e:	3306      	adds	r3, #6
 8006c40:	4959      	ldr	r1, [pc, #356]	; (8006da8 <Transform_Sha256+0x6e8>)
 8006c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c46:	441a      	add	r2, r3
 8006c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4a:	3306      	adds	r3, #6
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c50:	440b      	add	r3, r1
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	633b      	str	r3, [r7, #48]	; 0x30
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff fc6a 	bl	8006536 <rotrFixed>
 8006c62:	4604      	mov	r4, r0
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	210d      	movs	r1, #13
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fc64 	bl	8006536 <rotrFixed>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	405c      	eors	r4, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2116      	movs	r1, #22
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fc5d 	bl	8006536 <rotrFixed>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	ea84 0203 	eor.w	r2, r4, r3
 8006c82:	6979      	ldr	r1, [r7, #20]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	4319      	orrs	r1, r3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4019      	ands	r1, r3
 8006c8c:	6978      	ldr	r0, [r7, #20]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	4003      	ands	r3, r0
 8006c92:	430b      	orrs	r3, r1
 8006c94:	4413      	add	r3, r2
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c98:	6a3a      	ldr	r2, [r7, #32]
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	4413      	add	r3, r2
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	4413      	add	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	68fc      	ldr	r4, [r7, #12]
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	2106      	movs	r1, #6
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fc41 	bl	8006536 <rotrFixed>
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	210b      	movs	r1, #11
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fc3b 	bl	8006536 <rotrFixed>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	405d      	eors	r5, r3
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2119      	movs	r1, #25
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fc34 	bl	8006536 <rotrFixed>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	406b      	eors	r3, r5
 8006cd2:	18e2      	adds	r2, r4, r3
 8006cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd6:	6a38      	ldr	r0, [r7, #32]
 8006cd8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	4063      	eors	r3, r4
 8006cde:	4003      	ands	r3, r0
 8006ce0:	404b      	eors	r3, r1
 8006ce2:	441a      	add	r2, r3
 8006ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce6:	3307      	adds	r3, #7
 8006ce8:	492f      	ldr	r1, [pc, #188]	; (8006da8 <Transform_Sha256+0x6e8>)
 8006cea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006cee:	441a      	add	r2, r3
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	3307      	adds	r3, #7
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cf8:	440b      	add	r3, r1
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2102      	movs	r1, #2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fc16 	bl	8006536 <rotrFixed>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	210d      	movs	r1, #13
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fc10 	bl	8006536 <rotrFixed>
 8006d16:	4603      	mov	r3, r0
 8006d18:	405c      	eors	r4, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2116      	movs	r1, #22
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fc09 	bl	8006536 <rotrFixed>
 8006d24:	4603      	mov	r3, r0
 8006d26:	ea84 0203 	eor.w	r2, r4, r3
 8006d2a:	6939      	ldr	r1, [r7, #16]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4319      	orrs	r1, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	4019      	ands	r1, r3
 8006d34:	6938      	ldr	r0, [r7, #16]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	4003      	ands	r3, r0
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	4413      	add	r3, r2
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	4413      	add	r3, r2
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	3308      	adds	r3, #8
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d58:	2b3f      	cmp	r3, #63	; 0x3f
 8006d5a:	f77f ad58 	ble.w	800680e <Transform_Sha256+0x14e>
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
 8006d5e:	2300      	movs	r3, #0
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d62:	e011      	b.n	8006d88 <Transform_Sha256+0x6c8>
            sha256->digest[i] += S[i];
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	3340      	adds	r3, #64	; 0x40
 8006d72:	443b      	add	r3, r7
 8006d74:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8006d78:	18d1      	adds	r1, r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0; i < 8; i++) {
 8006d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d84:	3301      	adds	r3, #1
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	2b07      	cmp	r3, #7
 8006d8c:	ddea      	ble.n	8006d64 <Transform_Sha256+0x6a4>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <Transform_Sha256+0x6de>
 8006d98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d9a:	f7fd fb83 	bl	80044a4 <wolfSSL_Free>
    #endif
        return 0;
 8006d9e:	2300      	movs	r3, #0
    }
 8006da0:	4618      	mov	r0, r3
 8006da2:	3740      	adds	r7, #64	; 0x40
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bdb0      	pop	{r4, r5, r7, pc}
 8006da8:	0800caf8 	.word	0x0800caf8

08006dac <AddLength>:


#ifdef XTRANSFORM

    static WC_INLINE void AddLength(wc_Sha256* sha256, word32 len)
    {
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
        word32 tmp = sha256->loLen;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dba:	60fb      	str	r3, [r7, #12]
        if ((sha256->loLen += len) < tmp) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	665a      	str	r2, [r3, #100]	; 0x64
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d904      	bls.n	8006ddc <AddLength+0x30>
            sha256->hiLen++;                       /* carry low to high */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	669a      	str	r2, [r3, #104]	; 0x68
        }
    }
 8006ddc:	bf00      	nop
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <Sha256Update>:

    /* do block size increments/updates */
    static WC_INLINE int Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
        word32 blocksLen;
        byte* local;

        if (sha256 == NULL || (data == NULL && len > 0)) {
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <Sha256Update+0x22>
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <Sha256Update+0x28>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <Sha256Update+0x28>
            return BAD_FUNC_ARG;
 8006e0a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006e0e:	e084      	b.n	8006f1a <Sha256Update+0x132>
        }

        if (data == NULL && len == 0) {
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <Sha256Update+0x38>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <Sha256Update+0x38>
            /* valid, but do nothing */
            return 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e07c      	b.n	8006f1a <Sha256Update+0x132>
        }

        /* check that internal buffLen is valid */
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	2b3f      	cmp	r3, #63	; 0x3f
 8006e26:	d902      	bls.n	8006e2e <Sha256Update+0x46>
            return BUFFER_E;
 8006e28:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8006e2c:	e075      	b.n	8006f1a <Sha256Update+0x132>
        }

        /* add length for final */
        AddLength(sha256, len);
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff ffbb 	bl	8006dac <AddLength>

        local = (byte*)sha256->buffer;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3320      	adds	r3, #32
 8006e3a:	61bb      	str	r3, [r7, #24]

        /* process any remainder from previous operation */
        if (sha256->buffLen > 0) {
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d056      	beq.n	8006ef2 <Sha256Update+0x10a>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fbbd 	bl	80065ce <min>
 8006e54:	6178      	str	r0, [r7, #20]
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f004 fe18 	bl	800ba98 <memcpy>

            sha256->buffLen += blocksLen;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	441a      	add	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	661a      	str	r2, [r3, #96]	; 0x60
            data            += blocksLen;
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]
            len             -= blocksLen;
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	607b      	str	r3, [r7, #4]

            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d132      	bne.n	8006ef2 <Sha256Update+0x10a>
                          defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f103 0020 	add.w	r0, r3, #32
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3320      	adds	r3, #32
 8006e96:	2240      	movs	r2, #64	; 0x40
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f7ff fb72 	bl	8006582 <ByteReverseWords>
                else {
                    ESP_LOGV(TAG, "Sha256Update process hardware");
                    esp_sha256_process(sha256, (const byte*)local);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local);
 8006e9e:	69b9      	ldr	r1, [r7, #24]
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7ff fc0d 	bl	80066c0 <Transform_Sha256>
 8006ea6:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret == 0)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d103      	bne.n	8006eb6 <Sha256Update+0xce>
                    sha256->buffLen = 0;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	661a      	str	r2, [r3, #96]	; 0x60
 8006eb4:	e01d      	b.n	8006ef2 <Sha256Update+0x10a>
                else
                    len = 0; /* error */
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	607b      	str	r3, [r7, #4]
    #endif /* XTRANSFORM_LEN */
    #if !defined(XTRANSFORM_LEN) || \
        (defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)))
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
 8006eba:	e01a      	b.n	8006ef2 <Sha256Update+0x10a>
                word32* local32 = sha256->buffer;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3320      	adds	r3, #32
 8006ec0:	613b      	str	r3, [r7, #16]
                    local32 = (word32*)data;
                }
                else
            #endif
                {
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 8006ec2:	2240      	movs	r2, #64	; 0x40
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f004 fde6 	bl	800ba98 <memcpy>
                }

                data += WC_SHA256_BLOCK_SIZE;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3340      	adds	r3, #64	; 0x40
 8006ed0:	60bb      	str	r3, [r7, #8]
                len  -= WC_SHA256_BLOCK_SIZE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3b40      	subs	r3, #64	; 0x40
 8006ed6:	607b      	str	r3, [r7, #4]
                          defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	6939      	ldr	r1, [r7, #16]
 8006edc:	6938      	ldr	r0, [r7, #16]
 8006ede:	f7ff fb50 	bl	8006582 <ByteReverseWords>
                else {
                    ESP_LOGV(TAG, "Sha256Update process hardware");
                    esp_sha256_process(sha256, (const byte*)local32);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local32);
 8006ee2:	6939      	ldr	r1, [r7, #16]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fbeb 	bl	80066c0 <Transform_Sha256>
 8006eea:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret != 0)
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <Sha256Update+0x112>
            while (len >= WC_SHA256_BLOCK_SIZE) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b3f      	cmp	r3, #63	; 0x3f
 8006ef6:	d8e1      	bhi.n	8006ebc <Sha256Update+0xd4>
 8006ef8:	e000      	b.n	8006efc <Sha256Update+0x114>
                    break;
 8006efa:	bf00      	nop
            }
        }
    #endif

        /* save remainder */
        if (ret == 0 && len > 0) {
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <Sha256Update+0x130>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d007      	beq.n	8006f18 <Sha256Update+0x130>
            XMEMCPY(local, data, len);
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	69b8      	ldr	r0, [r7, #24]
 8006f0e:	f004 fdc3 	bl	800ba98 <memcpy>
            sha256->buffLen = len;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
        }

        return ret;
 8006f18:	69fb      	ldr	r3, [r7, #28]
    }
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]
        if (sha256 == NULL || (data == NULL && len > 0)) {
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <wc_Sha256Update+0x1e>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <wc_Sha256Update+0x24>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <wc_Sha256Update+0x24>
            return BAD_FUNC_ARG;
 8006f40:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006f44:	e00d      	b.n	8006f62 <wc_Sha256Update+0x40>
        }

        if (data == NULL && len == 0) {
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <wc_Sha256Update+0x34>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <wc_Sha256Update+0x34>
            /* valid, but do nothing */
            return 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e005      	b.n	8006f62 <wc_Sha256Update+0x40>
            return IntelQaSymSha256(&sha256->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff ff44 	bl	8006de8 <Sha256Update>
 8006f60:	4603      	mov	r3, r0
    }
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <Sha256Final>:
#endif

    static WC_INLINE int Sha256Final(wc_Sha256* sha256)
    {
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]

        int ret;
        byte* local;

        if (sha256 == NULL) {
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <Sha256Final+0x14>
            return BAD_FUNC_ARG;
 8006f78:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8006f7c:	e070      	b.n	8007060 <Sha256Final+0xf6>
        }

        /* we'll add a 0x80 byte at the end,
        ** so make sure we have appropriate buffer length. */
        if (sha256->buffLen > WC_SHA256_BLOCK_SIZE - 1) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f82:	2b3f      	cmp	r3, #63	; 0x3f
 8006f84:	d902      	bls.n	8006f8c <Sha256Final+0x22>
            /* exit with error code if there's a bad buffer size in buffLen */
            return BAD_STATE_E;
 8006f86:	f06f 03bf 	mvn.w	r3, #191	; 0xbf
 8006f8a:	e069      	b.n	8007060 <Sha256Final+0xf6>
        } /* buffLen check */

        local = (byte*)sha256->buffer;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3320      	adds	r3, #32
 8006f90:	60fb      	str	r3, [r7, #12]
        local[sha256->buffLen++] = 0x80; /* add 1 */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f96:	1c59      	adds	r1, r3, #1
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6611      	str	r1, [r2, #96]	; 0x60
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	2280      	movs	r2, #128	; 0x80
 8006fa2:	701a      	strb	r2, [r3, #0]

        /* pad with zeros */
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	2b38      	cmp	r3, #56	; 0x38
 8006faa:	d924      	bls.n	8006ff6 <Sha256Final+0x8c>
            XMEMSET(&local[sha256->buffLen], 0,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	18d0      	adds	r0, r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	f004 fccc 	bl	800b95c <memset>
                WC_SHA256_BLOCK_SIZE - sha256->buffLen);
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2240      	movs	r2, #64	; 0x40
 8006fc8:	661a      	str	r2, [r3, #96]	; 0x60
            #if defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
            {
                ByteReverseWords(sha256->buffer, sha256->buffer,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f103 0020 	add.w	r0, r3, #32
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3320      	adds	r3, #32
 8006fd4:	2240      	movs	r2, #64	; 0x40
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f7ff fad3 	bl	8006582 <ByteReverseWords>
            }
            else {
                ret = esp_sha256_process(sha256, (const byte*)local);
            }
        #else
            ret = XTRANSFORM(sha256, (const byte*)local);
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fb6e 	bl	80066c0 <Transform_Sha256>
 8006fe4:	60b8      	str	r0, [r7, #8]
        #endif
            if (ret != 0)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <Sha256Final+0x86>
                return ret;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	e037      	b.n	8007060 <Sha256Final+0xf6>

            sha256->buffLen = 0;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	661a      	str	r2, [r3, #96]	; 0x60
        }
        XMEMSET(&local[sha256->buffLen], 0,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	18d0      	adds	r0, r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007006:	461a      	mov	r2, r3
 8007008:	2100      	movs	r1, #0
 800700a:	f004 fca7 	bl	800b95c <memset>
            WC_SHA256_PAD_SIZE - sha256->buffLen);

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007012:	0f5a      	lsrs	r2, r3, #29
                                                         (sha256->hiLen << 3);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007018:	00db      	lsls	r3, r3, #3
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 800701a:	441a      	add	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	669a      	str	r2, [r3, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007024:	00da      	lsls	r2, r3, #3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	665a      	str	r2, [r3, #100]	; 0x64
        #if defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
        if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
        {
            ByteReverseWords(sha256->buffer, sha256->buffer,
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f103 0020 	add.w	r0, r3, #32
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3320      	adds	r3, #32
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	4619      	mov	r1, r3
 8007038:	f7ff faa3 	bl	8006582 <ByteReverseWords>
                WC_SHA256_BLOCK_SIZE);
        }
    #endif
        /* ! length ordering dependent on digest endian type ! */
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3338      	adds	r3, #56	; 0x38
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	3268      	adds	r2, #104	; 0x68
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	601a      	str	r2, [r3, #0]
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	333c      	adds	r3, #60	; 0x3c
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	3264      	adds	r2, #100	; 0x64
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	601a      	str	r2, [r3, #0]
        }
        else {
            ret = esp_sha256_digest_process(sha256, 1);
        }
    #else
        ret = XTRANSFORM(sha256, (const byte*)local);
 8007054:	68f9      	ldr	r1, [r7, #12]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff fb32 	bl	80066c0 <Transform_Sha256>
 800705c:	60b8      	str	r0, [r7, #8]
    #endif

        return ret;
 800705e:	68bb      	ldr	r3, [r7, #8]
    }
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha256 == NULL || hash == NULL) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <wc_Sha256Final+0x16>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <wc_Sha256Final+0x1c>
            return BAD_FUNC_ARG;
 800707e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8007082:	e018      	b.n	80070b6 <wc_Sha256Final+0x4e>
                                            WC_SHA256_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ff70 	bl	8006f6a <Sha256Final>
 800708a:	60f8      	str	r0, [r7, #12]
        if (ret != 0) {
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <wc_Sha256Final+0x2e>
            return ret;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	e00f      	b.n	80070b6 <wc_Sha256Final+0x4e>
        }

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff fa70 	bl	8006582 <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	4619      	mov	r1, r3
 80070a8:	6838      	ldr	r0, [r7, #0]
 80070aa:	f004 fcf5 	bl	800ba98 <memcpy>

        return InitSha256(sha256);  /* reset state */
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fa9e 	bl	80065f0 <InitSha256>
 80070b4:	4603      	mov	r3, r0
    }
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <wc_InitSha256>:
#endif /* WOLFSSL_SHA224 */
#endif /* !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH) */


int wc_InitSha256(wc_Sha256* sha256)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
    int devId = INVALID_DEVID;
 80070c6:	f06f 0301 	mvn.w	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]

#ifdef WOLF_CRYPTO_CB
    devId = wc_CryptoCb_DefaultDevID();
#endif
    return wc_InitSha256_ex(sha256, NULL, devId);
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fad5 	bl	8006680 <wc_InitSha256_ex>
 80070d6:	4603      	mov	r3, r0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <wc_Sha256Free>:

#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
    if (sha256 == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
    }
    else {
        ESP_LOGV(TAG, "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
}
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <ForceZero>:
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 8007104:	e004      	b.n	8007110 <ForceZero+0x1a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	60fa      	str	r2, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	1e5a      	subs	r2, r3, #1
 8007114:	603a      	str	r2, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f5      	bne.n	8007106 <ForceZero+0x10>
}
 800711a:	bf00      	nop
 800711c:	bf00      	nop
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <fp_add>:


/* Functions */

int fp_add(fp_int *a, fp_int *b, fp_int *c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  int sa, sb;
  int ret = FP_OKAY;
 8007134:	2300      	movs	r3, #0
 8007136:	61fb      	str	r3, [r7, #28]

  /* get sign of both inputs */
  sa = a->sign;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	61bb      	str	r3, [r7, #24]
  sb = b->sign;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	617b      	str	r3, [r7, #20]

  /* handle two cases, not four */
  if (sa == sb) {
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	429a      	cmp	r2, r3
 800714a:	d109      	bne.n	8007160 <fp_add+0x38>
    /* both positive or both negative */
    /* add their magnitudes, copy the sign */
    c->sign = sa;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	605a      	str	r2, [r3, #4]
    ret = s_fp_add (a, b, c);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f820 	bl	800719c <s_fp_add>
 800715c:	61f8      	str	r0, [r7, #28]
 800715e:	e018      	b.n	8007192 <fp_add+0x6a>
  } else {
    /* one positive, the other negative */
    /* subtract the one with the greater magnitude from */
    /* the one of the lesser magnitude.  The result gets */
    /* the sign of the one with the greater magnitude. */
    if (fp_cmp_mag (a, b) == FP_LT) {
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f002 ff56 	bl	800a014 <fp_cmp_mag>
 8007168:	4603      	mov	r3, r0
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d108      	bne.n	8007182 <fp_add+0x5a>
      c->sign = sb;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	605a      	str	r2, [r3, #4]
      s_fp_sub (b, a, c);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68f9      	ldr	r1, [r7, #12]
 800717a:	68b8      	ldr	r0, [r7, #8]
 800717c:	f000 f8f0 	bl	8007360 <s_fp_sub>
 8007180:	e007      	b.n	8007192 <fp_add+0x6a>
    } else {
      c->sign = sa;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	605a      	str	r2, [r3, #4]
      s_fp_sub (a, b, c);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f8e7 	bl	8007360 <s_fp_sub>
    }
  }

  return ret;
 8007192:	69fb      	ldr	r3, [r7, #28]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3720      	adds	r7, #32
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <s_fp_add>:

/* unsigned addition */
int s_fp_add(fp_int *a, fp_int *b, fp_int *c)
{
 800719c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80071a0:	b08d      	sub	sp, #52	; 0x34
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6178      	str	r0, [r7, #20]
 80071a6:	6139      	str	r1, [r7, #16]
 80071a8:	60fa      	str	r2, [r7, #12]
  int      x, y, oldused;
  fp_word  t;

  y       = MAX(a->used, b->used);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4293      	cmp	r3, r2
 80071b4:	bfb8      	it	lt
 80071b6:	4613      	movlt	r3, r2
 80071b8:	61fb      	str	r3, [r7, #28]
  oldused = MIN(c->used, FP_SIZE);   /* help static analysis w/ largest size */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b88      	cmp	r3, #136	; 0x88
 80071c0:	bfa8      	it	ge
 80071c2:	2388      	movge	r3, #136	; 0x88
 80071c4:	61bb      	str	r3, [r7, #24]
  c->used = y;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	601a      	str	r2, [r3, #0]

  t = 0;
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (x = 0; x < y; x++) {
 80071d8:	2300      	movs	r3, #0
 80071da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071dc:	e030      	b.n	8007240 <s_fp_add+0xa4>
      t         += ((fp_word)a->dp[x]) + ((fp_word)b->dp[x]);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e2:	3202      	adds	r2, #2
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	2200      	movs	r2, #0
 80071ea:	4698      	mov	r8, r3
 80071ec:	4691      	mov	r9, r2
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f2:	3202      	adds	r2, #2
 80071f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f8:	2200      	movs	r2, #0
 80071fa:	469a      	mov	sl, r3
 80071fc:	4693      	mov	fp, r2
 80071fe:	eb18 040a 	adds.w	r4, r8, sl
 8007202:	eb49 050b 	adc.w	r5, r9, fp
 8007206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800720a:	1911      	adds	r1, r2, r4
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	416b      	adcs	r3, r5
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007216:	e9c7 2308 	strd	r2, r3, [r7, #32]
      c->dp[x]   = (fp_digit)t;
 800721a:	6a39      	ldr	r1, [r7, #32]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007220:	3202      	adds	r2, #2
 8007222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      t        >>= DIGIT_BIT;
 8007226:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	000a      	movs	r2, r1
 8007234:	2300      	movs	r3, #0
 8007236:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (x = 0; x < y; x++) {
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	3301      	adds	r3, #1
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	429a      	cmp	r2, r3
 8007246:	dbca      	blt.n	80071de <s_fp_add+0x42>
  }
  if (t != 0) {
 8007248:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800724c:	4313      	orrs	r3, r2
 800724e:	d012      	beq.n	8007276 <s_fp_add+0xda>
     if (x == FP_SIZE)
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2b88      	cmp	r3, #136	; 0x88
 8007254:	d102      	bne.n	800725c <s_fp_add+0xc0>
         return FP_VAL;
 8007256:	f04f 33ff 	mov.w	r3, #4294967295
 800725a:	e03b      	b.n	80072d4 <s_fp_add+0x138>
     c->dp[c->used++] = (fp_digit)t;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	6011      	str	r1, [r2, #0]
 8007266:	6a39      	ldr	r1, [r7, #32]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	3302      	adds	r3, #2
 800726c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     ++x;
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	3301      	adds	r3, #1
 8007274:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  c->used = x;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727a:	601a      	str	r2, [r3, #0]

  /* zero any excess digits on the destination that we didn't write to */
  for (; x < oldused; x++) {
 800727c:	e008      	b.n	8007290 <s_fp_add+0xf4>
     c->dp[x] = 0;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007282:	3202      	adds	r2, #2
 8007284:	2100      	movs	r1, #0
 8007286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; x < oldused; x++) {
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	3301      	adds	r3, #1
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	dbf2      	blt.n	800727e <s_fp_add+0xe2>
  }
  fp_clamp(c);
 8007298:	e004      	b.n	80072a4 <s_fp_add+0x108>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <s_fp_add+0x122>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	1e5a      	subs	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3202      	adds	r2, #2
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0ed      	beq.n	800729a <s_fp_add+0xfe>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <s_fp_add+0x130>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	e000      	b.n	80072ce <s_fp_add+0x132>
 80072cc:	2300      	movs	r3, #0
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	6053      	str	r3, [r2, #4]
  return FP_OKAY;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3734      	adds	r7, #52	; 0x34
 80072d8:	46bd      	mov	sp, r7
 80072da:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80072de:	4770      	bx	lr

080072e0 <fp_sub>:

/* c = a - b */
int fp_sub(fp_int *a, fp_int *b, fp_int *c)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  int sa, sb;
  int ret = FP_OKAY;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61fb      	str	r3, [r7, #28]

  sa = a->sign;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	61bb      	str	r3, [r7, #24]
  sb = b->sign;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	617b      	str	r3, [r7, #20]

  if (sa != sb) {
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	429a      	cmp	r2, r3
 8007302:	d009      	beq.n	8007318 <fp_sub+0x38>
    /* subtract a negative from a positive, OR */
    /* subtract a positive from a negative. */
    /* In either case, ADD their magnitudes, */
    /* and use the sign of the first number. */
    c->sign = sa;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	605a      	str	r2, [r3, #4]
    ret = s_fp_add (a, b, c);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff44 	bl	800719c <s_fp_add>
 8007314:	61f8      	str	r0, [r7, #28]
 8007316:	e01e      	b.n	8007356 <fp_sub+0x76>
  } else {
    /* subtract a positive from a positive, OR */
    /* subtract a negative from a negative. */
    /* First, take the difference between their */
    /* magnitudes, then... */
    if (fp_cmp_mag (a, b) != FP_LT) {
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f002 fe7a 	bl	800a014 <fp_cmp_mag>
 8007320:	4603      	mov	r3, r0
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d008      	beq.n	800733a <fp_sub+0x5a>
      /* Copy the sign from the first */
      c->sign = sa;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	605a      	str	r2, [r3, #4]
      /* The first has a larger or equal magnitude */
      s_fp_sub (a, b, c);
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f814 	bl	8007360 <s_fp_sub>
 8007338:	e00d      	b.n	8007356 <fp_sub+0x76>
    } else {
      /* The result has the *opposite* sign from */
      /* the first number. */
      c->sign = (sa == FP_ZPOS) ? FP_NEG : FP_ZPOS;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	bf0c      	ite	eq
 8007340:	2301      	moveq	r3, #1
 8007342:	2300      	movne	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	605a      	str	r2, [r3, #4]
      /* The second has a larger magnitude */
      s_fp_sub (b, a, c);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	68b8      	ldr	r0, [r7, #8]
 8007352:	f000 f805 	bl	8007360 <s_fp_sub>
    }
  }
  return ret;
 8007356:	69fb      	ldr	r3, [r7, #28]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <s_fp_sub>:

/* unsigned subtraction ||a|| >= ||b|| ALWAYS! */
void s_fp_sub(fp_int *a, fp_int *b, fp_int *c)
{
 8007360:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007364:	b095      	sub	sp, #84	; 0x54
 8007366:	af00      	add	r7, sp, #0
 8007368:	6378      	str	r0, [r7, #52]	; 0x34
 800736a:	6339      	str	r1, [r7, #48]	; 0x30
 800736c:	62fa      	str	r2, [r7, #44]	; 0x2c
  int      x, oldbused, oldused;
  fp_word  t;

  oldused  = c->used;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
  oldbused = b->used;
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
  c->used  = a->used;
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	601a      	str	r2, [r3, #0]
  t       = 0;
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (x = 0; x < oldbused; x++) {
 800738e:	2300      	movs	r3, #0
 8007390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007392:	e03d      	b.n	8007410 <s_fp_sub+0xb0>
     t         = ((fp_word)a->dp[x]) - (((fp_word)b->dp[x]) + t);
 8007394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	3302      	adds	r3, #2
 800739a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739e:	2200      	movs	r2, #0
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	61fa      	str	r2, [r7, #28]
 80073a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a8:	3302      	adds	r3, #2
 80073aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ae:	2200      	movs	r2, #0
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	627a      	str	r2, [r7, #36]	; 0x24
 80073b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073b8:	6a39      	ldr	r1, [r7, #32]
 80073ba:	188c      	adds	r4, r1, r2
 80073bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073be:	eb41 0503 	adc.w	r5, r1, r3
 80073c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073c6:	460b      	mov	r3, r1
 80073c8:	1b1b      	subs	r3, r3, r4
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	4613      	mov	r3, r2
 80073ce:	eb63 0305 	sbc.w	r3, r3, r5
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
     c->dp[x]  = (fp_digit)t;
 80073dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e2:	3302      	adds	r3, #2
 80073e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 80073e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073ec:	f04f 0000 	mov.w	r0, #0
 80073f0:	f04f 0100 	mov.w	r1, #0
 80073f4:	0018      	movs	r0, r3
 80073f6:	2100      	movs	r1, #0
 80073f8:	f000 0301 	and.w	r3, r0, #1
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007406:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (x = 0; x < oldbused; x++) {
 800740a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740c:	3301      	adds	r3, #1
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	429a      	cmp	r2, r3
 8007416:	dbbd      	blt.n	8007394 <s_fp_sub+0x34>
  }
  for (; x < a->used; x++) {
 8007418:	e029      	b.n	800746e <s_fp_sub+0x10e>
     t         = ((fp_word)a->dp[x]) - t;
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800741e:	3202      	adds	r2, #2
 8007420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007424:	2200      	movs	r2, #0
 8007426:	4698      	mov	r8, r3
 8007428:	4691      	mov	r9, r2
 800742a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800742e:	ebb8 0a02 	subs.w	sl, r8, r2
 8007432:	eb69 0b03 	sbc.w	fp, r9, r3
 8007436:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
     c->dp[x]  = (fp_digit)t;
 800743a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007440:	3202      	adds	r2, #2
 8007442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
     t         = (t >> DIGIT_BIT)&1;
 8007446:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	000a      	movs	r2, r1
 8007454:	2300      	movs	r3, #0
 8007456:	f002 0301 	and.w	r3, r2, #1
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	2300      	movs	r3, #0
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007464:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  for (; x < a->used; x++) {
 8007468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746a:	3301      	adds	r3, #1
 800746c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007474:	429a      	cmp	r2, r3
 8007476:	dbd0      	blt.n	800741a <s_fp_sub+0xba>
   }

  /* zero any excess digits on the destination that we didn't write to */
  for (; x < oldused; x++) {
 8007478:	e008      	b.n	800748c <s_fp_sub+0x12c>
     c->dp[x] = 0;
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800747e:	3202      	adds	r2, #2
 8007480:	2100      	movs	r1, #0
 8007482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; x < oldused; x++) {
 8007486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007488:	3301      	adds	r3, #1
 800748a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800748c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800748e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007490:	429a      	cmp	r2, r3
 8007492:	dbf2      	blt.n	800747a <s_fp_sub+0x11a>
  }
  fp_clamp(c);
 8007494:	e004      	b.n	80074a0 <s_fp_sub+0x140>
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	1e5a      	subs	r2, r3, #1
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <s_fp_sub+0x15a>
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	1e5a      	subs	r2, r3, #1
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	3202      	adds	r2, #2
 80074b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ed      	beq.n	8007496 <s_fp_sub+0x136>
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <s_fp_sub+0x168>
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	e000      	b.n	80074ca <s_fp_sub+0x16a>
 80074c8:	2300      	movs	r3, #0
 80074ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074cc:	6053      	str	r3, [r2, #4]
}
 80074ce:	bf00      	nop
 80074d0:	3754      	adds	r7, #84	; 0x54
 80074d2:	46bd      	mov	sp, r7
 80074d4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80074d8:	4770      	bx	lr

080074da <fp_mul>:

/* c = a * b */
int fp_mul(fp_int *A, fp_int *B, fp_int *C)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
    int   ret = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
   !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI)
  ret = esp_mp_mul(A, B, C);
  if(ret != -2) return ret;
#endif

    oldused = C->used;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]

    y  = MAX(A->used, B->used);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfb8      	it	lt
 80074fc:	4613      	movlt	r3, r2
 80074fe:	61bb      	str	r3, [r7, #24]
    yy = MIN(A->used, B->used);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4293      	cmp	r3, r2
 800750a:	bfa8      	it	ge
 800750c:	4613      	movge	r3, r2
 800750e:	613b      	str	r3, [r7, #16]

    /* fail if we are out of range */
    if (y + yy >= FP_SIZE) {
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4413      	add	r3, r2
 8007516:	2b87      	cmp	r3, #135	; 0x87
 8007518:	dd03      	ble.n	8007522 <fp_mul+0x48>
       ret = FP_VAL;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295
 800751e:	61fb      	str	r3, [r7, #28]
       goto clean;
 8007520:	e005      	b.n	800752e <fp_mul+0x54>
        if (yy >= 56 && y <= 64) {
           ret = fp_mul_comba64(A,B,C);
           goto clean;
        }
#endif
        ret = fp_mul_comba(A,B,C);
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f9b0 	bl	800788c <fp_mul_comba>
 800752c:	61f8      	str	r0, [r7, #28]

clean:
    /* zero any excess digits on the destination that we didn't write to */
    for (y = C->used; y >= 0 && y < oldused; y++) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	e008      	b.n	8007548 <fp_mul+0x6e>
        C->dp[y] = 0;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	3202      	adds	r2, #2
 800753c:	2100      	movs	r1, #0
 800753e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (y = C->used; y >= 0 && y < oldused; y++) {
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	3301      	adds	r3, #1
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	db03      	blt.n	8007556 <fp_mul+0x7c>
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	429a      	cmp	r2, r3
 8007554:	dbef      	blt.n	8007536 <fp_mul+0x5c>
    }

    return ret;
 8007556:	69fb      	ldr	r3, [r7, #28]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <fp_mul_2>:

int fp_mul_2(fp_int * a, fp_int * b)
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	; 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  int     x, oldused;

  /* Make sure value to double and result are in range. */
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b87      	cmp	r3, #135	; 0x87
 8007570:	dc08      	bgt.n	8007584 <fp_mul_2+0x24>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b87      	cmp	r3, #135	; 0x87
 8007578:	d107      	bne.n	800758a <fp_mul_2+0x2a>
              ((a->dp[FP_SIZE - 1] & ((fp_digit)1 << (DIGIT_BIT - 1))) != 0))) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
  if ((a->used > (FP_SIZE-1)) || ((a->used == (FP_SIZE - 1)) &&
 8007580:	2b00      	cmp	r3, #0
 8007582:	da02      	bge.n	800758a <fp_mul_2+0x2a>
    return FP_VAL;
 8007584:	f04f 33ff 	mov.w	r3, #4294967295
 8007588:	e052      	b.n	8007630 <fp_mul_2+0xd0>
  }

  oldused = b->used;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
  b->used = a->used;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	601a      	str	r2, [r3, #0]

  {
    fp_digit r, rr, *tmpa, *tmpb;

    /* alias for source */
    tmpa = a->dp;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3308      	adds	r3, #8
 800759c:	617b      	str	r3, [r7, #20]

    /* alias for dest */
    tmpb = b->dp;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	613b      	str	r3, [r7, #16]

    /* carry */
    r = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61bb      	str	r3, [r7, #24]
    for (x = 0; x < a->used; x++) {
 80075a8:	2300      	movs	r3, #0
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e013      	b.n	80075d6 <fp_mul_2+0x76>

      /* get what will be the *next* carry bit from the
       * MSB of the current digit
       */
      rr = *tmpa >> ((fp_digit)(DIGIT_BIT - 1));
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0fdb      	lsrs	r3, r3, #31
 80075b4:	60bb      	str	r3, [r7, #8]

      /* now shift up this digit, add in the carry [from the previous] */
      *tmpb++ = ((*tmpa++ << ((fp_digit)1)) | r);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	1d1a      	adds	r2, r3, #4
 80075ba:	617a      	str	r2, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	0059      	lsls	r1, r3, #1
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	613a      	str	r2, [r7, #16]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]

      /* copy the carry that would be from the source
       * digit into the next iteration
       */
      r = rr;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	61bb      	str	r3, [r7, #24]
    for (x = 0; x < a->used; x++) {
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	3301      	adds	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	429a      	cmp	r2, r3
 80075de:	dbe6      	blt.n	80075ae <fp_mul_2+0x4e>
    }

    /* new leading digit? */
    if (r != 0) {
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <fp_mul_2+0x96>
      /* add a MSB which is always 1 at this point */
      *tmpb = 1;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
      ++(b->used);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	601a      	str	r2, [r3, #0]
    }

    /* zero any excess digits on the destination that we didn't write to */
    tmpb = b->dp + b->used;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	f103 0208 	add.w	r2, r3, #8
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
    for (x = b->used; x < oldused; x++) {
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e007      	b.n	800761e <fp_mul_2+0xbe>
      *tmpb++ = 0;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	613a      	str	r2, [r7, #16]
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
    for (x = b->used; x < oldused; x++) {
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	3301      	adds	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	429a      	cmp	r2, r3
 8007624:	dbf3      	blt.n	800760e <fp_mul_2+0xae>
    }
  }
  b->sign = a->sign;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	605a      	str	r2, [r3, #4]

  return FP_OKAY;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3724      	adds	r7, #36	; 0x24
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <fp_mul_d>:

/* c = a * b */
int fp_mul_d(fp_int *a, fp_digit b, fp_int *c)
{
 800763c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007640:	b08b      	sub	sp, #44	; 0x2c
 8007642:	af00      	add	r7, sp, #0
 8007644:	6178      	str	r0, [r7, #20]
 8007646:	6139      	str	r1, [r7, #16]
 8007648:	60fa      	str	r2, [r7, #12]
   fp_word  w;
   int      x, oldused;

   oldused = c->used;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
   c->used = a->used;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]
   c->sign = a->sign;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	605a      	str	r2, [r3, #4]
   w       = 0;
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for (x = 0; x < a->used; x++) {
 800766c:	2300      	movs	r3, #0
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	e031      	b.n	80076d6 <fp_mul_d+0x9a>
       w         = ((fp_word)a->dp[x]) * ((fp_word)b) + w;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	3202      	adds	r2, #2
 8007678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767c:	2200      	movs	r2, #0
 800767e:	4698      	mov	r8, r3
 8007680:	4691      	mov	r9, r2
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2200      	movs	r2, #0
 8007686:	469a      	mov	sl, r3
 8007688:	4693      	mov	fp, r2
 800768a:	fb0a f209 	mul.w	r2, sl, r9
 800768e:	fb08 f30b 	mul.w	r3, r8, fp
 8007692:	4413      	add	r3, r2
 8007694:	fba8 450a 	umull	r4, r5, r8, sl
 8007698:	442b      	add	r3, r5
 800769a:	461d      	mov	r5, r3
 800769c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076a0:	1911      	adds	r1, r2, r4
 80076a2:	6039      	str	r1, [r7, #0]
 80076a4:	416b      	adcs	r3, r5
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
       c->dp[x]  = (fp_digit)w;
 80076b0:	6a39      	ldr	r1, [r7, #32]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	3202      	adds	r2, #2
 80076b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       w         = w >> DIGIT_BIT;
 80076bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	000a      	movs	r2, r1
 80076ca:	2300      	movs	r3, #0
 80076cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
   for (x = 0; x < a->used; x++) {
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	3301      	adds	r3, #1
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	429a      	cmp	r2, r3
 80076de:	dbc8      	blt.n	8007672 <fp_mul_d+0x36>
   }
   if (w != 0) {
 80076e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	d01d      	beq.n	8007724 <fp_mul_d+0xe8>
      if (a->used == FP_SIZE)
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b88      	cmp	r3, #136	; 0x88
 80076ee:	d102      	bne.n	80076f6 <fp_mul_d+0xba>
          return FP_VAL;
 80076f0:	f04f 33ff 	mov.w	r3, #4294967295
 80076f4:	e03b      	b.n	800776e <fp_mul_d+0x132>
      c->dp[c->used++] = (fp_digit) w;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	6011      	str	r1, [r2, #0]
 8007700:	6a39      	ldr	r1, [r7, #32]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	3302      	adds	r3, #2
 8007706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      ++x;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3301      	adds	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
   }

   /* zero any excess digits on the destination that we didn't write to */
   /* also checking FP_SIZE here for static analysis */
   for (; x < oldused && x < FP_SIZE; x++) {
 8007710:	e008      	b.n	8007724 <fp_mul_d+0xe8>
      c->dp[x] = 0;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	3202      	adds	r2, #2
 8007718:	2100      	movs	r1, #0
 800771a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (; x < oldused && x < FP_SIZE; x++) {
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	3301      	adds	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	da08      	bge.n	800773e <fp_mul_d+0x102>
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b87      	cmp	r3, #135	; 0x87
 8007730:	ddef      	ble.n	8007712 <fp_mul_d+0xd6>
   }

   fp_clamp(c);
 8007732:	e004      	b.n	800773e <fp_mul_d+0x102>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	1e5a      	subs	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <fp_mul_d+0x11c>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	1e5a      	subs	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3202      	adds	r2, #2
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ed      	beq.n	8007734 <fp_mul_d+0xf8>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <fp_mul_d+0x12a>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	e000      	b.n	8007768 <fp_mul_d+0x12c>
 8007766:	2300      	movs	r3, #0
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	372c      	adds	r7, #44	; 0x2c
 8007772:	46bd      	mov	sp, r7
 8007774:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007778:	4770      	bx	lr

0800777a <fp_mul_2d>:

/* c = a * 2**d */
int fp_mul_2d(fp_int *a, int b, fp_int *c)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b08a      	sub	sp, #40	; 0x28
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
   fp_digit carry, carrytmp, shift;
   int x;

   /* copy it */
   fp_copy(a, c);
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f003 fa45 	bl	800ac18 <fp_copy>

   /* handle whole digits */
   if (b >= DIGIT_BIT) {
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b1f      	cmp	r3, #31
 8007792:	dd0e      	ble.n	80077b2 <fp_mul_2d+0x38>
      int ret = fp_lshd(c, b/DIGIT_BIT);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	da00      	bge.n	800779c <fp_mul_2d+0x22>
 800779a:	331f      	adds	r3, #31
 800779c:	115b      	asrs	r3, r3, #5
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 ff70 	bl	800a686 <fp_lshd>
 80077a6:	61f8      	str	r0, [r7, #28]
      if (ret != FP_OKAY)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <fp_mul_2d+0x38>
         return ret;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	e068      	b.n	8007884 <fp_mul_2d+0x10a>
   }
   b %= DIGIT_BIT;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	425a      	negs	r2, r3
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	f002 021f 	and.w	r2, r2, #31
 80077be:	bf58      	it	pl
 80077c0:	4253      	negpl	r3, r2
 80077c2:	60bb      	str	r3, [r7, #8]

   /* shift the digits */
   if (b != 0) {
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d044      	beq.n	8007854 <fp_mul_2d+0xda>
      carry = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
      shift = DIGIT_BIT - b;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	f1c3 0320 	rsb	r3, r3, #32
 80077d4:	61bb      	str	r3, [r7, #24]
      for (x = 0; x < c->used; x++) {
 80077d6:	2300      	movs	r3, #0
 80077d8:	623b      	str	r3, [r7, #32]
 80077da:	e01b      	b.n	8007814 <fp_mul_2d+0x9a>
          carrytmp = c->dp[x] >> shift;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a3a      	ldr	r2, [r7, #32]
 80077e0:	3202      	adds	r2, #2
 80077e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	fa22 f303 	lsr.w	r3, r2, r3
 80077ec:	617b      	str	r3, [r7, #20]
          c->dp[x] = (c->dp[x] << b) + carry;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	3202      	adds	r2, #2
 80077f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	409a      	lsls	r2, r3
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	18d1      	adds	r1, r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a3a      	ldr	r2, [r7, #32]
 8007804:	3202      	adds	r2, #2
 8007806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          carry = carrytmp;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
      for (x = 0; x < c->used; x++) {
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	3301      	adds	r3, #1
 8007812:	623b      	str	r3, [r7, #32]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6a3a      	ldr	r2, [r7, #32]
 800781a:	429a      	cmp	r2, r3
 800781c:	dbde      	blt.n	80077dc <fp_mul_2d+0x62>
      }
      /* store last carry if room */
      if (carry && x < FP_SIZE) {
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00c      	beq.n	800783e <fp_mul_2d+0xc4>
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	2b87      	cmp	r3, #135	; 0x87
 8007828:	dc09      	bgt.n	800783e <fp_mul_2d+0xc4>
         c->dp[c->used++] = carry;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6011      	str	r1, [r2, #0]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	3302      	adds	r3, #2
 8007838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800783a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      if (x == FP_SIZE)
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	2b88      	cmp	r3, #136	; 0x88
 8007842:	d107      	bne.n	8007854 <fp_mul_2d+0xda>
         return FP_VAL;
 8007844:	f04f 33ff 	mov.w	r3, #4294967295
 8007848:	e01c      	b.n	8007884 <fp_mul_2d+0x10a>
   }
   fp_clamp(c);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <fp_mul_2d+0xf4>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	1e5a      	subs	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3202      	adds	r2, #2
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0ed      	beq.n	800784a <fp_mul_2d+0xd0>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <fp_mul_2d+0x102>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	e000      	b.n	800787e <fp_mul_2d+0x104>
 800787c:	2300      	movs	r3, #0
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6053      	str	r3, [r2, #4]
   return FP_OKAY;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3728      	adds	r7, #40	; 0x28
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <fp_mul_comba>:
  return FP_OKAY;
}
#endif

int fp_mul_comba(fp_int *A, fp_int *B, fp_int *C)
{
 800788c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007890:	b0a0      	sub	sp, #128	; 0x80
 8007892:	af00      	add	r7, sp, #0
 8007894:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007896:	62b9      	str	r1, [r7, #40]	; 0x28
 8007898:	627a      	str	r2, [r7, #36]	; 0x24
   int       ret = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	65fb      	str	r3, [r7, #92]	; 0x5c
   fp_int    tmp[1];
#else
   fp_int    *tmp;
#endif

   if (A->used + B->used >= FP_SIZE) return FP_VAL;
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4413      	add	r3, r2
 80078a8:	2b87      	cmp	r3, #135	; 0x87
 80078aa:	dd02      	ble.n	80078b2 <fp_mul_comba+0x26>
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295
 80078b0:	e0f2      	b.n	8007a98 <fp_mul_comba+0x20c>

   IF_HAVE_INTEL_MULX(ret = fp_mul_comba_mulx(A, B, C), return ret) ;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 80078b2:	f44f 700a 	mov.w	r0, #552	; 0x228
 80078b6:	f7fc fdd9 	bl	800446c <wolfSSL_Malloc>
 80078ba:	65b8      	str	r0, [r7, #88]	; 0x58
   if (tmp == NULL)
 80078bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <fp_mul_comba+0x3c>
       return FP_MEM;
 80078c2:	f06f 0301 	mvn.w	r3, #1
 80078c6:	e0e7      	b.n	8007a98 <fp_mul_comba+0x20c>
#endif

   COMBA_START;
   COMBA_CLEAR;
 80078c8:	2300      	movs	r3, #0
 80078ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80078cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d2:	673b      	str	r3, [r7, #112]	; 0x70

   /* get size of output and trim */
   pa = A->used + B->used;
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4413      	add	r3, r2
 80078de:	677b      	str	r3, [r7, #116]	; 0x74
   if (pa >= FP_SIZE) {
 80078e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e2:	2b87      	cmp	r3, #135	; 0x87
 80078e4:	dd01      	ble.n	80078ea <fp_mul_comba+0x5e>
      pa = FP_SIZE-1;
 80078e6:	2387      	movs	r3, #135	; 0x87
 80078e8:	677b      	str	r3, [r7, #116]	; 0x74
   }

   /* Always take branch to use tmp variable. This avoids a cache attack for
    * determining if C equals A */
   if (1) {
      fp_init(tmp);
 80078ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80078ec:	f003 f816 	bl	800a91c <fp_init>
      dst = tmp;
 80078f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078f2:	657b      	str	r3, [r7, #84]	; 0x54
   }

   for (ix = 0; ix < pa; ix++) {
 80078f4:	2300      	movs	r3, #0
 80078f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078f8:	e095      	b.n	8007a26 <fp_mul_comba+0x19a>
      /* get offsets into the two bignums */
      ty = MIN(ix, (B->used > 0 ? B->used - 1 : 0));
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	bfb8      	it	lt
 8007902:	2301      	movlt	r3, #1
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007908:	4293      	cmp	r3, r2
 800790a:	bfa8      	it	ge
 800790c:	4613      	movge	r3, r2
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tx = ix - ty;
 8007910:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	64bb      	str	r3, [r7, #72]	; 0x48

      /* setup temp aliases */
      tmpx = A->dp + tx;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	f103 0208 	add.w	r2, r3, #8
 800791e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	667b      	str	r3, [r7, #100]	; 0x64
      tmpy = B->dp + ty;
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	f103 0208 	add.w	r2, r3, #8
 800792c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	663b      	str	r3, [r7, #96]	; 0x60

      /* this is the number of times the loop will iterate, essentially its
         while (tx++ < a->used && ty-- >= 0) { ... }
       */
      iy = MIN(A->used-tx, ty+1);
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793e:	4293      	cmp	r3, r2
 8007940:	db04      	blt.n	800794c <fp_mul_comba+0xc0>
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	e001      	b.n	8007950 <fp_mul_comba+0xc4>
 800794c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800794e:	3301      	adds	r3, #1
 8007950:	647b      	str	r3, [r7, #68]	; 0x44

      /* execute loop */
      COMBA_FORWARD;
 8007952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007954:	673b      	str	r3, [r7, #112]	; 0x70
 8007956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800795a:	2300      	movs	r3, #0
 800795c:	66bb      	str	r3, [r7, #104]	; 0x68
      for (iz = 0; iz < iy; ++iz) {
 800795e:	2300      	movs	r3, #0
 8007960:	67bb      	str	r3, [r7, #120]	; 0x78
 8007962:	e053      	b.n	8007a0c <fp_mul_comba+0x180>
          fp_digit _tmpx = *tmpx++;
 8007964:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007966:	1d13      	adds	r3, r2, #4
 8007968:	667b      	str	r3, [r7, #100]	; 0x64
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	643b      	str	r3, [r7, #64]	; 0x40
          fp_digit _tmpy = *tmpy--;
 800796e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007970:	1f13      	subs	r3, r2, #4
 8007972:	663b      	str	r3, [r7, #96]	; 0x60
 8007974:	6813      	ldr	r3, [r2, #0]
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
          MULADD(_tmpx, _tmpy);
 8007978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800797a:	2200      	movs	r2, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	617a      	str	r2, [r7, #20]
 8007980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007982:	2200      	movs	r2, #0
 8007984:	4698      	mov	r8, r3
 8007986:	4691      	mov	r9, r2
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	2200      	movs	r2, #0
 800798c:	469a      	mov	sl, r3
 800798e:	4693      	mov	fp, r2
 8007990:	fb0a f209 	mul.w	r2, sl, r9
 8007994:	fb08 f30b 	mul.w	r3, r8, fp
 8007998:	4413      	add	r3, r2
 800799a:	fba8 450a 	umull	r4, r5, r8, sl
 800799e:	442b      	add	r3, r5
 80079a0:	461d      	mov	r5, r3
 80079a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079a6:	460b      	mov	r3, r1
 80079a8:	191b      	adds	r3, r3, r4
 80079aa:	60bb      	str	r3, [r7, #8]
 80079ac:	4613      	mov	r3, r2
 80079ae:	416b      	adcs	r3, r5
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	673b      	str	r3, [r7, #112]	; 0x70
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	2200      	movs	r2, #0
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	61fa      	str	r2, [r7, #28]
 80079c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80079ca:	f04f 0000 	mov.w	r0, #0
 80079ce:	f04f 0100 	mov.w	r1, #0
 80079d2:	0018      	movs	r0, r3
 80079d4:	2100      	movs	r1, #0
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	181b      	adds	r3, r3, r0
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	414b      	adcs	r3, r1
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f04f 0100 	mov.w	r1, #0
 80079fa:	0018      	movs	r0, r3
 80079fc:	2100      	movs	r1, #0
 80079fe:	4602      	mov	r2, r0
 8007a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a02:	4413      	add	r3, r2
 8007a04:	66bb      	str	r3, [r7, #104]	; 0x68
      for (iz = 0; iz < iy; ++iz) {
 8007a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a08:	3301      	adds	r3, #1
 8007a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a10:	429a      	cmp	r2, r3
 8007a12:	dba7      	blt.n	8007964 <fp_mul_comba+0xd8>
      }

      /* store term */
      COMBA_STORE(dst->dp[ix]);
 8007a14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a18:	1c9a      	adds	r2, r3, #2
 8007a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   for (ix = 0; ix < pa; ix++) {
 8007a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a22:	3301      	adds	r3, #1
 8007a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f6ff af65 	blt.w	80078fa <fp_mul_comba+0x6e>
  }
  COMBA_FINI;

  dst->used = pa;
 8007a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a34:	601a      	str	r2, [r3, #0]
  dst->sign = A->sign ^ B->sign;
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	405a      	eors	r2, r3
 8007a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a42:	605a      	str	r2, [r3, #4]
  fp_clamp(dst);
 8007a44:	e004      	b.n	8007a50 <fp_mul_comba+0x1c4>
 8007a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d008      	beq.n	8007a6a <fp_mul_comba+0x1de>
 8007a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a60:	3202      	adds	r2, #2
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ed      	beq.n	8007a46 <fp_mul_comba+0x1ba>
 8007a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <fp_mul_comba+0x1ec>
 8007a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	e000      	b.n	8007a7a <fp_mul_comba+0x1ee>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a7c:	6053      	str	r3, [r2, #4]
  fp_copy(dst, C);
 8007a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a82:	f003 f8c9 	bl	800ac18 <fp_copy>

  /* Variables used but not seen by cppcheck. */
  (void)c0; (void)c1; (void)c2;

#ifdef WOLFSSL_SMALL_STACK
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8007a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a88:	653b      	str	r3, [r7, #80]	; 0x50
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <fp_mul_comba+0x20a>
 8007a90:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007a92:	f7fc fd07 	bl	80044a4 <wolfSSL_Free>
#endif
  return ret;
 8007a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3780      	adds	r7, #128	; 0x80
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007aa2 <fp_div>:

/* a/b => cb + d == a */
int fp_div(fp_int *a, fp_int *b, fp_int *c, fp_int *d)
{
 8007aa2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa6:	b09e      	sub	sp, #120	; 0x78
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6178      	str	r0, [r7, #20]
 8007aac:	6139      	str	r1, [r7, #16]
 8007aae:	60fa      	str	r2, [r7, #12]
 8007ab0:	60bb      	str	r3, [r7, #8]
#else
  fp_int  *q, *x, *y, *t1, *t2;
#endif

  /* is divisor zero ? */
  if (fp_iszero (b) == FP_YES) {
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <fp_div+0x1e>
    return FP_VAL;
 8007aba:	f04f 33ff 	mov.w	r3, #4294967295
 8007abe:	e2c7      	b.n	8008050 <fp_div+0x5ae>
  }

  /* if a < b then q=0, r = a */
  if (fp_cmp_mag (a, b) == FP_LT)
 8007ac0:	6939      	ldr	r1, [r7, #16]
 8007ac2:	6978      	ldr	r0, [r7, #20]
 8007ac4:	f002 faa6 	bl	800a014 <fp_cmp_mag>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d10e      	bne.n	8007aee <fp_div+0x4c>
  {
    if (d != NULL) {
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <fp_div+0x3c>
      fp_copy (a, d);
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	6978      	ldr	r0, [r7, #20]
 8007ada:	f003 f89d 	bl	800ac18 <fp_copy>
    }
    if (c != NULL) {
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <fp_div+0x48>
      fp_zero (c);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f002 ff24 	bl	800a932 <fp_zero>
    }
    return FP_OKAY;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e2b0      	b.n	8008050 <fp_div+0x5ae>
  }

#ifdef WOLFSSL_SMALL_STACK          /* 0  1  2  3   4  */
  /* allocate 5 elements of fp_int for q, x, y, t1, t2 */
  q = (fp_int*)XMALLOC(sizeof(fp_int) * 5, NULL, DYNAMIC_TYPE_BIGINT);
 8007aee:	f640 20c8 	movw	r0, #2760	; 0xac8
 8007af2:	f7fc fcbb 	bl	800446c <wolfSSL_Malloc>
 8007af6:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (q == NULL) {
 8007af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <fp_div+0x62>
      return FP_MEM;
 8007afe:	f06f 0301 	mvn.w	r3, #1
 8007b02:	e2a5      	b.n	8008050 <fp_div+0x5ae>
  }
  x = &q[1]; y = &q[2]; t1 = &q[3]; t2 = &q[4];
 8007b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b06:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8007b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8007b12:	667b      	str	r3, [r7, #100]	; 0x64
 8007b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b16:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8007b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8007b22:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  fp_init(q);
 8007b24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b26:	f002 fef9 	bl	800a91c <fp_init>
  /* qb + d = a, and b is an integer > 0, therefore q <= a */
  q->used = a->used;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b30:	601a      	str	r2, [r3, #0]

  fp_init(t1);
 8007b32:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007b34:	f002 fef2 	bl	800a91c <fp_init>
  fp_init(t2);
 8007b38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007b3a:	f002 feef 	bl	800a91c <fp_init>
  ** Init a copy (x) of the input (a)
  **
  ** ALERT: Not calling fp_init_copy() as some compiler optimization settings
  ** such as -O2 will complain that (x) or (y) "may be used uninitialized".
  ** The fp_init() is here only to appease the compiler.  */
  fp_init(x);
 8007b3e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007b40:	f002 feec 	bl	800a91c <fp_init>
  fp_copy(a, x); /* copy (src = a) to (dst = x) */
 8007b44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b46:	6978      	ldr	r0, [r7, #20]
 8007b48:	f003 f866 	bl	800ac18 <fp_copy>

  fp_init(y);
 8007b4c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007b4e:	f002 fee5 	bl	800a91c <fp_init>
  fp_copy(b, y); /* copy (src = b) to (dst = y) */
 8007b52:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007b54:	6938      	ldr	r0, [r7, #16]
 8007b56:	f003 f85f 	bl	800ac18 <fp_copy>

  /* fix the sign */
  neg = (a->sign == b->sign) ? FP_ZPOS : FP_NEG;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	65bb      	str	r3, [r7, #88]	; 0x58
  x->sign = y->sign = FP_ZPOS;
 8007b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b70:	2200      	movs	r2, #0
 8007b72:	605a      	str	r2, [r3, #4]
 8007b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b7a:	605a      	str	r2, [r3, #4]

  /* normalize both x and y, ensure that y >= b/2, [b == 2**DIGIT_BIT] */
  norm = fp_count_bits(y) % DIGIT_BIT;
 8007b7c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007b7e:	f002 fd5a 	bl	800a636 <fp_count_bits>
 8007b82:	4603      	mov	r3, r0
 8007b84:	425a      	negs	r2, r3
 8007b86:	f003 031f 	and.w	r3, r3, #31
 8007b8a:	f002 021f 	and.w	r2, r2, #31
 8007b8e:	bf58      	it	pl
 8007b90:	4253      	negpl	r3, r2
 8007b92:	673b      	str	r3, [r7, #112]	; 0x70
  if (norm < (int)(DIGIT_BIT-1)) {
 8007b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b96:	2b1e      	cmp	r3, #30
 8007b98:	dc29      	bgt.n	8007bee <fp_div+0x14c>
    norm = (DIGIT_BIT-1) - norm;
 8007b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b9c:	f1c3 031f 	rsb	r3, r3, #31
 8007ba0:	673b      	str	r3, [r7, #112]	; 0x70
    ret = fp_mul_2d (x, norm, x);
 8007ba2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ba4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007ba6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007ba8:	f7ff fde7 	bl	800777a <fp_mul_2d>
 8007bac:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 8007bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <fp_div+0x126>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <fp_div+0x122>
 8007bbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007bc0:	f7fc fc70 	bl	80044a4 <wolfSSL_Free>
    #endif
      return ret;
 8007bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc6:	e243      	b.n	8008050 <fp_div+0x5ae>
    }
    ret = fp_mul_2d (y, norm, y);
 8007bc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007bcc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007bce:	f7ff fdd4 	bl	800777a <fp_mul_2d>
 8007bd2:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <fp_div+0x150>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8007bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <fp_div+0x148>
 8007be4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007be6:	f7fc fc5d 	bl	80044a4 <wolfSSL_Free>
    #endif
      return ret;
 8007bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bec:	e230      	b.n	8008050 <fp_div+0x5ae>
    }
  } else {
    norm = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	673b      	str	r3, [r7, #112]	; 0x70
  }

  /* note hac does 0 based, so if used==5 then its 0,1,2,3,4, e.g. use 4 */
  n = x->used - 1;
 8007bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  t = y->used - 1;
 8007bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	647b      	str	r3, [r7, #68]	; 0x44

  /* while (x >= y*b**n-t) do { q[n-t] += 1; x -= y*b**{n-t} } */
  ret = fp_lshd (y, n - t); /* y = y*b**{n-t} */
 8007c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007c0c:	f002 fd3b 	bl	800a686 <fp_lshd>
 8007c10:	6578      	str	r0, [r7, #84]	; 0x54
  if (ret != FP_OKAY) {
 8007c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d028      	beq.n	8007c6a <fp_div+0x1c8>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <fp_div+0x186>
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f7fc fc3e 	bl	80044a4 <wolfSSL_Free>
  #endif
    return ret;
 8007c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2a:	e211      	b.n	8008050 <fp_div+0x5ae>
  }

  while (fp_cmp (x, y) != FP_LT) {
    ++(q->dp[n - t]);
 8007c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c34:	1c99      	adds	r1, r3, #2
 8007c36:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007c3a:	1c51      	adds	r1, r2, #1
 8007c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c3e:	3302      	adds	r3, #2
 8007c40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    ret = fp_sub (x, y, x);
 8007c44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c48:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007c4a:	f7ff fb49 	bl	80072e0 <fp_sub>
 8007c4e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 8007c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <fp_div+0x1c8>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c58:	61fb      	str	r3, [r7, #28]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <fp_div+0x1c4>
 8007c60:	69f8      	ldr	r0, [r7, #28]
 8007c62:	f7fc fc1f 	bl	80044a4 <wolfSSL_Free>
    #endif
      return ret;
 8007c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c68:	e1f2      	b.n	8008050 <fp_div+0x5ae>
  while (fp_cmp (x, y) != FP_LT) {
 8007c6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007c6c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007c6e:	f002 f96c 	bl	8009f4a <fp_cmp>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d1d8      	bne.n	8007c2c <fp_div+0x18a>
    }
  }

  /* reset y by shifting it back down */
  fp_rshd (y, n - t);
 8007c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	4619      	mov	r1, r3
 8007c82:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007c84:	f002 fddf 	bl	800a846 <fp_rshd>

  /* step 3. for i from n down to (t + 1) */
  for (i = n; i >= (t + 1); i--) {
 8007c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8a:	677b      	str	r3, [r7, #116]	; 0x74
 8007c8c:	e165      	b.n	8007f5a <fp_div+0x4b8>
    if (i > x->used) {
 8007c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c94:	429a      	cmp	r2, r3
 8007c96:	f300 815c 	bgt.w	8007f52 <fp_div+0x4b0>
      continue;
    }

    /* step 3.1 if xi == yt then set q{i-t-1} to b-1,
     * otherwise set q{i-t-1} to (xi*b + x{i-1})/yt */
    if (x->dp[i] == y->dp[t]) {
 8007c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c9e:	3202      	adds	r2, #2
 8007ca0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ca8:	3102      	adds	r1, #2
 8007caa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d10a      	bne.n	8007cc8 <fp_div+0x226>
      q->dp[i - t - 1] = (fp_digit) ((((fp_word)1) << DIGIT_BIT) - 1);
 8007cb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbc:	3202      	adds	r2, #2
 8007cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8007cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007cc6:	e03b      	b.n	8007d40 <fp_div+0x29e>
    } else {
      fp_word tmp;
      tmp = ((fp_word) x->dp[i]) << ((fp_word) DIGIT_BIT);
 8007cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ccc:	3202      	adds	r2, #2
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	469a      	mov	sl, r3
 8007cd6:	4693      	mov	fp, r2
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	4653      	mov	r3, sl
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      tmp |= ((fp_word) x->dp[i - 1]);
 8007ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cee:	3202      	adds	r2, #2
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	4615      	mov	r5, r2
 8007cfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007cfe:	ea42 0804 	orr.w	r8, r2, r4
 8007d02:	ea43 0905 	orr.w	r9, r3, r5
 8007d06:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
#ifdef WOLFSSL_LINUXKM
      /* Linux kernel macro for in-place 64 bit integer division. */
      do_div(tmp, (fp_word)y->dp[t]);
#else
      tmp /= ((fp_word)y->dp[t]);
 8007d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d0e:	3202      	adds	r2, #2
 8007d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d14:	2200      	movs	r2, #0
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	607a      	str	r2, [r7, #4]
 8007d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007d22:	f7f8 faad 	bl	8000280 <__aeabi_uldivmod>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
#endif
      q->dp[i - t - 1] = (fp_digit) (tmp);
 8007d2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	1e5a      	subs	r2, r3, #1
 8007d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	3202      	adds	r2, #2
 8007d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* while (q{i-t-1} * (yt * b + y{t-1})) >
             xi * b**2 + xi-1 * b + xi-2

       do q{i-t-1} -= 1;
    */
    q->dp[i - t - 1] = (q->dp[i - t - 1] + 1);
 8007d40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	1e5a      	subs	r2, r3, #1
 8007d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4a:	3202      	adds	r2, #2
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d54:	1a8a      	subs	r2, r1, r2
 8007d56:	3a01      	subs	r2, #1
 8007d58:	1c59      	adds	r1, r3, #1
 8007d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    do {
      q->dp[i - t - 1] = (q->dp[i - t - 1] - 1);
 8007d62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	1e5a      	subs	r2, r3, #1
 8007d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6c:	3202      	adds	r2, #2
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d76:	1a8a      	subs	r2, r1, r2
 8007d78:	3a01      	subs	r2, #1
 8007d7a:	1e59      	subs	r1, r3, #1
 8007d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7e:	3202      	adds	r2, #2
 8007d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* find left hand */
      fp_zero (t1);
 8007d84:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007d86:	f002 fdd4 	bl	800a932 <fp_zero>
      t1->dp[0] = (t - 1 < 0) ? 0 : y->dp[t - 1];
 8007d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd06      	ble.n	8007d9e <fp_div+0x2fc>
 8007d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d92:	1e5a      	subs	r2, r3, #1
 8007d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d96:	3202      	adds	r2, #2
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	e000      	b.n	8007da0 <fp_div+0x2fe>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007da2:	6093      	str	r3, [r2, #8]
      t1->dp[1] = y->dp[t];
 8007da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007da8:	3202      	adds	r2, #2
 8007daa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db0:	60da      	str	r2, [r3, #12]
      t1->used = 2;
 8007db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db4:	2202      	movs	r2, #2
 8007db6:	601a      	str	r2, [r3, #0]
      ret = fp_mul_d (t1, q->dp[i - t - 1], t1);
 8007db8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	1e5a      	subs	r2, r3, #1
 8007dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc2:	3202      	adds	r2, #2
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007dce:	f7ff fc35 	bl	800763c <fp_mul_d>
 8007dd2:	6578      	str	r0, [r7, #84]	; 0x54
      if (ret != FP_OKAY) {
 8007dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <fp_div+0x34c>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ddc:	623b      	str	r3, [r7, #32]
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <fp_div+0x348>
 8007de4:	6a38      	ldr	r0, [r7, #32]
 8007de6:	f7fc fb5d 	bl	80044a4 <wolfSSL_Free>
      #endif
        return ret;
 8007dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dec:	e130      	b.n	8008050 <fp_div+0x5ae>
      }

      /* find right hand */
      t2->dp[0] = (i - 2 < 0) ? 0 : x->dp[i - 2];
 8007dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	dd06      	ble.n	8007e02 <fp_div+0x360>
 8007df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df6:	1e9a      	subs	r2, r3, #2
 8007df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dfa:	3202      	adds	r2, #2
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	e000      	b.n	8007e04 <fp_div+0x362>
 8007e02:	2300      	movs	r3, #0
 8007e04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e06:	6093      	str	r3, [r2, #8]
      t2->dp[1] = (i - 1 < 0) ? 0 : x->dp[i - 1];
 8007e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dd06      	ble.n	8007e1c <fp_div+0x37a>
 8007e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e10:	1e5a      	subs	r2, r3, #1
 8007e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e14:	3202      	adds	r2, #2
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	e000      	b.n	8007e1e <fp_div+0x37c>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e20:	60d3      	str	r3, [r2, #12]
      t2->dp[2] = x->dp[i];
 8007e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e26:	3202      	adds	r2, #2
 8007e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e2e:	611a      	str	r2, [r3, #16]
      t2->used = 3;
 8007e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e32:	2203      	movs	r2, #3
 8007e34:	601a      	str	r2, [r3, #0]
    } while (fp_cmp_mag(t1, t2) == FP_GT);
 8007e36:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007e38:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007e3a:	f002 f8eb 	bl	800a014 <fp_cmp_mag>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d08e      	beq.n	8007d62 <fp_div+0x2c0>

    /* step 3.3 x = x - q{i-t-1} * y * b**{i-t-1} */
    ret = fp_mul_d (y, q->dp[i - t - 1], t1);
 8007e44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	1e5a      	subs	r2, r3, #1
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	3202      	adds	r2, #2
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e56:	4619      	mov	r1, r3
 8007e58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007e5a:	f7ff fbef 	bl	800763c <fp_mul_d>
 8007e5e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 8007e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <fp_div+0x3d8>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <fp_div+0x3d4>
 8007e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e72:	f7fc fb17 	bl	80044a4 <wolfSSL_Free>
    #endif
      return ret;
 8007e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e78:	e0ea      	b.n	8008050 <fp_div+0x5ae>
    }
    ret = fp_lshd  (t1, i - t - 1);
 8007e7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	3b01      	subs	r3, #1
 8007e82:	4619      	mov	r1, r3
 8007e84:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007e86:	f002 fbfe 	bl	800a686 <fp_lshd>
 8007e8a:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 8007e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <fp_div+0x404>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <fp_div+0x400>
 8007e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9e:	f7fc fb01 	bl	80044a4 <wolfSSL_Free>
    #endif
      return ret;
 8007ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea4:	e0d4      	b.n	8008050 <fp_div+0x5ae>
    }
    ret = fp_sub   (x, t1, x);
 8007ea6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ea8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007eaa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007eac:	f7ff fa18 	bl	80072e0 <fp_sub>
 8007eb0:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != FP_OKAY) {
 8007eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <fp_div+0x42a>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <fp_div+0x426>
 8007ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec4:	f7fc faee 	bl	80044a4 <wolfSSL_Free>
    #endif
      return ret;
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	e0c1      	b.n	8008050 <fp_div+0x5ae>
    }

    /* if x < 0 then { x = x + y*b**{i-t-1}; q{i-t-1} -= 1; } */
    if (x->sign == FP_NEG) {
 8007ecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d13f      	bne.n	8007f54 <fp_div+0x4b2>
      fp_copy (y, t1);
 8007ed4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007ed6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007ed8:	f002 fe9e 	bl	800ac18 <fp_copy>
      ret = fp_lshd (t1, i - t - 1);
 8007edc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007ee8:	f002 fbcd 	bl	800a686 <fp_lshd>
 8007eec:	6578      	str	r0, [r7, #84]	; 0x54
      if (ret != FP_OKAY) {
 8007eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <fp_div+0x466>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <fp_div+0x462>
 8007efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f00:	f7fc fad0 	bl	80044a4 <wolfSSL_Free>
      #endif
        return ret;
 8007f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f06:	e0a3      	b.n	8008050 <fp_div+0x5ae>
      }
      ret = fp_add (x, t1, x);
 8007f08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007f0c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007f0e:	f7ff f90b 	bl	8007128 <fp_add>
 8007f12:	6578      	str	r0, [r7, #84]	; 0x54
      if (ret != FP_OKAY) {
 8007f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <fp_div+0x48c>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <fp_div+0x488>
 8007f24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f26:	f7fc fabd 	bl	80044a4 <wolfSSL_Free>
      #endif
        return ret;
 8007f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f2c:	e090      	b.n	8008050 <fp_div+0x5ae>
      }
      q->dp[i - t - 1] = q->dp[i - t - 1] - 1;
 8007f2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f38:	3202      	adds	r2, #2
 8007f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f42:	1a8a      	subs	r2, r1, r2
 8007f44:	3a01      	subs	r2, #1
 8007f46:	1e59      	subs	r1, r3, #1
 8007f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4a:	3202      	adds	r2, #2
 8007f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f50:	e000      	b.n	8007f54 <fp_div+0x4b2>
      continue;
 8007f52:	bf00      	nop
  for (i = n; i >= (t + 1); i--) {
 8007f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f56:	3b01      	subs	r3, #1
 8007f58:	677b      	str	r3, [r7, #116]	; 0x74
 8007f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	f6ff ae95 	blt.w	8007c8e <fp_div+0x1ec>
  /* now q is the quotient and x is the remainder
   * [which we have to normalize]
   */

  /* get sign before writing to c */
  x->sign = x->used == 0 ? FP_ZPOS : a->sign;
 8007f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <fp_div+0x4d0>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	e000      	b.n	8007f74 <fp_div+0x4d2>
 8007f72:	2300      	movs	r3, #0
 8007f74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f76:	6053      	str	r3, [r2, #4]

  if (c != NULL) {
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d023      	beq.n	8007fc6 <fp_div+0x524>
    fp_clamp (q);
 8007f7e:	e004      	b.n	8007f8a <fp_div+0x4e8>
 8007f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <fp_div+0x502>
 8007f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	1e5a      	subs	r2, r3, #1
 8007f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f9a:	3202      	adds	r2, #2
 8007f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0ed      	beq.n	8007f80 <fp_div+0x4de>
 8007fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <fp_div+0x510>
 8007fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	e000      	b.n	8007fb4 <fp_div+0x512>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fb6:	6053      	str	r3, [r2, #4]
    fp_copy (q, c);
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007fbc:	f002 fe2c 	bl	800ac18 <fp_copy>
    c->sign = neg;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fc4:	605a      	str	r2, [r3, #4]
  }

  if (d != NULL) {
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d038      	beq.n	800803e <fp_div+0x59c>
    fp_div_2d (x, norm, x, NULL);
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fd0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007fd2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007fd4:	f000 f8c2 	bl	800815c <fp_div_2d>

    /* zero any excess digits on the destination that we didn't write to */
    for (i = b->used; i < x->used; i++) {
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	677b      	str	r3, [r7, #116]	; 0x74
 8007fde:	e008      	b.n	8007ff2 <fp_div+0x550>
        x->dp[i] = 0;
 8007fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fe2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007fe4:	3202      	adds	r2, #2
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = b->used; i < x->used; i++) {
 8007fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fee:	3301      	adds	r3, #1
 8007ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8007ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	dbf1      	blt.n	8007fe0 <fp_div+0x53e>
    }
    fp_clamp(x);
 8007ffc:	e004      	b.n	8008008 <fp_div+0x566>
 8007ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <fp_div+0x580>
 8008010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008018:	3202      	adds	r2, #2
 800801a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0ed      	beq.n	8007ffe <fp_div+0x55c>
 8008022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <fp_div+0x58e>
 800802a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	e000      	b.n	8008032 <fp_div+0x590>
 8008030:	2300      	movs	r3, #0
 8008032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008034:	6053      	str	r3, [r2, #4]
    fp_copy (x, d);
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800803a:	f002 fded 	bl	800ac18 <fp_copy>
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(q, NULL, DYNAMIC_TYPE_BIGINT);
 800803e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008040:	643b      	str	r3, [r7, #64]	; 0x40
 8008042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <fp_div+0x5ac>
 8008048:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800804a:	f7fc fa2b 	bl	80044a4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3778      	adds	r7, #120	; 0x78
 8008054:	46bd      	mov	sp, r7
 8008056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800805a <fp_div_2>:

/* b = a/2 */
void fp_div_2(fp_int * a, fp_int * b)
{
 800805a:	b480      	push	{r7}
 800805c:	b089      	sub	sp, #36	; 0x24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  int     x, oldused;

  oldused = b->used;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	60fb      	str	r3, [r7, #12]
  b->used = a->used;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	601a      	str	r2, [r3, #0]
  {
    fp_digit r, rr, *tmpa, *tmpb;

    /* source alias */
    tmpa = a->dp + b->used - 1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f103 0208 	add.w	r2, r3, #8
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008080:	3b01      	subs	r3, #1
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

    /* dest alias */
    tmpb = b->dp + b->used - 1;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f103 0208 	add.w	r2, r3, #8
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008096:	3b01      	subs	r3, #1
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

    /* carry */
    r = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	61bb      	str	r3, [r7, #24]
    for (x = b->used - 1; x >= 0; x--) {
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
 80080aa:	e015      	b.n	80080d8 <fp_div_2+0x7e>
      /* get the carry for the next iteration */
      rr = *tmpa & 1;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	60bb      	str	r3, [r7, #8]

      /* shift the current digit, add in carry and store */
      *tmpb-- = (*tmpa-- >> 1) | (r << (DIGIT_BIT - 1));
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	1f1a      	subs	r2, r3, #4
 80080ba:	617a      	str	r2, [r7, #20]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	0859      	lsrs	r1, r3, #1
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	07da      	lsls	r2, r3, #31
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1f18      	subs	r0, r3, #4
 80080c8:	6138      	str	r0, [r7, #16]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	601a      	str	r2, [r3, #0]

      /* forward carry to next iteration */
      r = rr;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	61bb      	str	r3, [r7, #24]
    for (x = b->used - 1; x >= 0; x--) {
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dae6      	bge.n	80080ac <fp_div_2+0x52>
    }

    /* zero any excess digits on the destination that we didn't write to */
    tmpb = b->dp + b->used;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f103 0208 	add.w	r2, r3, #8
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
    for (x = b->used; x < oldused; x++) {
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	e007      	b.n	8008106 <fp_div_2+0xac>
      *tmpb++ = 0;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	613a      	str	r2, [r7, #16]
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
    for (x = b->used; x < oldused; x++) {
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	3301      	adds	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	dbf3      	blt.n	80080f6 <fp_div_2+0x9c>
    }
  }
  b->sign = a->sign;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	605a      	str	r2, [r3, #4]
  fp_clamp (b);
 8008116:	e004      	b.n	8008122 <fp_div_2+0xc8>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	1e5a      	subs	r2, r3, #1
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d008      	beq.n	800813c <fp_div_2+0xe2>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	1e5a      	subs	r2, r3, #1
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	3202      	adds	r2, #2
 8008134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0ed      	beq.n	8008118 <fp_div_2+0xbe>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <fp_div_2+0xf0>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	e000      	b.n	800814c <fp_div_2+0xf2>
 800814a:	2300      	movs	r3, #0
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	6053      	str	r3, [r2, #4]
}
 8008150:	bf00      	nop
 8008152:	3724      	adds	r7, #36	; 0x24
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <fp_div_2d>:
  return FP_OKAY;
}

/* c = a / 2**b */
void fp_div_2d(fp_int *a, int b, fp_int *c, fp_int *d)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  int      D;

  /* if the shift count is <= 0 then we do no work */
  if (b <= 0) {
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dc0a      	bgt.n	8008186 <fp_div_2d+0x2a>
    fp_copy (a, c);
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f002 fd50 	bl	800ac18 <fp_copy>
    if (d != NULL) {
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d059      	beq.n	8008232 <fp_div_2d+0xd6>
      fp_zero (d);
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f002 fbd7 	bl	800a932 <fp_zero>
    }
    return;
 8008184:	e055      	b.n	8008232 <fp_div_2d+0xd6>
  }

  /* get the remainder before a is changed in calculating c */
  if (a == c && d != NULL) {
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d107      	bne.n	800819e <fp_div_2d+0x42>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <fp_div_2d+0x42>
    fp_mod_2d (a, b, d);
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f88e 	bl	80082ba <fp_mod_2d>
  }

  /* copy */
  fp_copy(a, c);
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f002 fd39 	bl	800ac18 <fp_copy>

  /* shift by as many digits in the bit count */
  if (b >= (int)DIGIT_BIT) {
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b1f      	cmp	r3, #31
 80081aa:	dd08      	ble.n	80081be <fp_div_2d+0x62>
    fp_rshd (c, b / DIGIT_BIT);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da00      	bge.n	80081b4 <fp_div_2d+0x58>
 80081b2:	331f      	adds	r3, #31
 80081b4:	115b      	asrs	r3, r3, #5
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f002 fb44 	bl	800a846 <fp_rshd>
  }

  /* shift any bit count < DIGIT_BIT */
  D = (b % DIGIT_BIT);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	425a      	negs	r2, r3
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	f002 021f 	and.w	r2, r2, #31
 80081ca:	bf58      	it	pl
 80081cc:	4253      	negpl	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]
  if (D != 0) {
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <fp_div_2d+0x82>
    fp_rshb(c, D);
 80081d6:	6979      	ldr	r1, [r7, #20]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f002 fab1 	bl	800a740 <fp_rshb>
  }

  /* get the remainder if a is not changed in calculating c */
  if (a != c && d != NULL) {
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d00d      	beq.n	8008202 <fp_div_2d+0xa6>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <fp_div_2d+0xa6>
    fp_mod_2d (a, b, d);
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 f862 	bl	80082ba <fp_mod_2d>
  }

  fp_clamp (c);
 80081f6:	e004      	b.n	8008202 <fp_div_2d+0xa6>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	1e5a      	subs	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d008      	beq.n	800821c <fp_div_2d+0xc0>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	1e5a      	subs	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3202      	adds	r2, #2
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0ed      	beq.n	80081f8 <fp_div_2d+0x9c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <fp_div_2d+0xce>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	e000      	b.n	800822c <fp_div_2d+0xd0>
 800822a:	2300      	movs	r3, #0
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6053      	str	r3, [r2, #4]
 8008230:	e000      	b.n	8008234 <fp_div_2d+0xd8>
    return;
 8008232:	bf00      	nop
}
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <fp_mod>:

/* c = a mod b, 0 <= c < b  */
int fp_mod(fp_int *a, fp_int *b, fp_int *c)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b088      	sub	sp, #32
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
   fp_int *t;
#endif
   int    err;

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8008246:	f44f 700a 	mov.w	r0, #552	; 0x228
 800824a:	f7fc f90f 	bl	800446c <wolfSSL_Malloc>
 800824e:	61b8      	str	r0, [r7, #24]
   if (t == NULL)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <fp_mod+0x22>
       return FP_MEM;
 8008256:	f06f 0301 	mvn.w	r3, #1
 800825a:	e02a      	b.n	80082b2 <fp_mod+0x78>
#endif

   fp_init(t);
 800825c:	69b8      	ldr	r0, [r7, #24]
 800825e:	f002 fb5d 	bl	800a91c <fp_init>
   err = fp_div(a, b, NULL, t);
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	2200      	movs	r2, #0
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff fc1a 	bl	8007aa2 <fp_div>
 800826e:	61f8      	str	r0, [r7, #28]
   if (err == FP_OKAY) {
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d114      	bne.n	80082a0 <fp_mod+0x66>
      if (!fp_iszero(t) && (t->sign != b->sign)) {
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <fp_mod+0x5e>
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d006      	beq.n	8008298 <fp_mod+0x5e>
         err = fp_add(t, b, c);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	69b8      	ldr	r0, [r7, #24]
 8008290:	f7fe ff4a 	bl	8007128 <fp_add>
 8008294:	61f8      	str	r0, [r7, #28]
 8008296:	e003      	b.n	80082a0 <fp_mod+0x66>
      } else {
         fp_copy(t, c);
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	69b8      	ldr	r0, [r7, #24]
 800829c:	f002 fcbc 	bl	800ac18 <fp_copy>
     }
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <fp_mod+0x76>
 80082aa:	6978      	ldr	r0, [r7, #20]
 80082ac:	f7fc f8fa 	bl	80044a4 <wolfSSL_Free>
#endif
  return err;
 80082b0:	69fb      	ldr	r3, [r7, #28]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <fp_mod_2d>:

/* c = a mod 2**d */
void fp_mod_2d(fp_int *a, int b, fp_int *c)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b088      	sub	sp, #32
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
   unsigned int x;
   unsigned int bmax;

   /* zero if count less than or equal to zero */
   if (b <= 0) {
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dc03      	bgt.n	80082d4 <fp_mod_2d+0x1a>
      fp_zero(c);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f002 fb30 	bl	800a932 <fp_zero>
      return;
 80082d2:	e0b0      	b.n	8008436 <fp_mod_2d+0x17c>
   }

   /* get copy of input */
   fp_copy(a, c);
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f002 fc9e 	bl	800ac18 <fp_copy>

   /* if 2**d is larger than we just return */
   if (c->sign == FP_ZPOS && b >= (DIGIT_BIT * a->used)) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <fp_mod_2d+0x38>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	015b      	lsls	r3, r3, #5
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	f280 809f 	bge.w	8008430 <fp_mod_2d+0x176>
      return;
   }

   bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	331f      	adds	r3, #31
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	617b      	str	r3, [r7, #20]

   /* If a is negative and bmax is larger than FP_SIZE, then the
    * result can't fit within c. Just return. */
   if (c->sign == FP_NEG && bmax > FP_SIZE) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d103      	bne.n	800830a <fp_mod_2d+0x50>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b88      	cmp	r3, #136	; 0x88
 8008306:	f200 8095 	bhi.w	8008434 <fp_mod_2d+0x17a>
      return;
   }

  /* zero digits above the last digit of the modulus */
   for (x = bmax; x < (unsigned int)c->used; x++) {
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	e008      	b.n	8008322 <fp_mod_2d+0x68>
    c->dp[x] = 0;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	3202      	adds	r2, #2
 8008316:	2100      	movs	r1, #0
 8008318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (x = bmax; x < (unsigned int)c->used; x++) {
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4293      	cmp	r3, r2
 800832c:	d3f0      	bcc.n	8008310 <fp_mod_2d+0x56>
  }

  if (c->sign == FP_NEG) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d13e      	bne.n	80083b4 <fp_mod_2d+0xfa>
     fp_digit carry = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	61bb      	str	r3, [r7, #24]
     /* negate value */
     for (x = 0; x < (unsigned int)c->used; x++) {
 800833a:	2300      	movs	r3, #0
 800833c:	61fb      	str	r3, [r7, #28]
 800833e:	e01e      	b.n	800837e <fp_mod_2d+0xc4>
         fp_digit next = c->dp[x] > 0;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	3202      	adds	r2, #2
 8008346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834a:	2b00      	cmp	r3, #0
 800834c:	bf14      	ite	ne
 800834e:	2301      	movne	r3, #1
 8008350:	2300      	moveq	r3, #0
 8008352:	b2db      	uxtb	r3, r3
 8008354:	613b      	str	r3, [r7, #16]
         c->dp[x] = (fp_digit)0 - c->dp[x] - carry;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	3202      	adds	r2, #2
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	425a      	negs	r2, r3
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	1ad1      	subs	r1, r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	3202      	adds	r2, #2
 800836c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         carry |= next;
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
     for (x = 0; x < (unsigned int)c->used; x++) {
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	3301      	adds	r3, #1
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4293      	cmp	r3, r2
 8008388:	d3da      	bcc.n	8008340 <fp_mod_2d+0x86>
     }
     for (; x < bmax; x++) {
 800838a:	e009      	b.n	80083a0 <fp_mod_2d+0xe6>
         c->dp[x] = (fp_digit)0 - carry;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	4259      	negs	r1, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	3202      	adds	r2, #2
 8008396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
     for (; x < bmax; x++) {
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3301      	adds	r3, #1
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d3f1      	bcc.n	800838c <fp_mod_2d+0xd2>
     }
     c->used = (int)bmax;
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
     c->sign = FP_ZPOS;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	605a      	str	r2, [r3, #4]
  }

  /* clear the digit that is not completely outside/inside the modulus */
  x = DIGIT_BIT - (b % DIGIT_BIT);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	425a      	negs	r2, r3
 80083b8:	f003 031f 	and.w	r3, r3, #31
 80083bc:	f002 021f 	and.w	r2, r2, #31
 80083c0:	bf58      	it	pl
 80083c2:	4253      	negpl	r3, r2
 80083c4:	f1c3 0320 	rsb	r3, r3, #32
 80083c8:	61fb      	str	r3, [r7, #28]
  if (x != DIGIT_BIT) {
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	2b20      	cmp	r3, #32
 80083ce:	d017      	beq.n	8008400 <fp_mod_2d+0x146>
     c->dp[bmax - 1] &= ~((fp_digit)0) >> x;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	1e5a      	subs	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3202      	adds	r2, #2
 80083d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083dc:	f04f 32ff 	mov.w	r2, #4294967295
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	3a01      	subs	r2, #1
 80083ea:	4019      	ands	r1, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3202      	adds	r2, #2
 80083f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  fp_clamp (c);
 80083f4:	e004      	b.n	8008400 <fp_mod_2d+0x146>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	1e5a      	subs	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <fp_mod_2d+0x160>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1e5a      	subs	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3202      	adds	r2, #2
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ed      	beq.n	80083f6 <fp_mod_2d+0x13c>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <fp_mod_2d+0x16e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	e000      	b.n	800842a <fp_mod_2d+0x170>
 8008428:	2300      	movs	r3, #0
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6053      	str	r3, [r2, #4]
 800842e:	e002      	b.n	8008436 <fp_mod_2d+0x17c>
      return;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <fp_mod_2d+0x17c>
      return;
 8008434:	bf00      	nop
}
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <fp_invmod_slow>:

static int fp_invmod_slow (fp_int * a, fp_int * b, fp_int * c)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b09e      	sub	sp, #120	; 0x78
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  fp_int  *x, *y, *u, *v, *A, *B, *C, *D;
#endif
  int     err;

  /* b cannot be negative */
  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d003      	beq.n	8008458 <fp_invmod_slow+0x1c>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <fp_invmod_slow+0x22>
    return FP_VAL;
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	e239      	b.n	80088d2 <fp_invmod_slow+0x496>
  }
  if (fp_iszero(a) == FP_YES) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <fp_invmod_slow+0x30>
    return FP_VAL;
 8008466:	f04f 33ff 	mov.w	r3, #4294967295
 800846a:	e232      	b.n	80088d2 <fp_invmod_slow+0x496>
  }

#ifdef WOLFSSL_SMALL_STACK
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 8, NULL, DYNAMIC_TYPE_BIGINT);
 800846c:	f44f 508a 	mov.w	r0, #4416	; 0x1140
 8008470:	f7fb fffc 	bl	800446c <wolfSSL_Malloc>
 8008474:	6778      	str	r0, [r7, #116]	; 0x74
  if (x == NULL) {
 8008476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <fp_invmod_slow+0x46>
      return FP_MEM;
 800847c:	f06f 0301 	mvn.w	r3, #1
 8008480:	e227      	b.n	80088d2 <fp_invmod_slow+0x496>
  }
  y = &x[1]; u = &x[2]; v = &x[3]; A = &x[4]; B = &x[5]; C = &x[6]; D = &x[7];
 8008482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008484:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008488:	673b      	str	r3, [r7, #112]	; 0x70
 800848a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800848c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008494:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8008498:	66bb      	str	r3, [r7, #104]	; 0x68
 800849a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800849c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80084a0:	667b      	str	r3, [r7, #100]	; 0x64
 80084a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a4:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 80084a8:	663b      	str	r3, [r7, #96]	; 0x60
 80084aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ac:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
 80084b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084b4:	f603 7318 	addw	r3, r3, #3864	; 0xf18
 80084b8:	65bb      	str	r3, [r7, #88]	; 0x58
#endif

  /* init temps */
  fp_init(x);    fp_init(y);
 80084ba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80084bc:	f002 fa2e 	bl	800a91c <fp_init>
 80084c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80084c2:	f002 fa2b 	bl	800a91c <fp_init>
  fp_init(u);    fp_init(v);
 80084c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084c8:	f002 fa28 	bl	800a91c <fp_init>
 80084cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80084ce:	f002 fa25 	bl	800a91c <fp_init>
  fp_init(A);    fp_init(B);
 80084d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80084d4:	f002 fa22 	bl	800a91c <fp_init>
 80084d8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80084da:	f002 fa1f 	bl	800a91c <fp_init>
  fp_init(C);    fp_init(D);
 80084de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80084e0:	f002 fa1c 	bl	800a91c <fp_init>
 80084e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80084e6:	f002 fa19 	bl	800a91c <fp_init>

  /* x = a, y = b */
  if ((err = fp_mod(a, b, x)) != FP_OKAY) {
 80084ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7ff fea3 	bl	800823a <fp_mod>
 80084f4:	6578      	str	r0, [r7, #84]	; 0x54
 80084f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <fp_invmod_slow+0xd4>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80084fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <fp_invmod_slow+0xd0>
 8008506:	6938      	ldr	r0, [r7, #16]
 8008508:	f7fb ffcc 	bl	80044a4 <wolfSSL_Free>
  #endif
    return err;
 800850c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800850e:	e1e0      	b.n	80088d2 <fp_invmod_slow+0x496>
  }
  fp_copy(b, y);
 8008510:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008512:	68b8      	ldr	r0, [r7, #8]
 8008514:	f002 fb80 	bl	800ac18 <fp_copy>

  if (fp_iszero(x) == FP_YES) {
 8008518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <fp_invmod_slow+0xfa>
    /* invmod doesn't exist for this a and b */
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <fp_invmod_slow+0xf4>
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f7fb ffba 	bl	80044a4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	e1cd      	b.n	80088d2 <fp_invmod_slow+0x496>
  }

  /* 2. [modified] if x,y are both even then return an error! */
  if (fp_iseven(x) == FP_YES && fp_iseven(y) == FP_YES) {
 8008536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd07      	ble.n	800854e <fp_invmod_slow+0x112>
 800853e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <fp_invmod_slow+0x112>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <fp_invmod_slow+0x114>
 800854e:	2300      	movs	r3, #0
 8008550:	2b01      	cmp	r3, #1
 8008552:	d119      	bne.n	8008588 <fp_invmod_slow+0x14c>
 8008554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	dd07      	ble.n	800856c <fp_invmod_slow+0x130>
 800855c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <fp_invmod_slow+0x130>
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <fp_invmod_slow+0x132>
 800856c:	2300      	movs	r3, #0
 800856e:	2b01      	cmp	r3, #1
 8008570:	d10a      	bne.n	8008588 <fp_invmod_slow+0x14c>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008574:	653b      	str	r3, [r7, #80]	; 0x50
 8008576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <fp_invmod_slow+0x146>
 800857c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800857e:	f7fb ff91 	bl	80044a4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	e1a4      	b.n	80088d2 <fp_invmod_slow+0x496>
  }

  /* 3. u=x, v=y, A=1, B=0, C=0,D=1 */
  fp_copy (x, u);
 8008588:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800858a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800858c:	f002 fb44 	bl	800ac18 <fp_copy>
  fp_copy (y, v);
 8008590:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008592:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008594:	f002 fb40 	bl	800ac18 <fp_copy>
  fp_set (A, 1);
 8008598:	2101      	movs	r1, #1
 800859a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800859c:	f002 f832 	bl	800a604 <fp_set>
  fp_set (D, 1);
 80085a0:	2101      	movs	r1, #1
 80085a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80085a4:	f002 f82e 	bl	800a604 <fp_set>

top:
  /* 4.  while u is even do */
  while (fp_iseven (u) == FP_YES) {
 80085a8:	e04f      	b.n	800864a <fp_invmod_slow+0x20e>
    /* 4.1 u = u/2 */
    fp_div_2 (u, u);
 80085aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80085ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085ae:	f7ff fd54 	bl	800805a <fp_div_2>

    /* 4.2 if A or B is odd then */
    if (fp_isodd (A) == FP_YES || fp_isodd (B) == FP_YES) {
 80085b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd07      	ble.n	80085ca <fp_invmod_slow+0x18e>
 80085ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <fp_invmod_slow+0x18e>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <fp_invmod_slow+0x190>
 80085ca:	2300      	movs	r3, #0
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d00e      	beq.n	80085ee <fp_invmod_slow+0x1b2>
 80085d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dd07      	ble.n	80085e8 <fp_invmod_slow+0x1ac>
 80085d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <fp_invmod_slow+0x1ac>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <fp_invmod_slow+0x1ae>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d125      	bne.n	800863a <fp_invmod_slow+0x1fe>
      /* A = (A+y)/2, B = (B-x)/2 */
      err = fp_add (A, y, A);
 80085ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80085f2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80085f4:	f7fe fd98 	bl	8007128 <fp_add>
 80085f8:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 80085fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d009      	beq.n	8008614 <fp_invmod_slow+0x1d8>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <fp_invmod_slow+0x1d4>
 800860a:	69b8      	ldr	r0, [r7, #24]
 800860c:	f7fb ff4a 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8008610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008612:	e15e      	b.n	80088d2 <fp_invmod_slow+0x496>
      }
      err = fp_sub (B, x, B);
 8008614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008616:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008618:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800861a:	f7fe fe61 	bl	80072e0 <fp_sub>
 800861e:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 8008620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <fp_invmod_slow+0x1fe>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <fp_invmod_slow+0x1fa>
 8008630:	69f8      	ldr	r0, [r7, #28]
 8008632:	f7fb ff37 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8008636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008638:	e14b      	b.n	80088d2 <fp_invmod_slow+0x496>
      }
    }
    /* A = A/2, B = B/2 */
    fp_div_2 (A, A);
 800863a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800863c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800863e:	f7ff fd0c 	bl	800805a <fp_div_2>
    fp_div_2 (B, B);
 8008642:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008644:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008646:	f7ff fd08 	bl	800805a <fp_div_2>
  while (fp_iseven (u) == FP_YES) {
 800864a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd07      	ble.n	8008662 <fp_invmod_slow+0x226>
 8008652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <fp_invmod_slow+0x226>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <fp_invmod_slow+0x228>
 8008662:	2300      	movs	r3, #0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d0a0      	beq.n	80085aa <fp_invmod_slow+0x16e>
  }

  /* 5.  while v is even do */
  while (fp_iseven (v) == FP_YES) {
 8008668:	e04f      	b.n	800870a <fp_invmod_slow+0x2ce>
    /* 5.1 v = v/2 */
    fp_div_2 (v, v);
 800866a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800866c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800866e:	f7ff fcf4 	bl	800805a <fp_div_2>

    /* 5.2 if C or D is odd then */
    if (fp_isodd (C) == FP_YES || fp_isodd (D) == FP_YES) {
 8008672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd07      	ble.n	800868a <fp_invmod_slow+0x24e>
 800867a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <fp_invmod_slow+0x24e>
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <fp_invmod_slow+0x250>
 800868a:	2300      	movs	r3, #0
 800868c:	2b01      	cmp	r3, #1
 800868e:	d00e      	beq.n	80086ae <fp_invmod_slow+0x272>
 8008690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	dd07      	ble.n	80086a8 <fp_invmod_slow+0x26c>
 8008698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <fp_invmod_slow+0x26c>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <fp_invmod_slow+0x26e>
 80086a8:	2300      	movs	r3, #0
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d125      	bne.n	80086fa <fp_invmod_slow+0x2be>
      /* C = (C+y)/2, D = (D-x)/2 */
      err = fp_add (C, y, C);
 80086ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80086b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80086b4:	f7fe fd38 	bl	8007128 <fp_add>
 80086b8:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 80086ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d009      	beq.n	80086d4 <fp_invmod_slow+0x298>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80086c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c2:	623b      	str	r3, [r7, #32]
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <fp_invmod_slow+0x294>
 80086ca:	6a38      	ldr	r0, [r7, #32]
 80086cc:	f7fb feea 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 80086d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086d2:	e0fe      	b.n	80088d2 <fp_invmod_slow+0x496>
      }
      err = fp_sub (D, x, D);
 80086d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086d6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80086d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80086da:	f7fe fe01 	bl	80072e0 <fp_sub>
 80086de:	6578      	str	r0, [r7, #84]	; 0x54
      if (err != FP_OKAY) {
 80086e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <fp_invmod_slow+0x2be>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80086e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <fp_invmod_slow+0x2ba>
 80086f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f2:	f7fb fed7 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 80086f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f8:	e0eb      	b.n	80088d2 <fp_invmod_slow+0x496>
      }
    }
    /* C = C/2, D = D/2 */
    fp_div_2 (C, C);
 80086fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80086fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80086fe:	f7ff fcac 	bl	800805a <fp_div_2>
    fp_div_2 (D, D);
 8008702:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008704:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008706:	f7ff fca8 	bl	800805a <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 800870a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	dd07      	ble.n	8008722 <fp_invmod_slow+0x2e6>
 8008712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <fp_invmod_slow+0x2e6>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <fp_invmod_slow+0x2e8>
 8008722:	2300      	movs	r3, #0
 8008724:	2b01      	cmp	r3, #1
 8008726:	d0a0      	beq.n	800866a <fp_invmod_slow+0x22e>
  }

  /* 6.  if u >= v then */
  if (fp_cmp (u, v) != FP_LT) {
 8008728:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800872a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800872c:	f001 fc0d 	bl	8009f4a <fp_cmp>
 8008730:	4603      	mov	r3, r0
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d038      	beq.n	80087aa <fp_invmod_slow+0x36e>
    /* u = u - v, A = A - C, B = B - D */
    err = fp_sub (u, v, u);
 8008738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800873a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800873c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800873e:	f7fe fdcf 	bl	80072e0 <fp_sub>
 8008742:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 8008744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <fp_invmod_slow+0x322>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 800874a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800874c:	63bb      	str	r3, [r7, #56]	; 0x38
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <fp_invmod_slow+0x31e>
 8008754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008756:	f7fb fea5 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 800875a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800875c:	e0b9      	b.n	80088d2 <fp_invmod_slow+0x496>
    }
    err = fp_sub (A, C, A);
 800875e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008760:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008762:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008764:	f7fe fdbc 	bl	80072e0 <fp_sub>
 8008768:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 800876a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <fp_invmod_slow+0x348>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <fp_invmod_slow+0x344>
 800877a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800877c:	f7fb fe92 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008782:	e0a6      	b.n	80088d2 <fp_invmod_slow+0x496>
    }
    err = fp_sub (B, D, B);
 8008784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008788:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800878a:	f7fe fda9 	bl	80072e0 <fp_sub>
 800878e:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 8008790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008792:	2b00      	cmp	r3, #0
 8008794:	d042      	beq.n	800881c <fp_invmod_slow+0x3e0>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008798:	643b      	str	r3, [r7, #64]	; 0x40
 800879a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <fp_invmod_slow+0x36a>
 80087a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80087a2:	f7fb fe7f 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 80087a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a8:	e093      	b.n	80088d2 <fp_invmod_slow+0x496>
    }
  } else {
    /* v - v - u, C = C - A, D = D - B */
    err = fp_sub (v, u, v);
 80087aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80087ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80087b0:	f7fe fd96 	bl	80072e0 <fp_sub>
 80087b4:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 80087b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <fp_invmod_slow+0x394>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80087bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087be:	647b      	str	r3, [r7, #68]	; 0x44
 80087c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <fp_invmod_slow+0x390>
 80087c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087c8:	f7fb fe6c 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 80087cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ce:	e080      	b.n	80088d2 <fp_invmod_slow+0x496>
    }
    err = fp_sub (C, A, C);
 80087d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087d2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80087d4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80087d6:	f7fe fd83 	bl	80072e0 <fp_sub>
 80087da:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 80087dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <fp_invmod_slow+0x3ba>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80087e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <fp_invmod_slow+0x3b6>
 80087ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80087ee:	f7fb fe59 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 80087f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f4:	e06d      	b.n	80088d2 <fp_invmod_slow+0x496>
    }
    err = fp_sub (D, B, D);
 80087f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80087fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80087fc:	f7fe fd70 	bl	80072e0 <fp_sub>
 8008800:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 8008802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008804:	2b00      	cmp	r3, #0
 8008806:	d009      	beq.n	800881c <fp_invmod_slow+0x3e0>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800880a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800880c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <fp_invmod_slow+0x3dc>
 8008812:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008814:	f7fb fe46 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881a:	e05a      	b.n	80088d2 <fp_invmod_slow+0x496>
    }
  }

  /* if not zero goto step 4 */
  if (fp_iszero (u) == FP_NO)
 800881c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d000      	beq.n	8008826 <fp_invmod_slow+0x3ea>
    goto top;
 8008824:	e6c0      	b.n	80085a8 <fp_invmod_slow+0x16c>

  /* now a = C, b = D, gcd == g*v */

  /* if v != 1 then there is no inverse */
  if (fp_cmp_d (v, 1) != FP_EQ) {
 8008826:	2101      	movs	r1, #1
 8008828:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800882a:	f001 fbbb 	bl	8009fa4 <fp_cmp_d>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01d      	beq.n	8008870 <fp_invmod_slow+0x434>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <fp_invmod_slow+0x408>
 800883e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008840:	f7fb fe30 	bl	80044a4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 8008844:	f04f 33ff 	mov.w	r3, #4294967295
 8008848:	e043      	b.n	80088d2 <fp_invmod_slow+0x496>
  }

  /* if its too low */
  while (fp_cmp_d(C, 0) == FP_LT) {
    err = fp_add(C, b, C);
 800884a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008850:	f7fe fc6a 	bl	8007128 <fp_add>
 8008854:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 8008856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008858:	2b00      	cmp	r3, #0
 800885a:	d009      	beq.n	8008870 <fp_invmod_slow+0x434>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 800885c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <fp_invmod_slow+0x430>
 8008866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008868:	f7fb fe1c 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 800886c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800886e:	e030      	b.n	80088d2 <fp_invmod_slow+0x496>
  while (fp_cmp_d(C, 0) == FP_LT) {
 8008870:	2100      	movs	r1, #0
 8008872:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008874:	f001 fb96 	bl	8009fa4 <fp_cmp_d>
 8008878:	4603      	mov	r3, r0
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d0e4      	beq.n	800884a <fp_invmod_slow+0x40e>
    }
  }

  /* too big */
  while (fp_cmp_mag(C, b) != FP_LT) {
 8008880:	e012      	b.n	80088a8 <fp_invmod_slow+0x46c>
    err = fp_sub(C, b, C);
 8008882:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008888:	f7fe fd2a 	bl	80072e0 <fp_sub>
 800888c:	6578      	str	r0, [r7, #84]	; 0x54
    if (err != FP_OKAY) {
 800888e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008890:	2b00      	cmp	r3, #0
 8008892:	d009      	beq.n	80088a8 <fp_invmod_slow+0x46c>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008896:	633b      	str	r3, [r7, #48]	; 0x30
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <fp_invmod_slow+0x468>
 800889e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a0:	f7fb fe00 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 80088a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a6:	e014      	b.n	80088d2 <fp_invmod_slow+0x496>
  while (fp_cmp_mag(C, b) != FP_LT) {
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80088ac:	f001 fbb2 	bl	800a014 <fp_cmp_mag>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d1e4      	bne.n	8008882 <fp_invmod_slow+0x446>
    }
  }

  /* C is now the inverse */
  fp_copy(C, c);
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80088bc:	f002 f9ac 	bl	800ac18 <fp_copy>
#ifdef WOLFSSL_SMALL_STACK
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80088c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <fp_invmod_slow+0x494>
 80088ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80088cc:	f7fb fdea 	bl	80044a4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3778      	adds	r7, #120	; 0x78
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <fp_invmod>:

/* c = 1/a (mod b) for odd b only */
int fp_invmod(fp_int *a, fp_int *b, fp_int *c)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b098      	sub	sp, #96	; 0x60
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
#else
  fp_int  *x, *y, *u, *v, *B, *D;
#endif
  int     err;

  if (b->sign == FP_NEG || fp_iszero(b) == FP_YES) {
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d003      	beq.n	80088f6 <fp_invmod+0x1c>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <fp_invmod+0x22>
    return FP_VAL;
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	e1ad      	b.n	8008c58 <fp_invmod+0x37e>
  }

  /* [modified] sanity check on "a" */
  if (fp_iszero(a) == FP_YES) {
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <fp_invmod+0x30>
    return FP_VAL; /* can not divide by 0 here */
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	e1a6      	b.n	8008c58 <fp_invmod+0x37e>
  }

  /* 2. [modified] b must be odd   */
  if (fp_iseven(b) == FP_YES) {
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd07      	ble.n	8008922 <fp_invmod+0x48>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <fp_invmod+0x48>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <fp_invmod+0x4a>
 8008922:	2300      	movs	r3, #0
 8008924:	2b01      	cmp	r3, #1
 8008926:	d106      	bne.n	8008936 <fp_invmod+0x5c>
    return fp_invmod_slow(a,b,c);
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff fd85 	bl	800843c <fp_invmod_slow>
 8008932:	4603      	mov	r3, r0
 8008934:	e190      	b.n	8008c58 <fp_invmod+0x37e>
  }

#ifdef WOLFSSL_SMALL_STACK
  x = (fp_int*)XMALLOC(sizeof(fp_int) * 6, NULL, DYNAMIC_TYPE_BIGINT);
 8008936:	f44f 604f 	mov.w	r0, #3312	; 0xcf0
 800893a:	f7fb fd97 	bl	800446c <wolfSSL_Malloc>
 800893e:	65f8      	str	r0, [r7, #92]	; 0x5c
  if (x == NULL) {
 8008940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <fp_invmod+0x72>
      return FP_MEM;
 8008946:	f06f 0301 	mvn.w	r3, #1
 800894a:	e185      	b.n	8008c58 <fp_invmod+0x37e>
  }
  y = &x[1]; u = &x[2]; v = &x[3]; B = &x[4]; D = &x[5];
 800894c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800894e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008952:	65bb      	str	r3, [r7, #88]	; 0x58
 8008954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008956:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800895a:	657b      	str	r3, [r7, #84]	; 0x54
 800895c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800895e:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8008962:	653b      	str	r3, [r7, #80]	; 0x50
 8008964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008966:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800896a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800896c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800896e:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8008972:	64bb      	str	r3, [r7, #72]	; 0x48
#endif

  /* init all our temps */
  fp_init(x);  fp_init(y);
 8008974:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008976:	f001 ffd1 	bl	800a91c <fp_init>
 800897a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800897c:	f001 ffce 	bl	800a91c <fp_init>
  fp_init(u);  fp_init(v);
 8008980:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008982:	f001 ffcb 	bl	800a91c <fp_init>
 8008986:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008988:	f001 ffc8 	bl	800a91c <fp_init>
  fp_init(B);  fp_init(D);
 800898c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800898e:	f001 ffc5 	bl	800a91c <fp_init>
 8008992:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008994:	f001 ffc2 	bl	800a91c <fp_init>

  if (fp_iszero(a) == FP_YES) {
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <fp_invmod+0xdc>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80089a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <fp_invmod+0xd6>
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f7fb fd7a 	bl	80044a4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	e150      	b.n	8008c58 <fp_invmod+0x37e>
  }

  /* x == modulus, y == value to invert */
  fp_copy(b, x);
 80089b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80089b8:	68b8      	ldr	r0, [r7, #8]
 80089ba:	f002 f92d 	bl	800ac18 <fp_copy>

  /* we need y = |a| */
  if ((err = mp_mod(a, b, y)) != FP_OKAY) {
 80089be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f002 f89c 	bl	800ab00 <mp_mod>
 80089c8:	6478      	str	r0, [r7, #68]	; 0x44
 80089ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d009      	beq.n	80089e4 <fp_invmod+0x10a>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80089d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <fp_invmod+0x106>
 80089da:	6978      	ldr	r0, [r7, #20]
 80089dc:	f7fb fd62 	bl	80044a4 <wolfSSL_Free>
  #endif
    return err;
 80089e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e2:	e139      	b.n	8008c58 <fp_invmod+0x37e>
  }

  if (fp_iszero(y) == FP_YES) {
 80089e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <fp_invmod+0x128>
    /* invmod doesn't exist for this a and b */
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 80089ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <fp_invmod+0x122>
 80089f6:	69b8      	ldr	r0, [r7, #24]
 80089f8:	f7fb fd54 	bl	80044a4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	e12a      	b.n	8008c58 <fp_invmod+0x37e>
  }

  /* 3. u=x, v=y, A=1, B=0, C=0,D=1 */
  fp_copy(x, u);
 8008a02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008a06:	f002 f907 	bl	800ac18 <fp_copy>
  fp_copy(y, v);
 8008a0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a0e:	f002 f903 	bl	800ac18 <fp_copy>
  fp_set (D, 1);
 8008a12:	2101      	movs	r1, #1
 8008a14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008a16:	f001 fdf5 	bl	800a604 <fp_set>

top:
  /* 4.  while u is even do */
  while (fp_iseven (u) == FP_YES) {
 8008a1a:	e029      	b.n	8008a70 <fp_invmod+0x196>
    /* 4.1 u = u/2 */
    fp_div_2 (u, u);
 8008a1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008a20:	f7ff fb1b 	bl	800805a <fp_div_2>

    /* 4.2 if B is odd then */
    if (fp_isodd (B) == FP_YES) {
 8008a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dd07      	ble.n	8008a3c <fp_invmod+0x162>
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <fp_invmod+0x162>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e000      	b.n	8008a3e <fp_invmod+0x164>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d112      	bne.n	8008a68 <fp_invmod+0x18e>
      err = fp_sub (B, x, B);
 8008a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008a46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008a48:	f7fe fc4a 	bl	80072e0 <fp_sub>
 8008a4c:	6478      	str	r0, [r7, #68]	; 0x44
      if (err != FP_OKAY) {
 8008a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <fp_invmod+0x18e>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a56:	61fb      	str	r3, [r7, #28]
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <fp_invmod+0x18a>
 8008a5e:	69f8      	ldr	r0, [r7, #28]
 8008a60:	f7fb fd20 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8008a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a66:	e0f7      	b.n	8008c58 <fp_invmod+0x37e>
      }
    }
    /* B = B/2 */
    fp_div_2 (B, B);
 8008a68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008a6c:	f7ff faf5 	bl	800805a <fp_div_2>
  while (fp_iseven (u) == FP_YES) {
 8008a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd07      	ble.n	8008a88 <fp_invmod+0x1ae>
 8008a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <fp_invmod+0x1ae>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <fp_invmod+0x1b0>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d0c6      	beq.n	8008a1c <fp_invmod+0x142>
  }

  /* 5.  while v is even do */
  while (fp_iseven (v) == FP_YES) {
 8008a8e:	e029      	b.n	8008ae4 <fp_invmod+0x20a>
    /* 5.1 v = v/2 */
    fp_div_2 (v, v);
 8008a90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a94:	f7ff fae1 	bl	800805a <fp_div_2>

    /* 5.2 if D is odd then */
    if (fp_isodd (D) == FP_YES) {
 8008a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dd07      	ble.n	8008ab0 <fp_invmod+0x1d6>
 8008aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <fp_invmod+0x1d6>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e000      	b.n	8008ab2 <fp_invmod+0x1d8>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d112      	bne.n	8008adc <fp_invmod+0x202>
      /* D = (D-x)/2 */
      err = fp_sub (D, x, D);
 8008ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008aba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008abc:	f7fe fc10 	bl	80072e0 <fp_sub>
 8008ac0:	6478      	str	r0, [r7, #68]	; 0x44
      if (err != FP_OKAY) {
 8008ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d009      	beq.n	8008adc <fp_invmod+0x202>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aca:	623b      	str	r3, [r7, #32]
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <fp_invmod+0x1fe>
 8008ad2:	6a38      	ldr	r0, [r7, #32]
 8008ad4:	f7fb fce6 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8008ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ada:	e0bd      	b.n	8008c58 <fp_invmod+0x37e>
      }
    }
    /* D = D/2 */
    fp_div_2 (D, D);
 8008adc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008ade:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008ae0:	f7ff fabb 	bl	800805a <fp_div_2>
  while (fp_iseven (v) == FP_YES) {
 8008ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dd07      	ble.n	8008afc <fp_invmod+0x222>
 8008aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <fp_invmod+0x222>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <fp_invmod+0x224>
 8008afc:	2300      	movs	r3, #0
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d0c6      	beq.n	8008a90 <fp_invmod+0x1b6>
  }

  /* 6.  if u >= v then */
  if (fp_cmp (u, v) != FP_LT) {
 8008b02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b06:	f001 fa20 	bl	8009f4a <fp_cmp>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d025      	beq.n	8008b5e <fp_invmod+0x284>
    /* u = u - v, B = B - D */
    err = fp_sub (u, v, u);
 8008b12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008b18:	f7fe fbe2 	bl	80072e0 <fp_sub>
 8008b1c:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 8008b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <fp_invmod+0x25e>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
 8008b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <fp_invmod+0x25a>
 8008b2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008b30:	f7fb fcb8 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b36:	e08f      	b.n	8008c58 <fp_invmod+0x37e>
    }
    err = fp_sub (B, D, B);
 8008b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008b3e:	f7fe fbcf 	bl	80072e0 <fp_sub>
 8008b42:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 8008b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d02f      	beq.n	8008baa <fp_invmod+0x2d0>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <fp_invmod+0x280>
 8008b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b56:	f7fb fca5 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5c:	e07c      	b.n	8008c58 <fp_invmod+0x37e>
    }
  } else {
    /* v - v - u, D = D - B */
    err = fp_sub (v, u, v);
 8008b5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b64:	f7fe fbbc 	bl	80072e0 <fp_sub>
 8008b68:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 8008b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <fp_invmod+0x2aa>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <fp_invmod+0x2a6>
 8008b7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b7c:	f7fb fc92 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b82:	e069      	b.n	8008c58 <fp_invmod+0x37e>
    }
    err = fp_sub (D, B, D);
 8008b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008b8a:	f7fe fba9 	bl	80072e0 <fp_sub>
 8008b8e:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 8008b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d009      	beq.n	8008baa <fp_invmod+0x2d0>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b98:	643b      	str	r3, [r7, #64]	; 0x40
 8008b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <fp_invmod+0x2cc>
 8008ba0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ba2:	f7fb fc7f 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba8:	e056      	b.n	8008c58 <fp_invmod+0x37e>
    }
  }

  /* if not zero goto step 4 */
  if (fp_iszero (u) == FP_NO) {
 8008baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d000      	beq.n	8008bb4 <fp_invmod+0x2da>
    goto top;
 8008bb2:	e732      	b.n	8008a1a <fp_invmod+0x140>
  }

  /* now a = C, b = D, gcd == g*v */

  /* if v != 1 then there is no inverse */
  if (fp_cmp_d (v, 1) != FP_EQ) {
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008bb8:	f001 f9f4 	bl	8009fa4 <fp_cmp_d>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01d      	beq.n	8008bfe <fp_invmod+0x324>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <fp_invmod+0x2f8>
 8008bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bce:	f7fb fc69 	bl	80044a4 <wolfSSL_Free>
  #endif
    return FP_VAL;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	e03f      	b.n	8008c58 <fp_invmod+0x37e>
  }

  /* b is now the inverse */
  while (D->sign == FP_NEG) {
    err = fp_add (D, b, D);
 8008bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008bde:	f7fe faa3 	bl	8007128 <fp_add>
 8008be2:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 8008be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <fp_invmod+0x324>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <fp_invmod+0x320>
 8008bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf6:	f7fb fc55 	bl	80044a4 <wolfSSL_Free>
    #endif
      return FP_OKAY;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e02c      	b.n	8008c58 <fp_invmod+0x37e>
  while (D->sign == FP_NEG) {
 8008bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d0e8      	beq.n	8008bd8 <fp_invmod+0x2fe>
    }
  }
  /* too big */
  while (fp_cmp_mag(D, b) != FP_LT) {
 8008c06:	e012      	b.n	8008c2e <fp_invmod+0x354>
    err = fp_sub(D, b, D);
 8008c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c0a:	68b9      	ldr	r1, [r7, #8]
 8008c0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008c0e:	f7fe fb67 	bl	80072e0 <fp_sub>
 8008c12:	6478      	str	r0, [r7, #68]	; 0x44
    if (err != FP_OKAY) {
 8008c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <fp_invmod+0x354>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <fp_invmod+0x350>
 8008c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c26:	f7fb fc3d 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2c:	e014      	b.n	8008c58 <fp_invmod+0x37e>
  while (fp_cmp_mag(D, b) != FP_LT) {
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008c32:	f001 f9ef 	bl	800a014 <fp_cmp_mag>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d1e4      	bne.n	8008c08 <fp_invmod+0x32e>
    }
  }
  fp_copy (D, c);
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008c42:	f001 ffe9 	bl	800ac18 <fp_copy>
#ifdef WOLFSSL_SMALL_STACK
  XFREE(x, NULL, DYNAMIC_TYPE_BIGINT);
 8008c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c48:	633b      	str	r3, [r7, #48]	; 0x30
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <fp_invmod+0x37c>
 8008c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c52:	f7fb fc27 	bl	80044a4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3760      	adds	r7, #96	; 0x60
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <fp_mulmod>:
  return err;
}

/* d = a * b (mod c) */
int fp_mulmod(fp_int *a, fp_int *b, fp_int *c, fp_int *d)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	603b      	str	r3, [r7, #0]
#else
   fp_int *t;
#endif

#ifdef WOLFSSL_SMALL_STACK
   t = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8008c6e:	f44f 700a 	mov.w	r0, #552	; 0x228
 8008c72:	f7fb fbfb 	bl	800446c <wolfSSL_Malloc>
 8008c76:	61b8      	str	r0, [r7, #24]
   if (t == NULL)
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <fp_mulmod+0x24>
       return FP_MEM;
 8008c7e:	f06f 0301 	mvn.w	r3, #1
 8008c82:	e01a      	b.n	8008cba <fp_mulmod+0x5a>
#endif

  fp_init(t);
 8008c84:	69b8      	ldr	r0, [r7, #24]
 8008c86:	f001 fe49 	bl	800a91c <fp_init>
  err = fp_mul(a, b, t);
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	68b9      	ldr	r1, [r7, #8]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f7fe fc23 	bl	80074da <fp_mul>
 8008c94:	61f8      	str	r0, [r7, #28]
  if (err == FP_OKAY) {
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d105      	bne.n	8008ca8 <fp_mulmod+0x48>
      err = fp_mod(t, c, t);
      fp_copy(t, d);
    } else
  #endif
    {
      err = fp_mod(t, c, d);
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	69b8      	ldr	r0, [r7, #24]
 8008ca2:	f7ff faca 	bl	800823a <fp_mod>
 8008ca6:	61f8      	str	r0, [r7, #28]
    }
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <fp_mulmod+0x58>
 8008cb2:	6978      	ldr	r0, [r7, #20]
 8008cb4:	f7fb fbf6 	bl	80044a4 <wolfSSL_Free>
#endif
  return err;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <_fp_exptmod_ct>:
   Based on work by Marc Joye, Sung-Ming Yen, "The Montgomery Powering Ladder",
   Cryptographic Hardware and Embedded Systems, CHES 2002
*/
static int _fp_exptmod_ct(fp_int * G, fp_int * X, int digits, fp_int * P,
                          fp_int * Y)
{
 8008cc4:	b590      	push	{r4, r7, lr}
 8008cc6:	b095      	sub	sp, #84	; 0x54
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
#endif
  fp_digit buf, mp;
  int      err, bitcnt, digidx, y;

  /* now setup montgomery  */
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
 8008cd2:	f107 0314 	add.w	r3, r7, #20
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6838      	ldr	r0, [r7, #0]
 8008cda:	f001 f9e0 	bl	800a09e <fp_montgomery_setup>
 8008cde:	6438      	str	r0, [r7, #64]	; 0x40
 8008ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <_fp_exptmod_ct+0x26>
     return err;
 8008ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce8:	e145      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
  }

#ifdef WOLFSSL_SMALL_STACK
#ifndef WC_NO_CACHE_RESISTANT
   R = (fp_int*)XMALLOC(sizeof(fp_int) * 3, NULL, DYNAMIC_TYPE_BIGINT);
 8008cea:	f44f 60cf 	mov.w	r0, #1656	; 0x678
 8008cee:	f7fb fbbd 	bl	800446c <wolfSSL_Malloc>
 8008cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
#else
   R = (fp_int*)XMALLOC(sizeof(fp_int) * 2, NULL, DYNAMIC_TYPE_BIGINT);
#endif
   if (R == NULL)
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <_fp_exptmod_ct+0x3c>
       return FP_MEM;
 8008cfa:	f06f 0301 	mvn.w	r3, #1
 8008cfe:	e13a      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
#endif
  fp_init(&R[0]);
 8008d00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d02:	f001 fe0b 	bl	800a91c <fp_init>
  fp_init(&R[1]);
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 fe05 	bl	800a91c <fp_init>
#ifndef WC_NO_CACHE_RESISTANT
  fp_init(&R[2]);
 8008d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d14:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 fdff 	bl	800a91c <fp_init>
#endif

  /* now we need R mod m */
  err = fp_montgomery_calc_normalization (&R[0], P);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d22:	f001 f9fd 	bl	800a120 <fp_montgomery_calc_normalization>
 8008d26:	6438      	str	r0, [r7, #64]	; 0x40
  if (err != FP_OKAY) {
 8008d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <_fp_exptmod_ct+0x7e>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <_fp_exptmod_ct+0x7a>
 8008d38:	69b8      	ldr	r0, [r7, #24]
 8008d3a:	f7fb fbb3 	bl	80044a4 <wolfSSL_Free>
  #endif
    return err;
 8008d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d40:	e119      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
  }

  /* now set R[0][1] to G * R mod m */
  if (fp_cmp_mag(P, G) != FP_GT) {
 8008d42:	68f9      	ldr	r1, [r7, #12]
 8008d44:	6838      	ldr	r0, [r7, #0]
 8008d46:	f001 f965 	bl	800a014 <fp_cmp_mag>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d015      	beq.n	8008d7c <_fp_exptmod_ct+0xb8>
     /* G > P so we reduce it first */
     err = fp_mod(G, P, &R[1]);
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008d56:	461a      	mov	r2, r3
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7ff fa6d 	bl	800823a <fp_mod>
 8008d60:	6438      	str	r0, [r7, #64]	; 0x40
     if (err != FP_OKAY) {
 8008d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d010      	beq.n	8008d8a <_fp_exptmod_ct+0xc6>
#ifdef WOLFSSL_SMALL_STACK
         XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <_fp_exptmod_ct+0xb4>
 8008d72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d74:	f7fb fb96 	bl	80044a4 <wolfSSL_Free>
#endif
         return err;
 8008d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d7a:	e0fc      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
     }
  } else {
     fp_copy(G, &R[1]);
 8008d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008d82:	4619      	mov	r1, r3
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 ff47 	bl	800ac18 <fp_copy>
  }
  err = fp_mulmod (&R[1], &R[0], P, &R[1]);
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	f503 700a 	add.w	r0, r3, #552	; 0x228
 8008d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d92:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d9a:	f7ff ff61 	bl	8008c60 <fp_mulmod>
 8008d9e:	6438      	str	r0, [r7, #64]	; 0x40
  if (err != FP_OKAY) {
 8008da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d009      	beq.n	8008dba <_fp_exptmod_ct+0xf6>
#ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <_fp_exptmod_ct+0xf2>
 8008db0:	69f8      	ldr	r0, [r7, #28]
 8008db2:	f7fb fb77 	bl	80044a4 <wolfSSL_Free>
#endif
      return err;
 8008db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db8:	e0dd      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
  /* for j = t-1 downto 0 do
        r_!k = R0*R1; r_k = r_k^2
  */

  /* set initial mode and bit cnt */
  bitcnt = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  buf    = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  digidx = digits - 1;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	647b      	str	r3, [r7, #68]	; 0x44

  for (;;) {
    /* grab next digit as required */
    if (--bitcnt == 0) {
 8008dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10e      	bne.n	8008df2 <_fp_exptmod_ct+0x12e>
      /* if digidx == -1 we are out of digits so break */
      if (digidx == -1) {
 8008dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	f000 80b7 	beq.w	8008f4c <_fp_exptmod_ct+0x288>
        break;
      }
      /* read next digit and reset bitcnt */
      buf    = X->dp[digidx--];
 8008dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de0:	1e5a      	subs	r2, r3, #1
 8008de2:	647a      	str	r2, [r7, #68]	; 0x44
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	3302      	adds	r3, #2
 8008de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dec:	64fb      	str	r3, [r7, #76]	; 0x4c
      bitcnt = (int)DIGIT_BIT;
 8008dee:	2320      	movs	r3, #32
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* grab the next msb from the exponent */
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
 8008df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df4:	0fdb      	lsrs	r3, r3, #31
 8008df6:	633b      	str	r3, [r7, #48]	; 0x30
    buf <<= (fp_digit)1;
 8008df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    #endif
      return err;
    }
#else
    /* do ops */
    err = fp_mul(&R[0], &R[1], &R[2]);
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e00:	f503 710a 	add.w	r1, r3, #552	; 0x228
 8008e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e06:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e0e:	f7fe fb64 	bl	80074da <fp_mul>
 8008e12:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 8008e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <_fp_exptmod_ct+0x16a>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1c:	623b      	str	r3, [r7, #32]
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <_fp_exptmod_ct+0x166>
 8008e24:	6a38      	ldr	r0, [r7, #32]
 8008e26:	f7fb fb3d 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	e0a3      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
    }
    err = fp_montgomery_reduce(&R[2], P, mp);
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e30:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 faf5 	bl	800a428 <fp_montgomery_reduce>
 8008e3e:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 8008e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d009      	beq.n	8008e5a <_fp_exptmod_ct+0x196>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <_fp_exptmod_ct+0x192>
 8008e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e52:	f7fb fb27 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	e08d      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
    }
    /* instead of using R[y^1] for mul, which leaks key bit to cache monitor,
     * use R[2] as temp, make sure address calc is constant, keep
     * &R[0] and &R[1] in cache */
    fp_copy(&R[2],
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5c:	f503 608a 	add.w	r0, r3, #1104	; 0x450
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y]) +
 8008e60:	4a47      	ldr	r2, [pc, #284]	; (8008f80 <_fp_exptmod_ct+0x2bc>)
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	401a      	ands	r2, r3
                        ((wc_ptr_t)&R[1] & wc_off_on_addr[y^1]) ) );
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008e72:	461c      	mov	r4, r3
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	f083 0301 	eor.w	r3, r3, #1
 8008e7a:	4941      	ldr	r1, [pc, #260]	; (8008f80 <_fp_exptmod_ct+0x2bc>)
 8008e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e80:	4023      	ands	r3, r4
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y]) +
 8008e82:	4413      	add	r3, r2
    fp_copy(&R[2],
 8008e84:	4619      	mov	r1, r3
 8008e86:	f001 fec7 	bl	800ac18 <fp_copy>

    /* instead of using R[y] for sqr, which leaks key bit to cache monitor,
     * use R[2] as temp, make sure address calc is constant, keep
     * &R[0] and &R[1] in cache */
    fp_copy((fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	f083 0301 	eor.w	r3, r3, #1
 8008e90:	4a3b      	ldr	r2, [pc, #236]	; (8008f80 <_fp_exptmod_ct+0x2bc>)
 8008e92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e98:	401a      	ands	r2, r3
                        ((wc_ptr_t)&R[1] & wc_off_on_addr[y]) ),
 8008e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	4937      	ldr	r1, [pc, #220]	; (8008f80 <_fp_exptmod_ct+0x2bc>)
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008eaa:	4003      	ands	r3, r0
    fp_copy((fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 8008eac:	4413      	add	r3, r2
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb2:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f001 fead 	bl	800ac18 <fp_copy>
            &R[2]);
    err = fp_sqr(&R[2], &R[2]);
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f000 fdfa 	bl	8009ac6 <fp_sqr>
 8008ed2:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <_fp_exptmod_ct+0x22a>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <_fp_exptmod_ct+0x226>
 8008ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee6:	f7fb fadd 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eec:	e043      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
    }
    err = fp_montgomery_reduce(&R[2], P, mp);
 8008eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 fa95 	bl	800a428 <fp_montgomery_reduce>
 8008efe:	6438      	str	r0, [r7, #64]	; 0x40
    if (err != FP_OKAY) {
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <_fp_exptmod_ct+0x256>
    #ifdef WOLFSSL_SMALL_STACK
      XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <_fp_exptmod_ct+0x252>
 8008f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f12:	f7fb fac7 	bl	80044a4 <wolfSSL_Free>
    #endif
      return err;
 8008f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f18:	e02d      	b.n	8008f76 <_fp_exptmod_ct+0x2b2>
    }
    fp_copy(&R[2],
 8008f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1c:	f503 608a 	add.w	r0, r3, #1104	; 0x450
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	f083 0301 	eor.w	r3, r3, #1
 8008f26:	4a16      	ldr	r2, [pc, #88]	; (8008f80 <_fp_exptmod_ct+0x2bc>)
 8008f28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	401a      	ands	r2, r3
                        ((wc_ptr_t)&R[1] & wc_off_on_addr[y]) ) );
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8008f36:	461c      	mov	r4, r3
 8008f38:	4911      	ldr	r1, [pc, #68]	; (8008f80 <_fp_exptmod_ct+0x2bc>)
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f40:	4023      	ands	r3, r4
            (fp_int*) ( ((wc_ptr_t)&R[0] & wc_off_on_addr[y^1]) +
 8008f42:	4413      	add	r3, r2
    fp_copy(&R[2],
 8008f44:	4619      	mov	r1, r3
 8008f46:	f001 fe67 	bl	800ac18 <fp_copy>
    if (--bitcnt == 0) {
 8008f4a:	e73d      	b.n	8008dc8 <_fp_exptmod_ct+0x104>
        break;
 8008f4c:	bf00      	nop
#endif /* WC_NO_CACHE_RESISTANT */
  }

   err = fp_montgomery_reduce(&R[0], P, mp);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f56:	f001 fa67 	bl	800a428 <fp_montgomery_reduce>
 8008f5a:	6438      	str	r0, [r7, #64]	; 0x40
   fp_copy(&R[0], Y);
 8008f5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f60:	f001 fe5a 	bl	800ac18 <fp_copy>
#ifdef WOLFSSL_SMALL_STACK
   XFREE(R, NULL, DYNAMIC_TYPE_BIGINT);
 8008f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <_fp_exptmod_ct+0x2b0>
 8008f6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f70:	f7fb fa98 	bl	80044a4 <wolfSSL_Free>
#endif
   return err;
 8008f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3754      	adds	r7, #84	; 0x54
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd90      	pop	{r4, r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	0800cbf8 	.word	0x0800cbf8

08008f84 <_fp_exptmod_nct>:

/* y = g**x (mod b)
 * Some restrictions... x must be positive and < b
 */
static int _fp_exptmod_nct(fp_int * G, fp_int * X, fp_int * P, fp_int * Y)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b0a4      	sub	sp, #144	; 0x90
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
#else
  fp_int   M[(1 << 6) + 1];
#endif

  /* find window size */
  x = fp_count_bits (X);
 8008f92:	68b8      	ldr	r0, [r7, #8]
 8008f94:	f001 fb4f 	bl	800a636 <fp_count_bits>
 8008f98:	6778      	str	r0, [r7, #116]	; 0x74
  if (x <= 21) {
 8008f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f9c:	2b15      	cmp	r3, #21
 8008f9e:	dc02      	bgt.n	8008fa6 <_fp_exptmod_nct+0x22>
    winsize = 1;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8008fa4:	e014      	b.n	8008fd0 <_fp_exptmod_nct+0x4c>
  } else if (x <= 36) {
 8008fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fa8:	2b24      	cmp	r3, #36	; 0x24
 8008faa:	dc02      	bgt.n	8008fb2 <_fp_exptmod_nct+0x2e>
    winsize = 3;
 8008fac:	2303      	movs	r3, #3
 8008fae:	673b      	str	r3, [r7, #112]	; 0x70
 8008fb0:	e00e      	b.n	8008fd0 <_fp_exptmod_nct+0x4c>
  } else if (x <= 140) {
 8008fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb4:	2b8c      	cmp	r3, #140	; 0x8c
 8008fb6:	dc02      	bgt.n	8008fbe <_fp_exptmod_nct+0x3a>
    winsize = 4;
 8008fb8:	2304      	movs	r3, #4
 8008fba:	673b      	str	r3, [r7, #112]	; 0x70
 8008fbc:	e008      	b.n	8008fd0 <_fp_exptmod_nct+0x4c>
  } else if (x <= 450) {
 8008fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8008fc4:	dc02      	bgt.n	8008fcc <_fp_exptmod_nct+0x48>
    winsize = 5;
 8008fc6:	2305      	movs	r3, #5
 8008fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8008fca:	e001      	b.n	8008fd0 <_fp_exptmod_nct+0x4c>
  } else {
    winsize = 6;
 8008fcc:	2306      	movs	r3, #6
 8008fce:	673b      	str	r3, [r7, #112]	; 0x70
  }

  /* now setup montgomery  */
  if ((err = fp_montgomery_setup (P, &mp)) != FP_OKAY) {
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 f861 	bl	800a09e <fp_montgomery_setup>
 8008fdc:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <_fp_exptmod_nct+0x64>
     return err;
 8008fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe6:	e2a2      	b.n	800952e <_fp_exptmod_nct+0x5aa>
  }

#ifndef WOLFSSL_NO_MALLOC
  /* only allocate space for what's needed for window plus res */
  M = (fp_int*)XMALLOC(sizeof(fp_int)*((1 << winsize) + 1), NULL,
 8008fe8:	2201      	movs	r2, #1
 8008fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f44f 730a 	mov.w	r3, #552	; 0x228
 8008ff8:	fb02 f303 	mul.w	r3, r2, r3
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fb fa35 	bl	800446c <wolfSSL_Malloc>
 8009002:	66b8      	str	r0, [r7, #104]	; 0x68
                                                           DYNAMIC_TYPE_BIGINT);
  if (M == NULL) {
 8009004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <_fp_exptmod_nct+0x8c>
     return FP_MEM;
 800900a:	f06f 0301 	mvn.w	r3, #1
 800900e:	e28e      	b.n	800952e <_fp_exptmod_nct+0x5aa>
  }
#endif
  res = &M[(word32)(1 << winsize)];
 8009010:	f44f 720a 	mov.w	r2, #552	; 0x228
 8009014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009016:	fa02 f303 	lsl.w	r3, r2, r3
 800901a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800901c:	4413      	add	r3, r2
 800901e:	667b      	str	r3, [r7, #100]	; 0x64

  /* init M array */
  for(x = 0; x < (1 << winsize); x++)
 8009020:	2300      	movs	r3, #0
 8009022:	677b      	str	r3, [r7, #116]	; 0x74
 8009024:	e00c      	b.n	8009040 <_fp_exptmod_nct+0xbc>
    fp_init(&M[x]);
 8009026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009028:	f44f 720a 	mov.w	r2, #552	; 0x228
 800902c:	fb02 f303 	mul.w	r3, r2, r3
 8009030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009032:	4413      	add	r3, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f001 fc71 	bl	800a91c <fp_init>
  for(x = 0; x < (1 << winsize); x++)
 800903a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800903c:	3301      	adds	r3, #1
 800903e:	677b      	str	r3, [r7, #116]	; 0x74
 8009040:	2201      	movs	r2, #1
 8009042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009044:	fa02 f303 	lsl.w	r3, r2, r3
 8009048:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800904a:	429a      	cmp	r2, r3
 800904c:	dbeb      	blt.n	8009026 <_fp_exptmod_nct+0xa2>

  /* setup result */
  fp_init(res);
 800904e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009050:	f001 fc64 	bl	800a91c <fp_init>
   *
   * The first half of the table is not computed though except for M[0] and M[1]
   */

  /* now we need R mod m */
  err = fp_montgomery_calc_normalization (res, P);
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009058:	f001 f862 	bl	800a120 <fp_montgomery_calc_normalization>
 800905c:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (err != FP_OKAY) {
 800905e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d009      	beq.n	8009078 <_fp_exptmod_nct+0xf4>
#ifndef WOLFSSL_NO_MALLOC
    XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009066:	61bb      	str	r3, [r7, #24]
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <_fp_exptmod_nct+0xf0>
 800906e:	69b8      	ldr	r0, [r7, #24]
 8009070:	f7fb fa18 	bl	80044a4 <wolfSSL_Free>
#endif
    return err;
 8009074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009076:	e25a      	b.n	800952e <_fp_exptmod_nct+0x5aa>
  }

  /* now set M[1] to G * R mod m */
  if (fp_cmp_mag(P, G) != FP_GT) {
 8009078:	68f9      	ldr	r1, [r7, #12]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 ffca 	bl	800a014 <fp_cmp_mag>
 8009080:	4603      	mov	r3, r0
 8009082:	2b01      	cmp	r3, #1
 8009084:	d015      	beq.n	80090b2 <_fp_exptmod_nct+0x12e>
     /* G > P so we reduce it first */
     err = fp_mod(G, P, &M[1]);
 8009086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009088:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800908c:	461a      	mov	r2, r3
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff f8d2 	bl	800823a <fp_mod>
 8009096:	66f8      	str	r0, [r7, #108]	; 0x6c
     if (err != FP_OKAY) {
 8009098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d010      	beq.n	80090c0 <_fp_exptmod_nct+0x13c>
     #ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 800909e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090a0:	663b      	str	r3, [r7, #96]	; 0x60
 80090a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <_fp_exptmod_nct+0x12a>
 80090a8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80090aa:	f7fb f9fb 	bl	80044a4 <wolfSSL_Free>
     #endif
        return err;
 80090ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b0:	e23d      	b.n	800952e <_fp_exptmod_nct+0x5aa>
     }
  } else {
     fp_copy(G, &M[1]);
 80090b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090b4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80090b8:	4619      	mov	r1, r3
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f001 fdac 	bl	800ac18 <fp_copy>
  }
  err = fp_mulmod (&M[1], res, P, &M[1]);
 80090c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090c2:	f503 700a 	add.w	r0, r3, #552	; 0x228
 80090c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090c8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090d0:	f7ff fdc6 	bl	8008c60 <fp_mulmod>
 80090d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (err != FP_OKAY) {
 80090d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <_fp_exptmod_nct+0x16c>
  #ifndef WOLFSSL_NO_MALLOC
     XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80090dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <_fp_exptmod_nct+0x168>
 80090e6:	69f8      	ldr	r0, [r7, #28]
 80090e8:	f7fb f9dc 	bl	80044a4 <wolfSSL_Free>
  #endif
     return err;
 80090ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ee:	e21e      	b.n	800952e <_fp_exptmod_nct+0x5aa>
  }

  /* compute the value at M[1<<(winsize-1)] by
   * squaring M[1] (winsize-1) times */
  fp_copy (&M[1], &M[(word32)(1 << (winsize - 1))]);
 80090f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090f2:	f503 700a 	add.w	r0, r3, #552	; 0x228
 80090f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090f8:	3b01      	subs	r3, #1
 80090fa:	f44f 720a 	mov.w	r2, #552	; 0x228
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009104:	4413      	add	r3, r2
 8009106:	4619      	mov	r1, r3
 8009108:	f001 fd86 	bl	800ac18 <fp_copy>
  for (x = 0; x < (winsize - 1); x++) {
 800910c:	2300      	movs	r3, #0
 800910e:	677b      	str	r3, [r7, #116]	; 0x74
 8009110:	e03e      	b.n	8009190 <_fp_exptmod_nct+0x20c>
    err = fp_sqr (&M[(word32)(1 << (winsize - 1))],
 8009112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009114:	3b01      	subs	r3, #1
 8009116:	f44f 720a 	mov.w	r2, #552	; 0x228
 800911a:	fa02 f303 	lsl.w	r3, r2, r3
 800911e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009120:	18d0      	adds	r0, r2, r3
                  &M[(word32)(1 << (winsize - 1))]);
 8009122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009124:	3b01      	subs	r3, #1
 8009126:	f44f 720a 	mov.w	r2, #552	; 0x228
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
    err = fp_sqr (&M[(word32)(1 << (winsize - 1))],
 800912e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009130:	4413      	add	r3, r2
 8009132:	4619      	mov	r1, r3
 8009134:	f000 fcc7 	bl	8009ac6 <fp_sqr>
 8009138:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 800913a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d009      	beq.n	8009154 <_fp_exptmod_nct+0x1d0>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009142:	623b      	str	r3, [r7, #32]
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <_fp_exptmod_nct+0x1cc>
 800914a:	6a38      	ldr	r0, [r7, #32]
 800914c:	f7fb f9aa 	bl	80044a4 <wolfSSL_Free>
#endif
      return err;
 8009150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009152:	e1ec      	b.n	800952e <_fp_exptmod_nct+0x5aa>
    }
    err = fp_montgomery_reduce_ex(&M[(word32)(1 << (winsize - 1))], P, mp, 0);
 8009154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009156:	3b01      	subs	r3, #1
 8009158:	f44f 720a 	mov.w	r2, #552	; 0x228
 800915c:	fa02 f303 	lsl.w	r3, r2, r3
 8009160:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009162:	18d0      	adds	r0, r2, r3
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	2300      	movs	r3, #0
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	f001 f82b 	bl	800a1c4 <fp_montgomery_reduce_ex>
 800916e:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 8009170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <_fp_exptmod_nct+0x206>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <_fp_exptmod_nct+0x202>
 8009180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009182:	f7fb f98f 	bl	80044a4 <wolfSSL_Free>
#endif
      return err;
 8009186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009188:	e1d1      	b.n	800952e <_fp_exptmod_nct+0x5aa>
  for (x = 0; x < (winsize - 1); x++) {
 800918a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918c:	3301      	adds	r3, #1
 800918e:	677b      	str	r3, [r7, #116]	; 0x74
 8009190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009192:	3b01      	subs	r3, #1
 8009194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009196:	429a      	cmp	r2, r3
 8009198:	dbbb      	blt.n	8009112 <_fp_exptmod_nct+0x18e>
    }
  }

  /* create upper table */
  for (x = (1 << (winsize - 1)) + 1; x < (1 << winsize); x++) {
 800919a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800919c:	3b01      	subs	r3, #1
 800919e:	2201      	movs	r2, #1
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	3301      	adds	r3, #1
 80091a6:	677b      	str	r3, [r7, #116]	; 0x74
 80091a8:	e040      	b.n	800922c <_fp_exptmod_nct+0x2a8>
    err = fp_mul(&M[x - 1], &M[1], &M[x]);
 80091aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ac:	f44f 720a 	mov.w	r2, #552	; 0x228
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80091b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091ba:	18d0      	adds	r0, r2, r3
 80091bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091be:	f503 710a 	add.w	r1, r3, #552	; 0x228
 80091c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c4:	f44f 720a 	mov.w	r2, #552	; 0x228
 80091c8:	fb02 f303 	mul.w	r3, r2, r3
 80091cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091ce:	4413      	add	r3, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	f7fe f982 	bl	80074da <fp_mul>
 80091d6:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 80091d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <_fp_exptmod_nct+0x26e>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80091de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <_fp_exptmod_nct+0x26a>
 80091e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ea:	f7fb f95b 	bl	80044a4 <wolfSSL_Free>
#endif
      return err;
 80091ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f0:	e19d      	b.n	800952e <_fp_exptmod_nct+0x5aa>
    }
    err = fp_montgomery_reduce_ex(&M[x], P, mp, 0);
 80091f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f4:	f44f 720a 	mov.w	r2, #552	; 0x228
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091fe:	18d0      	adds	r0, r2, r3
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	f000 ffdd 	bl	800a1c4 <fp_montgomery_reduce_ex>
 800920a:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != FP_OKAY) {
 800920c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <_fp_exptmod_nct+0x2a2>
#ifndef WOLFSSL_NO_MALLOC
      XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <_fp_exptmod_nct+0x29e>
 800921c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800921e:	f7fb f941 	bl	80044a4 <wolfSSL_Free>
#endif
      return err;
 8009222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009224:	e183      	b.n	800952e <_fp_exptmod_nct+0x5aa>
  for (x = (1 << (winsize - 1)) + 1; x < (1 << winsize); x++) {
 8009226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009228:	3301      	adds	r3, #1
 800922a:	677b      	str	r3, [r7, #116]	; 0x74
 800922c:	2201      	movs	r2, #1
 800922e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009236:	429a      	cmp	r2, r3
 8009238:	dbb7      	blt.n	80091aa <_fp_exptmod_nct+0x226>
    }
  }

  /* set initial mode and bit cnt */
  mode   = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	67fb      	str	r3, [r7, #124]	; 0x7c
  bitcnt = (x % DIGIT_BIT) + 1;
 800923e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009240:	425a      	negs	r2, r3
 8009242:	f003 031f 	and.w	r3, r3, #31
 8009246:	f002 021f 	and.w	r2, r2, #31
 800924a:	bf58      	it	pl
 800924c:	4253      	negpl	r3, r2
 800924e:	3301      	adds	r3, #1
 8009250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  buf    = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  digidx = X->used - 1;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3b01      	subs	r3, #1
 8009260:	67bb      	str	r3, [r7, #120]	; 0x78
  bitcpy = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  bitbuf = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  for (;;) {
    /* grab next digit as required */
    if (--bitcnt == 0) {
 800926e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009272:	3b01      	subs	r3, #1
 8009274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800927c:	2b00      	cmp	r3, #0
 800927e:	d110      	bne.n	80092a2 <_fp_exptmod_nct+0x31e>
      /* if digidx == -1 we are out of digits so break */
      if (digidx == -1) {
 8009280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	f000 80cd 	beq.w	8009424 <_fp_exptmod_nct+0x4a0>
        break;
      }
      /* read next digit and reset bitcnt */
      buf    = X->dp[digidx--];
 800928a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	67ba      	str	r2, [r7, #120]	; 0x78
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	3302      	adds	r3, #2
 8009294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bitcnt = (int)DIGIT_BIT;
 800929c:	2320      	movs	r3, #32
 800929e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    /* grab the next msb from the exponent */
    y     = (int)(buf >> (DIGIT_BIT - 1)) & 1;
 80092a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092a6:	0fdb      	lsrs	r3, r3, #31
 80092a8:	64bb      	str	r3, [r7, #72]	; 0x48
    buf <<= (fp_digit)1;
 80092aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* if the bit is zero and mode == 0 then we ignore it
     * These represent the leading zero bits before the first 1 bit
     * in the exponent.  Technically this opt is not required but it
     * does lower the # of trivial squaring/reductions used
     */
    if (mode == 0 && y == 0) {
 80092b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d103      	bne.n	80092c2 <_fp_exptmod_nct+0x33e>
 80092ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80ad 	beq.w	800941c <_fp_exptmod_nct+0x498>
      continue;
    }

    /* if the bit is zero and mode == 1 then we square */
    if (mode == 1 && y == 0) {
 80092c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d129      	bne.n	800931c <_fp_exptmod_nct+0x398>
 80092c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d126      	bne.n	800931c <_fp_exptmod_nct+0x398>
      err = fp_sqr(res, res);
 80092ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092d2:	f000 fbf8 	bl	8009ac6 <fp_sqr>
 80092d6:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 80092d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <_fp_exptmod_nct+0x36e>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80092de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092e0:	643b      	str	r3, [r7, #64]	; 0x40
 80092e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <_fp_exptmod_nct+0x36a>
 80092e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80092ea:	f7fb f8db 	bl	80044a4 <wolfSSL_Free>
#endif
        return err;
 80092ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f0:	e11d      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      }
      err = fp_montgomery_reduce_ex(res, P, mp, 0);
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	2300      	movs	r3, #0
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092fa:	f000 ff63 	bl	800a1c4 <fp_montgomery_reduce_ex>
 80092fe:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 8009300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 808c 	beq.w	8009420 <_fp_exptmod_nct+0x49c>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800930a:	647b      	str	r3, [r7, #68]	; 0x44
 800930c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <_fp_exptmod_nct+0x394>
 8009312:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009314:	f7fb f8c6 	bl	80044a4 <wolfSSL_Free>
#endif
        return err;
 8009318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931a:	e108      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      }
      continue;
    }

    /* else we add it to the window */
    bitbuf |= (y << (winsize - ++bitcpy));
 800931c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009320:	3301      	adds	r3, #1
 8009322:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009326:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    mode    = 2;
 800933e:	2302      	movs	r3, #2
 8009340:	67fb      	str	r3, [r7, #124]	; 0x7c

    if (bitcpy == winsize) {
 8009342:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009348:	429a      	cmp	r2, r3
 800934a:	d190      	bne.n	800926e <_fp_exptmod_nct+0x2ea>
      /* ok window is filled so square as required and multiply  */
      /* square first */
      for (x = 0; x < winsize; x++) {
 800934c:	2300      	movs	r3, #0
 800934e:	677b      	str	r3, [r7, #116]	; 0x74
 8009350:	e028      	b.n	80093a4 <_fp_exptmod_nct+0x420>
        err = fp_sqr(res, res);
 8009352:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009354:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009356:	f000 fbb6 	bl	8009ac6 <fp_sqr>
 800935a:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d009      	beq.n	8009376 <_fp_exptmod_nct+0x3f2>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009364:	633b      	str	r3, [r7, #48]	; 0x30
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <_fp_exptmod_nct+0x3ee>
 800936c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800936e:	f7fb f899 	bl	80044a4 <wolfSSL_Free>
#endif
          return err;
 8009372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009374:	e0db      	b.n	800952e <_fp_exptmod_nct+0x5aa>
        }
        err = fp_montgomery_reduce_ex(res, P, mp, 0);
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	2300      	movs	r3, #0
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800937e:	f000 ff21 	bl	800a1c4 <fp_montgomery_reduce_ex>
 8009382:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 8009384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <_fp_exptmod_nct+0x41a>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 800938a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800938c:	637b      	str	r3, [r7, #52]	; 0x34
 800938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <_fp_exptmod_nct+0x416>
 8009394:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009396:	f7fb f885 	bl	80044a4 <wolfSSL_Free>
#endif
          return err;
 800939a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939c:	e0c7      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      for (x = 0; x < winsize; x++) {
 800939e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093a0:	3301      	adds	r3, #1
 80093a2:	677b      	str	r3, [r7, #116]	; 0x74
 80093a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80093a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093a8:	429a      	cmp	r2, r3
 80093aa:	dbd2      	blt.n	8009352 <_fp_exptmod_nct+0x3ce>
        }
      }

      /* then multiply */
      err = fp_mul(res, &M[bitbuf], res);
 80093ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093b0:	f44f 720a 	mov.w	r2, #552	; 0x228
 80093b4:	fb02 f303 	mul.w	r3, r2, r3
 80093b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093ba:	4413      	add	r3, r2
 80093bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093be:	4619      	mov	r1, r3
 80093c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80093c2:	f7fe f88a 	bl	80074da <fp_mul>
 80093c6:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 80093c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <_fp_exptmod_nct+0x45e>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80093ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <_fp_exptmod_nct+0x45a>
 80093d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093da:	f7fb f863 	bl	80044a4 <wolfSSL_Free>
#endif
        return err;
 80093de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e0:	e0a5      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      }
      err = fp_montgomery_reduce_ex(res, P, mp, 0);
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	2300      	movs	r3, #0
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80093ea:	f000 feeb 	bl	800a1c4 <fp_montgomery_reduce_ex>
 80093ee:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 80093f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d009      	beq.n	800940a <_fp_exptmod_nct+0x486>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80093f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <_fp_exptmod_nct+0x482>
 8009400:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009402:	f7fb f84f 	bl	80044a4 <wolfSSL_Free>
#endif
        return err;
 8009406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009408:	e091      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      }

      /* empty window and reset */
      bitcpy = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      bitbuf = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      mode   = 1;
 8009416:	2301      	movs	r3, #1
 8009418:	67fb      	str	r3, [r7, #124]	; 0x7c
 800941a:	e728      	b.n	800926e <_fp_exptmod_nct+0x2ea>
      continue;
 800941c:	bf00      	nop
 800941e:	e726      	b.n	800926e <_fp_exptmod_nct+0x2ea>
      continue;
 8009420:	bf00      	nop
    if (--bitcnt == 0) {
 8009422:	e724      	b.n	800926e <_fp_exptmod_nct+0x2ea>
        break;
 8009424:	bf00      	nop
    }
  }

  /* if bits remain then square/multiply */
  if (mode == 2 && bitcpy > 0) {
 8009426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009428:	2b02      	cmp	r3, #2
 800942a:	d16c      	bne.n	8009506 <_fp_exptmod_nct+0x582>
 800942c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009430:	2b00      	cmp	r3, #0
 8009432:	dd68      	ble.n	8009506 <_fp_exptmod_nct+0x582>
    /* square then multiply if the bit is set */
    for (x = 0; x < bitcpy; x++) {
 8009434:	2300      	movs	r3, #0
 8009436:	677b      	str	r3, [r7, #116]	; 0x74
 8009438:	e060      	b.n	80094fc <_fp_exptmod_nct+0x578>
      err = fp_sqr(res, res);
 800943a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800943c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800943e:	f000 fb42 	bl	8009ac6 <fp_sqr>
 8009442:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 8009444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <_fp_exptmod_nct+0x4da>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 800944a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800944c:	653b      	str	r3, [r7, #80]	; 0x50
 800944e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <_fp_exptmod_nct+0x4d6>
 8009454:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009456:	f7fb f825 	bl	80044a4 <wolfSSL_Free>
#endif
        return err;
 800945a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945c:	e067      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      }
      err = fp_montgomery_reduce_ex(res, P, mp, 0);
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	2300      	movs	r3, #0
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009466:	f000 fead 	bl	800a1c4 <fp_montgomery_reduce_ex>
 800946a:	66f8      	str	r0, [r7, #108]	; 0x6c
      if (err != FP_OKAY) {
 800946c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <_fp_exptmod_nct+0x502>
#ifndef WOLFSSL_NO_MALLOC
        XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 8009472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009474:	657b      	str	r3, [r7, #84]	; 0x54
 8009476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <_fp_exptmod_nct+0x4fe>
 800947c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800947e:	f7fb f811 	bl	80044a4 <wolfSSL_Free>
#endif
        return err;
 8009482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009484:	e053      	b.n	800952e <_fp_exptmod_nct+0x5aa>
      }

      /* get next bit of the window */
      bitbuf <<= 1;
 8009486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      if ((bitbuf & (1 << winsize)) != 0) {
 8009490:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009496:	fa42 f303 	asr.w	r3, r2, r3
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d029      	beq.n	80094f6 <_fp_exptmod_nct+0x572>
        /* then multiply */
        err = fp_mul(res, &M[1], res);
 80094a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094a4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80094a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094aa:	4619      	mov	r1, r3
 80094ac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80094ae:	f7fe f814 	bl	80074da <fp_mul>
 80094b2:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 80094b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <_fp_exptmod_nct+0x54a>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80094ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80094be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <_fp_exptmod_nct+0x546>
 80094c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80094c6:	f7fa ffed 	bl	80044a4 <wolfSSL_Free>
#endif
          return err;
 80094ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094cc:	e02f      	b.n	800952e <_fp_exptmod_nct+0x5aa>
        }
        err = fp_montgomery_reduce_ex(res, P, mp, 0);
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	2300      	movs	r3, #0
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80094d6:	f000 fe75 	bl	800a1c4 <fp_montgomery_reduce_ex>
 80094da:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err != FP_OKAY) {
 80094dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d009      	beq.n	80094f6 <_fp_exptmod_nct+0x572>
#ifndef WOLFSSL_NO_MALLOC
          XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 80094e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <_fp_exptmod_nct+0x56e>
 80094ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80094ee:	f7fa ffd9 	bl	80044a4 <wolfSSL_Free>
#endif
          return err;
 80094f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f4:	e01b      	b.n	800952e <_fp_exptmod_nct+0x5aa>
    for (x = 0; x < bitcpy; x++) {
 80094f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094f8:	3301      	adds	r3, #1
 80094fa:	677b      	str	r3, [r7, #116]	; 0x74
 80094fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009502:	429a      	cmp	r2, r3
 8009504:	db99      	blt.n	800943a <_fp_exptmod_nct+0x4b6>
   * recall that any value in a Montgomery system is
   * actually multiplied by R mod n.  So we have
   * to reduce one more time to cancel out the factor
   * of R.
   */
  err = fp_montgomery_reduce_ex(res, P, mp, 0);
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	2300      	movs	r3, #0
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800950e:	f000 fe59 	bl	800a1c4 <fp_montgomery_reduce_ex>
 8009512:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* swap res with Y */
  fp_copy (res, Y);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009518:	f001 fb7e 	bl	800ac18 <fp_copy>

#ifndef WOLFSSL_NO_MALLOC
  XFREE(M, NULL, DYNAMIC_TYPE_BIGINT);
 800951c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800951e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <_fp_exptmod_nct+0x5a8>
 8009526:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009528:	f7fa ffbc 	bl	80044a4 <wolfSSL_Free>
#endif
  return err;
 800952c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800952e:	4618      	mov	r0, r3
 8009530:	3790      	adds	r7, #144	; 0x90
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <_fp_exptmod_base_2>:
/* y = 2**x (mod b)
 * Some restrictions... x must be positive and < b
 */
static int _fp_exptmod_base_2(fp_int * X, int digits, fp_int * P,
                              fp_int * Y)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b09c      	sub	sp, #112	; 0x70
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  fp_int   res[1];
  fp_int   tmp[1];
#endif

#ifdef WOLFSSL_SMALL_STACK
  res = (fp_int*)XMALLOC(2*sizeof(fp_int), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009546:	f44f 608a 	mov.w	r0, #1104	; 0x450
 800954a:	f7fa ff8f 	bl	800446c <wolfSSL_Malloc>
 800954e:	6578      	str	r0, [r7, #84]	; 0x54
  if (res == NULL) {
 8009550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009552:	2b00      	cmp	r3, #0
 8009554:	d102      	bne.n	800955c <_fp_exptmod_base_2+0x24>
     return FP_MEM;
 8009556:	f06f 0301 	mvn.w	r3, #1
 800955a:	e15b      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
  }
  tmp = &res[1];
 800955c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800955e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8009562:	653b      	str	r3, [r7, #80]	; 0x50
#endif

  /* now setup montgomery  */
  if ((err = fp_montgomery_setup(P, &mp)) != FP_OKAY) {
 8009564:	f107 0314 	add.w	r3, r7, #20
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fd97 	bl	800a09e <fp_montgomery_setup>
 8009570:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d009      	beq.n	800958c <_fp_exptmod_base_2+0x54>
#ifdef WOLFSSL_SMALL_STACK
     XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <_fp_exptmod_base_2+0x50>
 8009582:	69b8      	ldr	r0, [r7, #24]
 8009584:	f7fa ff8e 	bl	80044a4 <wolfSSL_Free>
#endif
     return err;
 8009588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958a:	e143      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
  }

  /* setup result */
  fp_init(res);
 800958c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800958e:	f001 f9c5 	bl	800a91c <fp_init>
  fp_init(tmp);
 8009592:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009594:	f001 f9c2 	bl	800a91c <fp_init>

  err = fp_mul_2d(P, 1 << WINSIZE, tmp);
 8009598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800959a:	2108      	movs	r1, #8
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7fe f8ec 	bl	800777a <fp_mul_2d>
 80095a2:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (err != FP_OKAY) {
 80095a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d009      	beq.n	80095be <_fp_exptmod_base_2+0x86>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80095aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <_fp_exptmod_base_2+0x82>
 80095b4:	69f8      	ldr	r0, [r7, #28]
 80095b6:	f7fa ff75 	bl	80044a4 <wolfSSL_Free>
  #endif
    return err;
 80095ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095bc:	e12a      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
  }

  /* now we need R mod m */
  err = fp_montgomery_calc_normalization(res, P);
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80095c2:	f000 fdad 	bl	800a120 <fp_montgomery_calc_normalization>
 80095c6:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (err != FP_OKAY) {
 80095c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <_fp_exptmod_base_2+0xaa>
  #ifdef WOLFSSL_SMALL_STACK
    XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80095ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d0:	623b      	str	r3, [r7, #32]
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <_fp_exptmod_base_2+0xa6>
 80095d8:	6a38      	ldr	r0, [r7, #32]
 80095da:	f7fa ff63 	bl	80044a4 <wolfSSL_Free>
  #endif
    return err;
 80095de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e0:	e118      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
  }

  /* Get the top bits left over after taking WINSIZE bits starting at the
   * least-significant.
   */
  digidx = digits - 1;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  bitcpy = (digits * DIGIT_BIT) % WINSIZE;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	4b8b      	ldr	r3, [pc, #556]	; (800981c <_fp_exptmod_base_2+0x2e4>)
 80095ee:	fb83 3102 	smull	r3, r1, r3, r2
 80095f2:	17d3      	asrs	r3, r2, #31
 80095f4:	1ac9      	subs	r1, r1, r3
 80095f6:	460b      	mov	r3, r1
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	440b      	add	r3, r1
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	667b      	str	r3, [r7, #100]	; 0x64
  if (bitcpy > 0) {
 8009600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd52      	ble.n	80096ac <_fp_exptmod_base_2+0x174>
      bitcnt = (int)DIGIT_BIT - bitcpy;
 8009606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009608:	f1c3 0320 	rsb	r3, r3, #32
 800960c:	663b      	str	r3, [r7, #96]	; 0x60
      buf    = X->dp[digidx--];
 800960e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009610:	1e5a      	subs	r2, r3, #1
 8009612:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	3302      	adds	r3, #2
 8009618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800961c:	66fb      	str	r3, [r7, #108]	; 0x6c
      bitbuf = (int)(buf >> bitcnt);
 800961e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009622:	fa22 f303 	lsr.w	r3, r2, r3
 8009626:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Multiply montgomery representation of 1 by 2 ^ top */
      err = fp_mul_2d(res, bitbuf, res);
 8009628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800962a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800962c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800962e:	f7fe f8a4 	bl	800777a <fp_mul_2d>
 8009632:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 8009634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <_fp_exptmod_base_2+0x116>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800963a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963c:	643b      	str	r3, [r7, #64]	; 0x40
 800963e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <_fp_exptmod_base_2+0x112>
 8009644:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009646:	f7fa ff2d 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 800964a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964c:	e0e2      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      }
      err = fp_add(res, tmp, res);
 800964e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009650:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009652:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009654:	f7fd fd68 	bl	8007128 <fp_add>
 8009658:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 800965a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965c:	2b00      	cmp	r3, #0
 800965e:	d009      	beq.n	8009674 <_fp_exptmod_base_2+0x13c>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009662:	647b      	str	r3, [r7, #68]	; 0x44
 8009664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <_fp_exptmod_base_2+0x138>
 800966a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800966c:	f7fa ff1a 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8009670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009672:	e0cf      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      }
      err = fp_mod(res, P, res);
 8009674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800967a:	f7fe fdde 	bl	800823a <fp_mod>
 800967e:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 8009680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d009      	beq.n	800969a <_fp_exptmod_base_2+0x162>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009688:	64bb      	str	r3, [r7, #72]	; 0x48
 800968a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <_fp_exptmod_base_2+0x15e>
 8009690:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009692:	f7fa ff07 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8009696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009698:	e0bc      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      }
      /* Move out bits used */
      buf  <<= bitcpy;
 800969a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800969c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	66fb      	str	r3, [r7, #108]	; 0x6c
      bitcnt++;
 80096a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a6:	3301      	adds	r3, #1
 80096a8:	663b      	str	r3, [r7, #96]	; 0x60
 80096aa:	e003      	b.n	80096b4 <_fp_exptmod_base_2+0x17c>
  }
  else {
      bitcnt = 1;
 80096ac:	2301      	movs	r3, #1
 80096ae:	663b      	str	r3, [r7, #96]	; 0x60
      buf    = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* empty window and reset  */
  bitbuf = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	66bb      	str	r3, [r7, #104]	; 0x68
  bitcpy = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	667b      	str	r3, [r7, #100]	; 0x64

  for (;;) {
    /* grab next digit as required */
    if (--bitcnt == 0) {
 80096bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096be:	3b01      	subs	r3, #1
 80096c0:	663b      	str	r3, [r7, #96]	; 0x60
 80096c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10e      	bne.n	80096e6 <_fp_exptmod_base_2+0x1ae>
      /* if digidx == -1 we are out of digits so break */
      if (digidx == -1) {
 80096c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	f000 808c 	beq.w	80097ea <_fp_exptmod_base_2+0x2b2>
        break;
      }
      /* read next digit and reset bitcnt */
      buf    = X->dp[digidx--];
 80096d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096d4:	1e5a      	subs	r2, r3, #1
 80096d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	3302      	adds	r3, #2
 80096dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e0:	66fb      	str	r3, [r7, #108]	; 0x6c
      bitcnt = (int)DIGIT_BIT;
 80096e2:	2320      	movs	r3, #32
 80096e4:	663b      	str	r3, [r7, #96]	; 0x60
    }

    /* grab the next msb from the exponent */
    y       = (int)(buf >> (DIGIT_BIT - 1)) & 1;
 80096e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e8:	0fdb      	lsrs	r3, r3, #31
 80096ea:	63bb      	str	r3, [r7, #56]	; 0x38
    buf   <<= (fp_digit)1;
 80096ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* add bit to the window */
  #ifndef WC_PROTECT_ENCRYPTED_MEM
    bitbuf |= (y << (WINSIZE - ++bitcpy));
 80096f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f4:	3301      	adds	r3, #1
 80096f6:	667b      	str	r3, [r7, #100]	; 0x64
 80096f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096fa:	f1c3 0303 	rsb	r3, r3, #3
 80096fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009700:	fa02 f303 	lsl.w	r3, r2, r3
 8009704:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009706:	4313      	orrs	r3, r2
 8009708:	66bb      	str	r3, [r7, #104]	; 0x68
  #else
    /* Ensure value changes even when y is zero. */
    bitbuf += (WINMASK + 1) + (y << (WINSIZE - ++bitcpy));
  #endif

    if (bitcpy == WINSIZE) {
 800970a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970c:	2b03      	cmp	r3, #3
 800970e:	d1d5      	bne.n	80096bc <_fp_exptmod_base_2+0x184>
      /* ok window is filled so square as required and multiply  */
      /* square first */
      for (x = 0; x < WINSIZE; x++) {
 8009710:	2300      	movs	r3, #0
 8009712:	65bb      	str	r3, [r7, #88]	; 0x58
 8009714:	e028      	b.n	8009768 <_fp_exptmod_base_2+0x230>
        err = fp_sqr(res, res);
 8009716:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009718:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800971a:	f000 f9d4 	bl	8009ac6 <fp_sqr>
 800971e:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err != FP_OKAY) {
 8009720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d009      	beq.n	800973a <_fp_exptmod_base_2+0x202>
        #ifdef WOLFSSL_SMALL_STACK
          XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <_fp_exptmod_base_2+0x1fe>
 8009730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009732:	f7fa feb7 	bl	80044a4 <wolfSSL_Free>
        #endif
          return err;
 8009736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009738:	e06c      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
        }
        err = fp_montgomery_reduce(res, P, mp);
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	461a      	mov	r2, r3
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009742:	f000 fe71 	bl	800a428 <fp_montgomery_reduce>
 8009746:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err != FP_OKAY) {
 8009748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d009      	beq.n	8009762 <_fp_exptmod_base_2+0x22a>
        #ifdef WOLFSSL_SMALL_STACK
          XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009750:	62bb      	str	r3, [r7, #40]	; 0x28
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <_fp_exptmod_base_2+0x226>
 8009758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975a:	f7fa fea3 	bl	80044a4 <wolfSSL_Free>
        #endif
          return err;
 800975e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009760:	e058      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      for (x = 0; x < WINSIZE; x++) {
 8009762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009764:	3301      	adds	r3, #1
 8009766:	65bb      	str	r3, [r7, #88]	; 0x58
 8009768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800976a:	2b02      	cmp	r3, #2
 800976c:	ddd3      	ble.n	8009716 <_fp_exptmod_base_2+0x1de>
        }
      }

      /* then multiply by 2^bitbuf */
    #ifndef WC_PROTECT_ENCRYPTED_MEM
      err = fp_mul_2d(res, bitbuf, res);
 800976e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009770:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009772:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009774:	f7fe f801 	bl	800777a <fp_mul_2d>
 8009778:	64f8      	str	r0, [r7, #76]	; 0x4c
    #else
      /* Get the window bits. */
      err = fp_mul_2d(res, bitbuf & WINMASK, res);
    #endif
      if (err != FP_OKAY) {
 800977a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d009      	beq.n	8009794 <_fp_exptmod_base_2+0x25c>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <_fp_exptmod_base_2+0x258>
 800978a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800978c:	f7fa fe8a 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 8009790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009792:	e03f      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      }
      /* Add in value to make mod operation take same time */
      err = fp_add(res, tmp, res);
 8009794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009798:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800979a:	f7fd fcc5 	bl	8007128 <fp_add>
 800979e:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 80097a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <_fp_exptmod_base_2+0x282>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80097a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a8:	633b      	str	r3, [r7, #48]	; 0x30
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <_fp_exptmod_base_2+0x27e>
 80097b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b2:	f7fa fe77 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 80097b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b8:	e02c      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      }
      err = fp_mod(res, P, res);
 80097ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80097c0:	f7fe fd3b 	bl	800823a <fp_mod>
 80097c4:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (err != FP_OKAY) {
 80097c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d009      	beq.n	80097e0 <_fp_exptmod_base_2+0x2a8>
      #ifdef WOLFSSL_SMALL_STACK
        XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80097cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <_fp_exptmod_base_2+0x2a4>
 80097d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097d8:	f7fa fe64 	bl	80044a4 <wolfSSL_Free>
      #endif
        return err;
 80097dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097de:	e019      	b.n	8009814 <_fp_exptmod_base_2+0x2dc>
      }

      /* empty window and reset */
      bitcpy = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	667b      	str	r3, [r7, #100]	; 0x64
    #ifndef WC_PROTECT_ENCRYPTED_MEM
      bitbuf = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (--bitcnt == 0) {
 80097e8:	e768      	b.n	80096bc <_fp_exptmod_base_2+0x184>
        break;
 80097ea:	bf00      	nop
   * recall that any value in a Montgomery system is
   * actually multiplied by R mod n.  So we have
   * to reduce one more time to cancel out the factor
   * of R.
   */
  err = fp_montgomery_reduce(res, P, mp);
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	461a      	mov	r2, r3
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80097f4:	f000 fe18 	bl	800a428 <fp_montgomery_reduce>
 80097f8:	64f8      	str	r0, [r7, #76]	; 0x4c

  /* swap res with Y */
  fp_copy(res, Y);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80097fe:	f001 fa0b 	bl	800ac18 <fp_copy>

#ifdef WOLFSSL_SMALL_STACK
  XFREE(res, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <_fp_exptmod_base_2+0x2da>
 800980c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800980e:	f7fa fe49 	bl	80044a4 <wolfSSL_Free>
#endif
  return err;
 8009812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009814:	4618      	mov	r0, r3
 8009816:	3770      	adds	r7, #112	; 0x70
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	55555556 	.word	0x55555556

08009820 <fp_exptmod>:
#undef WINSIZE
#endif


int fp_exptmod(fp_int * G, fp_int * X, fp_int * P, fp_int * Y)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	; 0x28
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	603b      	str	r3, [r7, #0]
   !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI)
   int x = fp_count_bits (X);
#endif

   /* handle modulus of zero and prevent overflows */
   if (fp_iszero(P) || (P->used > (FP_SIZE/2))) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <fp_exptmod+0x1e>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b44      	cmp	r3, #68	; 0x44
 800983c:	dd02      	ble.n	8009844 <fp_exptmod+0x24>
      return FP_VAL;
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
 8009842:	e09c      	b.n	800997e <fp_exptmod+0x15e>
   }
   if (fp_isone(P)) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d10d      	bne.n	8009868 <fp_exptmod+0x48>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d109      	bne.n	8009868 <fp_exptmod+0x48>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d105      	bne.n	8009868 <fp_exptmod+0x48>
      fp_set(Y, 0);
 800985c:	2100      	movs	r1, #0
 800985e:	6838      	ldr	r0, [r7, #0]
 8009860:	f000 fed0 	bl	800a604 <fp_set>
      return FP_OKAY;
 8009864:	2300      	movs	r3, #0
 8009866:	e08a      	b.n	800997e <fp_exptmod+0x15e>
   }
   if (fp_iszero(X)) {
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d105      	bne.n	800987c <fp_exptmod+0x5c>
      fp_set(Y, 1);
 8009870:	2101      	movs	r1, #1
 8009872:	6838      	ldr	r0, [r7, #0]
 8009874:	f000 fec6 	bl	800a604 <fp_set>
      return FP_OKAY;
 8009878:	2300      	movs	r3, #0
 800987a:	e080      	b.n	800997e <fp_exptmod+0x15e>
   }
   if (fp_iszero(G)) {
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <fp_exptmod+0x70>
      fp_set(Y, 0);
 8009884:	2100      	movs	r1, #0
 8009886:	6838      	ldr	r0, [r7, #0]
 8009888:	f000 febc 	bl	800a604 <fp_set>
      return FP_OKAY;
 800988c:	2300      	movs	r3, #0
 800988e:	e076      	b.n	800997e <fp_exptmod+0x15e>
   if(x > EPS_RSA_EXPT_XBTIS) {
      return esp_mp_exptmod(G, X, x, P, Y);
   }
#endif

   if (X->sign == FP_NEG) {
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d157      	bne.n	8009948 <fp_exptmod+0x128>
   #else
      fp_int *tmp;
   #endif

   #ifdef WOLFSSL_SMALL_STACK
      tmp = (fp_int*)XMALLOC(sizeof(fp_int) * 2, NULL, DYNAMIC_TYPE_BIGINT);
 8009898:	f44f 608a 	mov.w	r0, #1104	; 0x450
 800989c:	f7fa fde6 	bl	800446c <wolfSSL_Malloc>
 80098a0:	61b8      	str	r0, [r7, #24]
      if (tmp == NULL)
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d102      	bne.n	80098ae <fp_exptmod+0x8e>
          return FP_MEM;
 80098a8:	f06f 0301 	mvn.w	r3, #1
 80098ac:	e067      	b.n	800997e <fp_exptmod+0x15e>
   #endif

      /* yes, copy G and invmod it */
      fp_init_copy(&tmp[0], G);
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	69b8      	ldr	r0, [r7, #24]
 80098b2:	f001 f9d0 	bl	800ac56 <fp_init_copy>
      fp_init_copy(&tmp[1], P);
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 f9c9 	bl	800ac56 <fp_init_copy>
      tmp[1].sign = FP_ZPOS;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80098ca:	2200      	movs	r2, #0
 80098cc:	605a      	str	r2, [r3, #4]
      err = fp_invmod(&tmp[0], &tmp[1], &tmp[0]);
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	4619      	mov	r1, r3
 80098d8:	69b8      	ldr	r0, [r7, #24]
 80098da:	f7fe fffe 	bl	80088da <fp_invmod>
 80098de:	61f8      	str	r0, [r7, #28]
      if (err == FP_OKAY) {
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d126      	bne.n	8009934 <fp_exptmod+0x114>
         fp_copy(X, &tmp[1]);
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80098ec:	4619      	mov	r1, r3
 80098ee:	68b8      	ldr	r0, [r7, #8]
 80098f0:	f001 f992 	bl	800ac18 <fp_copy>
         tmp[1].sign = FP_ZPOS;
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80098fa:	2200      	movs	r2, #0
 80098fc:	605a      	str	r2, [r3, #4]
#ifdef TFM_TIMING_RESISTANT
         err =  _fp_exptmod_ct(&tmp[0], &tmp[1], tmp[1].used, P, Y);
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	f503 710a 	add.w	r1, r3, #552	; 0x228
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	69b8      	ldr	r0, [r7, #24]
 8009914:	f7ff f9d6 	bl	8008cc4 <_fp_exptmod_ct>
 8009918:	61f8      	str	r0, [r7, #28]
#else
         err =  _fp_exptmod_nct(&tmp[0], &tmp[1], P, Y);
#endif
         if ((err == 0) && (P->sign == FP_NEG)) {
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d109      	bne.n	8009934 <fp_exptmod+0x114>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d105      	bne.n	8009934 <fp_exptmod+0x114>
            err = fp_add(Y, P, Y);
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	6838      	ldr	r0, [r7, #0]
 800992e:	f7fd fbfb 	bl	8007128 <fp_add>
 8009932:	61f8      	str	r0, [r7, #28]
         }
      }
   #ifdef WOLFSSL_SMALL_STACK
      XFREE(tmp, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <fp_exptmod+0x124>
 800993e:	6978      	ldr	r0, [r7, #20]
 8009940:	f7fa fdb0 	bl	80044a4 <wolfSSL_Free>
   #endif
      return err;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	e01a      	b.n	800997e <fp_exptmod+0x15e>
#else
      return FP_VAL;
#endif
   }
   else if (G->used == 1 && G->dp[0] == 2) {
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d10c      	bne.n	800996a <fp_exptmod+0x14a>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d108      	bne.n	800996a <fp_exptmod+0x14a>
      return _fp_exptmod_base_2(X, X->used, P, Y);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	68b8      	ldr	r0, [r7, #8]
 8009962:	f7ff fde9 	bl	8009538 <_fp_exptmod_base_2>
 8009966:	4603      	mov	r3, r0
 8009968:	e009      	b.n	800997e <fp_exptmod+0x15e>
   }
   else {
      /* Positive exponent so just exptmod */
#ifdef TFM_TIMING_RESISTANT
      return _fp_exptmod_ct(G, X, X->used, P, Y);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68b9      	ldr	r1, [r7, #8]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f7ff f9a4 	bl	8008cc4 <_fp_exptmod_ct>
 800997c:	4603      	mov	r3, r0
#else
      return _fp_exptmod_nct(G, X, P, Y);
#endif
   }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <fp_exptmod_nct>:
#endif
   }
}

int fp_exptmod_nct(fp_int * G, fp_int * X, fp_int * P, fp_int * Y)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b088      	sub	sp, #32
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	603b      	str	r3, [r7, #0]
#if defined(WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI) && \
   !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_RSA_PRI)
   int x = fp_count_bits (X);
#endif

   if (fp_iszero(G)) {
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d105      	bne.n	80099a8 <fp_exptmod_nct+0x22>
      fp_set(G, 0);
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fe30 	bl	800a604 <fp_set>
      return FP_OKAY;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e060      	b.n	8009a6a <fp_exptmod_nct+0xe4>
   }

   /* prevent overflows */
   if (P->used > (FP_SIZE/2)) {
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b44      	cmp	r3, #68	; 0x44
 80099ae:	dd02      	ble.n	80099b6 <fp_exptmod_nct+0x30>
      return FP_VAL;
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295
 80099b4:	e059      	b.n	8009a6a <fp_exptmod_nct+0xe4>
   if(x > EPS_RSA_EXPT_XBTIS) {
      return esp_mp_exptmod(G, X, x, P, Y);
   }
#endif

   if (X->sign == FP_NEG) {
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d14e      	bne.n	8009a5c <fp_exptmod_nct+0xd6>
   #else
      fp_int *tmp;
   #endif

   #ifdef WOLFSSL_SMALL_STACK
      tmp = (fp_int*)XMALLOC(sizeof(fp_int) * 2, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80099be:	f44f 608a 	mov.w	r0, #1104	; 0x450
 80099c2:	f7fa fd53 	bl	800446c <wolfSSL_Malloc>
 80099c6:	61b8      	str	r0, [r7, #24]
      if (tmp == NULL)
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <fp_exptmod_nct+0x4e>
          return FP_MEM;
 80099ce:	f06f 0301 	mvn.w	r3, #1
 80099d2:	e04a      	b.n	8009a6a <fp_exptmod_nct+0xe4>
   #endif

      /* yes, copy G and invmod it */
      fp_init_copy(&tmp[0], G);
 80099d4:	68f9      	ldr	r1, [r7, #12]
 80099d6:	69b8      	ldr	r0, [r7, #24]
 80099d8:	f001 f93d 	bl	800ac56 <fp_init_copy>
      fp_init_copy(&tmp[1], P);
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 f936 	bl	800ac56 <fp_init_copy>
      tmp[1].sign = FP_ZPOS;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80099f0:	2200      	movs	r2, #0
 80099f2:	605a      	str	r2, [r3, #4]
      err = fp_invmod(&tmp[0], &tmp[1], &tmp[0]);
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	4619      	mov	r1, r3
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f7fe ff6b 	bl	80088da <fp_invmod>
 8009a04:	61f8      	str	r0, [r7, #28]
      if (err == FP_OKAY) {
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11d      	bne.n	8009a48 <fp_exptmod_nct+0xc2>
         X->sign = FP_ZPOS;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	605a      	str	r2, [r3, #4]
         err =  _fp_exptmod_nct(&tmp[0], X, P, Y);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	68b9      	ldr	r1, [r7, #8]
 8009a18:	69b8      	ldr	r0, [r7, #24]
 8009a1a:	f7ff fab3 	bl	8008f84 <_fp_exptmod_nct>
 8009a1e:	61f8      	str	r0, [r7, #28]
         if (X != Y) {
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d002      	beq.n	8009a2e <fp_exptmod_nct+0xa8>
            X->sign = FP_NEG;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	605a      	str	r2, [r3, #4]
         }
         if ((err == 0) && (P->sign == FP_NEG)) {
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <fp_exptmod_nct+0xc2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <fp_exptmod_nct+0xc2>
            err = fp_add(Y, P, Y);
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	6838      	ldr	r0, [r7, #0]
 8009a42:	f7fd fb71 	bl	8007128 <fp_add>
 8009a46:	61f8      	str	r0, [r7, #28]
         }
      }
   #ifdef WOLFSSL_SMALL_STACK
      XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <fp_exptmod_nct+0xd2>
 8009a52:	6978      	ldr	r0, [r7, #20]
 8009a54:	f7fa fd26 	bl	80044a4 <wolfSSL_Free>
   #endif
      return err;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	e006      	b.n	8009a6a <fp_exptmod_nct+0xe4>
      return FP_VAL;
#endif
   }
   else {
      /* Positive exponent so just exptmod */
      return  _fp_exptmod_nct(G, X, P, Y);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff fa8e 	bl	8008f84 <_fp_exptmod_nct>
 8009a68:	4603      	mov	r3, r0
   }
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3720      	adds	r7, #32
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <fp_2expt>:

/* computes a = 2**b */
void fp_2expt(fp_int *a, int b)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
   int     z;

   /* zero a as per default */
   fp_zero (a);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 ff58 	bl	800a932 <fp_zero>

   if (b < 0) {
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	db18      	blt.n	8009aba <fp_2expt+0x48>
      return;
   }

   z = b / DIGIT_BIT;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	da00      	bge.n	8009a90 <fp_2expt+0x1e>
 8009a8e:	331f      	adds	r3, #31
 8009a90:	115b      	asrs	r3, r3, #5
 8009a92:	60fb      	str	r3, [r7, #12]
   if (z >= FP_SIZE) {
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b87      	cmp	r3, #135	; 0x87
 8009a98:	dc11      	bgt.n	8009abe <fp_2expt+0x4c>
      return;
   }

  /* set the used count of where the bit will go */
  a->used = z + 1;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	601a      	str	r2, [r3, #0]

  /* put the single bit in its place */
  a->dp[z] = ((fp_digit)1) << (b % DIGIT_BIT);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	f003 031f 	and.w	r3, r3, #31
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	fa02 f103 	lsl.w	r1, r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	3202      	adds	r2, #2
 8009ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009ab8:	e002      	b.n	8009ac0 <fp_2expt+0x4e>
      return;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <fp_2expt+0x4e>
      return;
 8009abe:	bf00      	nop
}
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <fp_sqr>:

/* b = a*a  */
int fp_sqr(fp_int *A, fp_int *B)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b086      	sub	sp, #24
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
    int err;
    int y, oldused;

    oldused = B->used;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60fb      	str	r3, [r7, #12]
    y = A->used;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	613b      	str	r3, [r7, #16]

    /* error if we're out of range */
    if (y + y >= FP_SIZE) {
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	2b87      	cmp	r3, #135	; 0x87
 8009ae2:	dd03      	ble.n	8009aec <fp_sqr+0x26>
       err = FP_VAL;
 8009ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae8:	617b      	str	r3, [r7, #20]
       goto clean;
 8009aea:	e004      	b.n	8009af6 <fp_sqr+0x30>
        if (y <= 64) {
           err = fp_sqr_comba64(A,B);
           goto clean;
        }
#endif
       err = fp_sqr_comba(A, B);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f81a 	bl	8009b28 <fp_sqr_comba>
 8009af4:	6178      	str	r0, [r7, #20]

clean:
  /* zero any excess digits on the destination that we didn't write to */
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	613b      	str	r3, [r7, #16]
 8009afc:	e008      	b.n	8009b10 <fp_sqr+0x4a>
    B->dp[y] = 0;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	3202      	adds	r2, #2
 8009b04:	2100      	movs	r1, #0
 8009b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (y = B->used; y >= 0 && y < oldused; y++) {
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	db03      	blt.n	8009b1e <fp_sqr+0x58>
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	dbef      	blt.n	8009afe <fp_sqr+0x38>
  }

  return err;
 8009b1e:	697b      	ldr	r3, [r7, #20]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <fp_sqr_comba>:

/* generic comba squarer */
int fp_sqr_comba(fp_int *A, fp_int *B)
{
 8009b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b2c:	b0b6      	sub	sp, #216	; 0xd8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	67f8      	str	r0, [r7, #124]	; 0x7c
 8009b32:	67b9      	str	r1, [r7, #120]	; 0x78
  int       pa, ix, iz;
  fp_digit  c0, c1, c2;
#ifdef TFM_ISO
  fp_word   tt = 0;
 8009b34:	f04f 0200 	mov.w	r2, #0
 8009b38:	f04f 0300 	mov.w	r3, #0
 8009b3c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
#else
   fp_int    *tmp;
#endif

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 8009b40:	f44f 700a 	mov.w	r0, #552	; 0x228
 8009b44:	f7fa fc92 	bl	800446c <wolfSSL_Malloc>
 8009b48:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
   if (tmp == NULL)
 8009b4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <fp_sqr_comba+0x32>
       return FP_MEM;
 8009b54:	f06f 0301 	mvn.w	r3, #1
 8009b58:	e1f2      	b.n	8009f40 <fp_sqr_comba+0x418>
#endif

  /* get size of output and trim */
  pa = A->used + A->used;
 8009b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (pa >= FP_SIZE) {
 8009b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b68:	2b87      	cmp	r3, #135	; 0x87
 8009b6a:	dd02      	ble.n	8009b72 <fp_sqr_comba+0x4a>
     pa = FP_SIZE-1;
 8009b6c:	2387      	movs	r3, #135	; 0x87
 8009b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  }

  /* number of output digits to produce */
  COMBA_START;
  COMBA_CLEAR;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  if (A == B) {
 8009b88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d108      	bne.n	8009ba2 <fp_sqr_comba+0x7a>
     fp_init(tmp);
 8009b90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009b94:	f000 fec2 	bl	800a91c <fp_init>
     dst = tmp;
 8009b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ba0:	e005      	b.n	8009bae <fp_sqr_comba+0x86>
  } else {
     fp_zero(B);
 8009ba2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009ba4:	f000 fec5 	bl	800a932 <fp_zero>
     dst = B;
 8009ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009baa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  }

  for (ix = 0; ix < pa; ix++) {
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bb4:	e17c      	b.n	8009eb0 <fp_sqr_comba+0x388>
      int      tx, ty, iy;
      fp_digit *tmpy, *tmpx;

      /* get offsets into the two bignums */
      ty = MIN(A->used-1, ix);
 8009bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	db03      	blt.n	8009bca <fp_sqr_comba+0xa2>
 8009bc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	e001      	b.n	8009bce <fp_sqr_comba+0xa6>
 8009bca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      tx = ix - ty;
 8009bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

      /* setup temp aliases */
      tmpx = A->dp + tx;
 8009be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009be2:	f103 0208 	add.w	r2, r3, #8
 8009be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      tmpy = A->dp + ty;
 8009bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bf4:	f103 0208 	add.w	r2, r3, #8
 8009bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

      /* this is the number of times the loop will iterate,
         while (tx++ < a->used && ty-- >= 0) { ... }
       */
      iy = MIN(A->used-tx, ty+1);
 8009c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c0c:	1ad2      	subs	r2, r2, r3
 8009c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c12:	4293      	cmp	r3, r2
 8009c14:	db05      	blt.n	8009c22 <fp_sqr_comba+0xfa>
 8009c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	e002      	b.n	8009c28 <fp_sqr_comba+0x100>
 8009c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c26:	3301      	adds	r3, #1
 8009c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* now for squaring tx can never equal ty
       * we halve the distance since they approach
       * at a rate of 2x and we have to round because
       * odd cases need to be executed
       */
      iy = MIN(iy, (ty-tx+1)>>1);
 8009c2c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	3301      	adds	r3, #1
 8009c38:	105a      	asrs	r2, r3, #1
 8009c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	bfa8      	it	ge
 8009c42:	4613      	movge	r3, r2
 8009c44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* forward carries */
      COMBA_FORWARD;
 8009c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

      /* execute loop */
      for (iz = 0; iz < iy; iz++) {
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c64:	e0a9      	b.n	8009dba <fp_sqr_comba+0x292>
          SQRADD2(*tmpx++, *tmpy--);
 8009c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c6a:	1d13      	adds	r3, r2, #4
 8009c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c70:	6813      	ldr	r3, [r2, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	673b      	str	r3, [r7, #112]	; 0x70
 8009c76:	677a      	str	r2, [r7, #116]	; 0x74
 8009c78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c7c:	1f13      	subs	r3, r2, #4
 8009c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c82:	6813      	ldr	r3, [r2, #0]
 8009c84:	2200      	movs	r2, #0
 8009c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c8a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009c8e:	460b      	mov	r3, r1
 8009c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c92:	fb02 f203 	mul.w	r2, r2, r3
 8009c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c98:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	4413      	add	r3, r2
 8009ca4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ca6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ca8:	fba2 8901 	umull	r8, r9, r2, r1
 8009cac:	444b      	add	r3, r9
 8009cae:	4699      	mov	r9, r3
 8009cb0:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 8009cb4:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 8009cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8009cc0:	667a      	str	r2, [r7, #100]	; 0x64
 8009cc2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009cc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009cc8:	1851      	adds	r1, r2, r1
 8009cca:	62b9      	str	r1, [r7, #40]	; 0x28
 8009ccc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009cce:	414b      	adcs	r3, r1
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cd6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8009cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009cec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009cf0:	f04f 0000 	mov.w	r0, #0
 8009cf4:	f04f 0100 	mov.w	r1, #0
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cfe:	181b      	adds	r3, r3, r0
 8009d00:	623b      	str	r3, [r7, #32]
 8009d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d04:	414b      	adcs	r3, r1
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
 8009d08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d0c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8009d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d18:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009d1c:	f04f 0000 	mov.w	r0, #0
 8009d20:	f04f 0100 	mov.w	r1, #0
 8009d24:	0018      	movs	r0, r3
 8009d26:	2100      	movs	r1, #0
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d2e:	4413      	add	r3, r2
 8009d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d38:	2200      	movs	r2, #0
 8009d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d3c:	657a      	str	r2, [r7, #84]	; 0x54
 8009d3e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009d42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d44:	1851      	adds	r1, r2, r1
 8009d46:	61b9      	str	r1, [r7, #24]
 8009d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d4a:	414b      	adcs	r3, r1
 8009d4c:	61fb      	str	r3, [r7, #28]
 8009d4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d52:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8009d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d62:	2200      	movs	r2, #0
 8009d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d68:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009d6c:	f04f 0000 	mov.w	r0, #0
 8009d70:	f04f 0100 	mov.w	r1, #0
 8009d74:	0018      	movs	r0, r3
 8009d76:	2100      	movs	r1, #0
 8009d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7a:	181b      	adds	r3, r3, r0
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d80:	414b      	adcs	r3, r1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d88:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8009d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d94:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009d98:	f04f 0000 	mov.w	r0, #0
 8009d9c:	f04f 0100 	mov.w	r1, #0
 8009da0:	0018      	movs	r0, r3
 8009da2:	2100      	movs	r1, #0
 8009da4:	4602      	mov	r2, r0
 8009da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009daa:	4413      	add	r3, r2
 8009dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      for (iz = 0; iz < iy; iz++) {
 8009db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009db4:	3301      	adds	r3, #1
 8009db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	f6ff af4f 	blt.w	8009c66 <fp_sqr_comba+0x13e>
      }

      /* even columns have the square term in them */
      if ((ix&1) == 0) {
 8009dc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d15f      	bne.n	8009e94 <fp_sqr_comba+0x36c>
          /* TAO change COMBA_ADD back to SQRADD */
          SQRADD(A->dp[ix>>1], A->dp[ix>>1]);
 8009dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dd8:	2200      	movs	r2, #0
 8009dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009de2:	105b      	asrs	r3, r3, #1
 8009de4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009de6:	3302      	adds	r3, #2
 8009de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dec:	2200      	movs	r2, #0
 8009dee:	633b      	str	r3, [r7, #48]	; 0x30
 8009df0:	637a      	str	r2, [r7, #52]	; 0x34
 8009df2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009df6:	105b      	asrs	r3, r3, #1
 8009df8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e00:	2200      	movs	r2, #0
 8009e02:	469a      	mov	sl, r3
 8009e04:	4693      	mov	fp, r2
 8009e06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	fb0a f203 	mul.w	r2, sl, r3
 8009e10:	4603      	mov	r3, r0
 8009e12:	fb03 f30b 	mul.w	r3, r3, fp
 8009e16:	4413      	add	r3, r2
 8009e18:	4602      	mov	r2, r0
 8009e1a:	fba2 450a 	umull	r4, r5, r2, sl
 8009e1e:	442b      	add	r3, r5
 8009e20:	461d      	mov	r5, r3
 8009e22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009e26:	460b      	mov	r3, r1
 8009e28:	191b      	adds	r3, r3, r4
 8009e2a:	60bb      	str	r3, [r7, #8]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	416b      	adcs	r3, r5
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e36:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e46:	2200      	movs	r2, #0
 8009e48:	643b      	str	r3, [r7, #64]	; 0x40
 8009e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8009e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009e50:	f04f 0000 	mov.w	r0, #0
 8009e54:	f04f 0100 	mov.w	r1, #0
 8009e58:	0018      	movs	r0, r3
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5e:	181b      	adds	r3, r3, r0
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e64:	414b      	adcs	r3, r1
 8009e66:	607b      	str	r3, [r7, #4]
 8009e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e6c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009e7c:	f04f 0000 	mov.w	r0, #0
 8009e80:	f04f 0100 	mov.w	r1, #0
 8009e84:	0018      	movs	r0, r3
 8009e86:	2100      	movs	r1, #0
 8009e88:	4602      	mov	r2, r0
 8009e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e8e:	4413      	add	r3, r2
 8009e90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }

      /* store it */
      COMBA_STORE(dst->dp[ix]);
 8009e94:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009e98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e9c:	1c9a      	adds	r2, r3, #2
 8009e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ea2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  for (ix = 0; ix < pa; ix++) {
 8009ea6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009eaa:	3301      	adds	r3, #1
 8009eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009eb0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	f6ff ae7c 	blt.w	8009bb6 <fp_sqr_comba+0x8e>
  }

  COMBA_FINI;

  /* setup dest */
  dst->used = pa;
 8009ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ec2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009ec6:	601a      	str	r2, [r3, #0]
  fp_clamp (dst);
 8009ec8:	e006      	b.n	8009ed8 <fp_sqr_comba+0x3b0>
 8009eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	1e5a      	subs	r2, r3, #1
 8009ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <fp_sqr_comba+0x3d0>
 8009ee2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	1e5a      	subs	r2, r3, #1
 8009eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009eee:	3202      	adds	r2, #2
 8009ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0e8      	beq.n	8009eca <fp_sqr_comba+0x3a2>
 8009ef8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <fp_sqr_comba+0x3e2>
 8009f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	e000      	b.n	8009f0c <fp_sqr_comba+0x3e4>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f10:	6053      	str	r3, [r2, #4]
  if (dst != B) {
 8009f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d004      	beq.n	8009f26 <fp_sqr_comba+0x3fe>
     fp_copy(dst, B);
 8009f1c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009f1e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009f22:	f000 fe79 	bl	800ac18 <fp_copy>
#ifdef TFM_ISO
  (void)tt;
#endif

#ifdef WOLFSSL_SMALL_STACK
  XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 8009f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <fp_sqr_comba+0x416>
 8009f36:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009f3a:	f7fa fab3 	bl	80044a4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	37d8      	adds	r7, #216	; 0xd8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f4a <fp_cmp>:

int fp_cmp(fp_int *a, fp_int *b)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	6039      	str	r1, [r7, #0]
   if (a->sign == FP_NEG && b->sign == FP_ZPOS) {
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d106      	bne.n	8009f6a <fp_cmp+0x20>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <fp_cmp+0x20>
      return FP_LT;
 8009f64:	f04f 33ff 	mov.w	r3, #4294967295
 8009f68:	e018      	b.n	8009f9c <fp_cmp+0x52>
   } else if (a->sign == FP_ZPOS && b->sign == FP_NEG) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d105      	bne.n	8009f7e <fp_cmp+0x34>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <fp_cmp+0x34>
      return FP_GT;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e00e      	b.n	8009f9c <fp_cmp+0x52>
   } else {
      /* compare digits */
      if (a->sign == FP_NEG) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d105      	bne.n	8009f92 <fp_cmp+0x48>
         /* if negative compare opposite direction */
         return fp_cmp_mag(b, a);
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	6838      	ldr	r0, [r7, #0]
 8009f8a:	f000 f843 	bl	800a014 <fp_cmp_mag>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	e004      	b.n	8009f9c <fp_cmp+0x52>
      } else {
         return fp_cmp_mag(a, b);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f83d 	bl	800a014 <fp_cmp_mag>
 8009f9a:	4603      	mov	r3, r0
      }
   }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <fp_cmp_d>:

/* compare against a single digit */
int fp_cmp_d(fp_int *a, fp_digit b)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  /* special case for zero*/
  if (a->used == 0 && b == 0)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d104      	bne.n	8009fc0 <fp_cmp_d+0x1c>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <fp_cmp_d+0x1c>
    return FP_EQ;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	e023      	b.n	800a008 <fp_cmp_d+0x64>

  /* compare based on sign */
  if ((b && a->used == 0) || a->sign == FP_NEG) {
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <fp_cmp_d+0x2a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <fp_cmp_d+0x32>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d102      	bne.n	8009fdc <fp_cmp_d+0x38>
    return FP_LT;
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	e015      	b.n	800a008 <fp_cmp_d+0x64>
  }

  /* compare based on magnitude */
  if (a->used > 1) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	dd01      	ble.n	8009fe8 <fp_cmp_d+0x44>
    return FP_GT;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e00f      	b.n	800a008 <fp_cmp_d+0x64>
  }

  /* compare the only digit of a to b */
  if (a->dp[0] > b) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d201      	bcs.n	8009ff6 <fp_cmp_d+0x52>
    return FP_GT;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e008      	b.n	800a008 <fp_cmp_d+0x64>
  } else if (a->dp[0] < b) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d902      	bls.n	800a006 <fp_cmp_d+0x62>
    return FP_LT;
 800a000:	f04f 33ff 	mov.w	r3, #4294967295
 800a004:	e000      	b.n	800a008 <fp_cmp_d+0x64>
  } else {
    return FP_EQ;
 800a006:	2300      	movs	r3, #0
  }

}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <fp_cmp_mag>:

int fp_cmp_mag(fp_int *a, fp_int *b)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
   int x;

   if (a->used > b->used) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	dd01      	ble.n	800a02e <fp_cmp_mag+0x1a>
      return FP_GT;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e031      	b.n	800a092 <fp_cmp_mag+0x7e>
   } else if (a->used < b->used) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	da02      	bge.n	800a040 <fp_cmp_mag+0x2c>
      return FP_LT;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	e028      	b.n	800a092 <fp_cmp_mag+0x7e>
   } else {
      for (x = a->used - 1; x >= 0; x--) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3b01      	subs	r3, #1
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	e01f      	b.n	800a08a <fp_cmp_mag+0x76>
          if (a->dp[x] > b->dp[x]) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	3202      	adds	r2, #2
 800a050:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	3102      	adds	r1, #2
 800a05a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d901      	bls.n	800a066 <fp_cmp_mag+0x52>
             return FP_GT;
 800a062:	2301      	movs	r3, #1
 800a064:	e015      	b.n	800a092 <fp_cmp_mag+0x7e>
          } else if (a->dp[x] < b->dp[x]) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	3202      	adds	r2, #2
 800a06c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68f9      	ldr	r1, [r7, #12]
 800a074:	3102      	adds	r1, #2
 800a076:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d202      	bcs.n	800a084 <fp_cmp_mag+0x70>
             return FP_LT;
 800a07e:	f04f 33ff 	mov.w	r3, #4294967295
 800a082:	e006      	b.n	800a092 <fp_cmp_mag+0x7e>
      for (x = a->used - 1; x >= 0; x--) {
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3b01      	subs	r3, #1
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dadc      	bge.n	800a04a <fp_cmp_mag+0x36>
          }
      }
   }
   return FP_EQ;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <fp_montgomery_setup>:


/* sets up the montgomery reduction */
int fp_montgomery_setup(fp_int *a, fp_digit *rho)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]
 *
 * XA = 1 (mod 2**n)  =>  (X(2-XA)) A = 1 (mod 2**2n)
 *                    =>  2*X*A - X*X*A*A = 1
 *                    =>  2*(1) - (1)     = 1
 */
  b = a->dp[0];
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	60fb      	str	r3, [r7, #12]

  if ((b & 1) == 0) {
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <fp_montgomery_setup+0x20>
    return FP_VAL;
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	e02a      	b.n	800a114 <fp_montgomery_setup+0x76>
  }

  x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3302      	adds	r3, #2
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	f003 0308 	and.w	r3, r3, #8
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	60bb      	str	r3, [r7, #8]
  x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
 800a0d6:	f1c3 0202 	rsb	r2, r3, #2
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	fb02 f303 	mul.w	r3, r2, r3
 800a0e0:	60bb      	str	r3, [r7, #8]
  x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ea:	f1c3 0202 	rsb	r2, r3, #2
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	60bb      	str	r3, [r7, #8]
  x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	fb02 f303 	mul.w	r3, r2, r3
 800a0fe:	f1c3 0202 	rsb	r2, r3, #2
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	fb02 f303 	mul.w	r3, r2, r3
 800a108:	60bb      	str	r3, [r7, #8]
#ifdef FP_64BIT
  x *= 2 - b * x;               /* here x*a==1 mod 2**64 */
#endif

  /* rho = -1/m mod b */
  *rho = (fp_digit) (((fp_word) 1 << ((fp_word) DIGIT_BIT)) - ((fp_word)x));
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	425a      	negs	r2, r3
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	601a      	str	r2, [r3, #0]

  return FP_OKAY;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <fp_montgomery_calc_normalization>:

/* computes a = B**n mod b without division or multiplication useful for
 * normalizing numbers in a Montgomery system.
 */
int fp_montgomery_calc_normalization(fp_int *a, fp_int *b)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  int     x, bits;

  /* how many bits of last digit does b use */
  bits = fp_count_bits (b) % DIGIT_BIT;
 800a12a:	6838      	ldr	r0, [r7, #0]
 800a12c:	f000 fa83 	bl	800a636 <fp_count_bits>
 800a130:	4603      	mov	r3, r0
 800a132:	425a      	negs	r2, r3
 800a134:	f003 031f 	and.w	r3, r3, #31
 800a138:	f002 021f 	and.w	r2, r2, #31
 800a13c:	bf58      	it	pl
 800a13e:	4253      	negpl	r3, r2
 800a140:	613b      	str	r3, [r7, #16]
  if (!bits) bits = DIGIT_BIT;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <fp_montgomery_calc_normalization+0x2c>
 800a148:	2320      	movs	r3, #32
 800a14a:	613b      	str	r3, [r7, #16]

  /* compute A = B^(n-1) * 2^(bits-1) */
  if (b->used > 1) {
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b01      	cmp	r3, #1
 800a152:	dd0b      	ble.n	800a16c <fp_montgomery_calc_normalization+0x4c>
     fp_2expt (a, (b->used - 1) * DIGIT_BIT + bits - 1);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3b01      	subs	r3, #1
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	4413      	add	r3, r2
 800a160:	3b01      	subs	r3, #1
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff fc84 	bl	8009a72 <fp_2expt>
 800a16a:	e005      	b.n	800a178 <fp_montgomery_calc_normalization+0x58>
  } else {
     fp_set(a, 1);
 800a16c:	2101      	movs	r1, #1
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa48 	bl	800a604 <fp_set>
     bits = 1;
 800a174:	2301      	movs	r3, #1
 800a176:	613b      	str	r3, [r7, #16]
  }

  /* now compute C = A * B mod b */
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	e019      	b.n	800a1b4 <fp_montgomery_calc_normalization+0x94>
    int err = fp_mul_2 (a, a);
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7fd f9ec 	bl	8007560 <fp_mul_2>
 800a188:	60f8      	str	r0, [r7, #12]
    if (err != FP_OKAY) {
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <fp_montgomery_calc_normalization+0x74>
      return err;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	e013      	b.n	800a1bc <fp_montgomery_calc_normalization+0x9c>
    }
    if (fp_cmp_mag (a, b) != FP_LT) {
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ff3c 	bl	800a014 <fp_cmp_mag>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d004      	beq.n	800a1ae <fp_montgomery_calc_normalization+0x8e>
      s_fp_sub (a, b, a);
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7fd f8d9 	bl	8007360 <s_fp_sub>
  for (x = bits - 1; x < (int)DIGIT_BIT; x++) {
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2b1f      	cmp	r3, #31
 800a1b8:	dde2      	ble.n	800a180 <fp_montgomery_calc_normalization+0x60>
    }
  }
  return FP_OKAY;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <fp_montgomery_reduce_ex>:
}
#endif

/* computes x/R == x (mod N) via Montgomery Reduction */
int fp_montgomery_reduce_ex(fp_int *a, fp_int *m, fp_digit mp, int ct)
{
 800a1c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1c8:	b09a      	sub	sp, #104	; 0x68
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1ce:	62b9      	str	r1, [r7, #40]	; 0x28
 800a1d0:	627a      	str	r2, [r7, #36]	; 0x24
 800a1d2:	623b      	str	r3, [r7, #32]
#ifndef WOLFSSL_SMALL_STACK
   fp_digit c[FP_SIZE+1];
#else
   fp_digit *c;
#endif
   fp_digit *_c, *tmpm, mu = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   int      oldused, x, y, pa, err = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	64bb      	str	r3, [r7, #72]	; 0x48

   IF_HAVE_INTEL_MULX(err=fp_montgomery_reduce_mulx(a, m, mp, ct), return err) ;
   (void)err;

   /* bail if too large */
   if (m->used > (FP_SIZE/2)) {
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b44      	cmp	r3, #68	; 0x44
 800a1e2:	dd02      	ble.n	800a1ea <fp_montgomery_reduce_ex+0x26>
      (void)mu;                     /* shut up compiler */
      return FP_VAL;
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	e119      	b.n	800a41e <fp_montgomery_reduce_ex+0x25a>
   }
#endif

#ifdef WOLFSSL_SMALL_STACK
   /* only allocate space for what's needed for window plus res */
   c = (fp_digit*)XMALLOC(sizeof(fp_digit)*(FP_SIZE + 1), NULL, DYNAMIC_TYPE_BIGINT);
 800a1ea:	f44f 7009 	mov.w	r0, #548	; 0x224
 800a1ee:	f7fa f93d 	bl	800446c <wolfSSL_Malloc>
 800a1f2:	6478      	str	r0, [r7, #68]	; 0x44
   if (c == NULL) {
 800a1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <fp_montgomery_reduce_ex+0x3c>
      return FP_MEM;
 800a1fa:	f06f 0301 	mvn.w	r3, #1
 800a1fe:	e10e      	b.n	800a41e <fp_montgomery_reduce_ex+0x25a>
   }
#endif

   /* now zero the buff */
   XMEMSET(c, 0, sizeof(fp_digit)*(FP_SIZE + 1));
 800a200:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a204:	2100      	movs	r1, #0
 800a206:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a208:	f001 fba8 	bl	800b95c <memset>
   pa = m->used;
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	643b      	str	r3, [r7, #64]	; 0x40

   /* copy the input */
#ifdef TFM_TIMING_RESISTANT
   if (a->used <= m->used) {
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	dc03      	bgt.n	800a226 <fp_montgomery_reduce_ex+0x62>
      oldused = m->used;
 800a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a224:	e003      	b.n	800a22e <fp_montgomery_reduce_ex+0x6a>
   }
   else {
      oldused = m->used * 2;
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	65fb      	str	r3, [r7, #92]	; 0x5c
   }
#else
   oldused = a->used;
#endif
   for (x = 0; x < oldused; x++) {
 800a22e:	2300      	movs	r3, #0
 800a230:	65bb      	str	r3, [r7, #88]	; 0x58
 800a232:	e00c      	b.n	800a24e <fp_montgomery_reduce_ex+0x8a>
       c[x] = a->dp[x];
 800a234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a236:	009a      	lsls	r2, r3, #2
 800a238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23a:	1899      	adds	r1, r3, r2
 800a23c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a23e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a240:	3302      	adds	r3, #2
 800a242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a246:	600b      	str	r3, [r1, #0]
   for (x = 0; x < oldused; x++) {
 800a248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a24a:	3301      	adds	r3, #1
 800a24c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a24e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a252:	429a      	cmp	r2, r3
 800a254:	dbee      	blt.n	800a234 <fp_montgomery_reduce_ex+0x70>
   }
   MONT_START;

   for (x = 0; x < pa; x++) {
 800a256:	2300      	movs	r3, #0
 800a258:	65bb      	str	r3, [r7, #88]	; 0x58
 800a25a:	e07d      	b.n	800a358 <fp_montgomery_reduce_ex+0x194>
       fp_digit cy = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	653b      	str	r3, [r7, #80]	; 0x50
       /* get Mu for this round */
       LOOP_START;
 800a260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a262:	009a      	lsls	r2, r3, #2
 800a264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a266:	4413      	add	r3, r2
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	fb02 f303 	mul.w	r3, r2, r3
 800a270:	64fb      	str	r3, [r7, #76]	; 0x4c
       _c   = c + x;
 800a272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a274:	009a      	lsls	r2, r3, #2
 800a276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a278:	4413      	add	r3, r2
 800a27a:	667b      	str	r3, [r7, #100]	; 0x64
       tmpm = m->dp;
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	3308      	adds	r3, #8
 800a280:	663b      	str	r3, [r7, #96]	; 0x60
       y = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	657b      	str	r3, [r7, #84]	; 0x54
              INNERMUL8 ;
              _c   += 8;
              tmpm += 8;
           }
#endif
       for (; y < pa; y++) {
 800a286:	e048      	b.n	800a31a <fp_montgomery_reduce_ex+0x156>
          INNERMUL;
 800a288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2200      	movs	r2, #0
 800a28e:	61bb      	str	r3, [r7, #24]
 800a290:	61fa      	str	r2, [r7, #28]
 800a292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a294:	2200      	movs	r2, #0
 800a296:	613b      	str	r3, [r7, #16]
 800a298:	617a      	str	r2, [r7, #20]
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	eb13 0802 	adds.w	r8, r3, r2
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	460a      	mov	r2, r1
 800a2aa:	eb43 0902 	adc.w	r9, r3, r2
 800a2ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	469a      	mov	sl, r3
 800a2b4:	4693      	mov	fp, r2
 800a2b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2b8:	1d13      	adds	r3, r2, #4
 800a2ba:	663b      	str	r3, [r7, #96]	; 0x60
 800a2bc:	6813      	ldr	r3, [r2, #0]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	60bb      	str	r3, [r7, #8]
 800a2c2:	60fa      	str	r2, [r7, #12]
 800a2c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	fb03 f20b 	mul.w	r2, r3, fp
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	fb0a f303 	mul.w	r3, sl, r3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	fbaa 4502 	umull	r4, r5, sl, r2
 800a2dc:	442b      	add	r3, r5
 800a2de:	461d      	mov	r5, r3
 800a2e0:	eb18 0304 	adds.w	r3, r8, r4
 800a2e4:	603b      	str	r3, [r7, #0]
 800a2e6:	eb49 0305 	adc.w	r3, r9, r5
 800a2ea:	607b      	str	r3, [r7, #4]
 800a2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800a2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a2fe:	f04f 0000 	mov.w	r0, #0
 800a302:	f04f 0100 	mov.w	r1, #0
 800a306:	0018      	movs	r0, r3
 800a308:	2100      	movs	r1, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	653b      	str	r3, [r7, #80]	; 0x50
          ++_c;
 800a30e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a310:	3304      	adds	r3, #4
 800a312:	667b      	str	r3, [r7, #100]	; 0x64
       for (; y < pa; y++) {
 800a314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a316:	3301      	adds	r3, #1
 800a318:	657b      	str	r3, [r7, #84]	; 0x54
 800a31a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31e:	429a      	cmp	r2, r3
 800a320:	dbb2      	blt.n	800a288 <fp_montgomery_reduce_ex+0xc4>
       }
       LOOP_END;
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 800a322:	e013      	b.n	800a34c <fp_montgomery_reduce_ex+0x188>
           PROPCARRY;
 800a324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a32a:	441a      	add	r2, r3
 800a32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	63bb      	str	r3, [r7, #56]	; 0x38
 800a336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a33a:	429a      	cmp	r2, r3
 800a33c:	bf34      	ite	cc
 800a33e:	2301      	movcc	r3, #1
 800a340:	2300      	movcs	r3, #0
 800a342:	b2db      	uxtb	r3, r3
 800a344:	653b      	str	r3, [r7, #80]	; 0x50
           ++_c;
 800a346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a348:	3304      	adds	r3, #4
 800a34a:	667b      	str	r3, [r7, #100]	; 0x64
       while (cy) { /* //NOLINT(bugprone-infinite-loop) */ /* PROPCARRY is an asm macro */
 800a34c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e8      	bne.n	800a324 <fp_montgomery_reduce_ex+0x160>
   for (x = 0; x < pa; x++) {
 800a352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a354:	3301      	adds	r3, #1
 800a356:	65bb      	str	r3, [r7, #88]	; 0x58
 800a358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35c:	429a      	cmp	r2, r3
 800a35e:	f6ff af7d 	blt.w	800a25c <fp_montgomery_reduce_ex+0x98>
       }
  }

  /* now copy out */
  _c   = c + pa;
 800a362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a368:	4413      	add	r3, r2
 800a36a:	667b      	str	r3, [r7, #100]	; 0x64
  tmpm = a->dp;
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	3308      	adds	r3, #8
 800a370:	663b      	str	r3, [r7, #96]	; 0x60
  for (x = 0; x < pa+1; x++) {
 800a372:	2300      	movs	r3, #0
 800a374:	65bb      	str	r3, [r7, #88]	; 0x58
 800a376:	e00a      	b.n	800a38e <fp_montgomery_reduce_ex+0x1ca>
     *tmpm++ = *_c++;
 800a378:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a37a:	1d13      	adds	r3, r2, #4
 800a37c:	667b      	str	r3, [r7, #100]	; 0x64
 800a37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a380:	1d19      	adds	r1, r3, #4
 800a382:	6639      	str	r1, [r7, #96]	; 0x60
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	601a      	str	r2, [r3, #0]
  for (x = 0; x < pa+1; x++) {
 800a388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a38a:	3301      	adds	r3, #1
 800a38c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a38e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a392:	429a      	cmp	r2, r3
 800a394:	daf0      	bge.n	800a378 <fp_montgomery_reduce_ex+0x1b4>
  }

  /* zero any excess digits on the destination that we didn't write to */
  for (; x < oldused; x++) {
 800a396:	e007      	b.n	800a3a8 <fp_montgomery_reduce_ex+0x1e4>
     *tmpm++ = 0;
 800a398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a39a:	1d1a      	adds	r2, r3, #4
 800a39c:	663a      	str	r2, [r7, #96]	; 0x60
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]
  for (; x < oldused; x++) {
 800a3a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	dbf3      	blt.n	800a398 <fp_montgomery_reduce_ex+0x1d4>
  }

  MONT_FINI;

  a->used = pa+1;
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	601a      	str	r2, [r3, #0]
  fp_clamp(a);
 800a3b8:	e004      	b.n	800a3c4 <fp_montgomery_reduce_ex+0x200>
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	1e5a      	subs	r2, r3, #1
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d008      	beq.n	800a3de <fp_montgomery_reduce_ex+0x21a>
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	1e5a      	subs	r2, r3, #1
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	3202      	adds	r2, #2
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0ed      	beq.n	800a3ba <fp_montgomery_reduce_ex+0x1f6>
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <fp_montgomery_reduce_ex+0x228>
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	e000      	b.n	800a3ee <fp_montgomery_reduce_ex+0x22a>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f0:	6053      	str	r3, [r2, #4]

#ifndef WOLFSSL_MONT_RED_CT
  /* if A >= m then A = A - m */
  if (fp_cmp_mag (a, m) != FP_LT) {
 800a3f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f6:	f7ff fe0d 	bl	800a014 <fp_cmp_mag>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d004      	beq.n	800a40c <fp_montgomery_reduce_ex+0x248>
    s_fp_sub (a, m, a);
 800a402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a408:	f7fc ffaa 	bl	8007360 <s_fp_sub>
    s_fp_sub (a, m, a);
  }
#endif

#ifdef WOLFSSL_SMALL_STACK
  XFREE(c, NULL, DYNAMIC_TYPE_BIGINT);
 800a40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <fp_montgomery_reduce_ex+0x258>
 800a416:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a418:	f7fa f844 	bl	80044a4 <wolfSSL_Free>
#endif
  return FP_OKAY;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3768      	adds	r7, #104	; 0x68
 800a422:	46bd      	mov	sp, r7
 800a424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a428 <fp_montgomery_reduce>:

int fp_montgomery_reduce(fp_int *a, fp_int *m, fp_digit mp)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  return fp_montgomery_reduce_ex(a, m, mp, 1);
 800a434:	2301      	movs	r3, #1
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	68b9      	ldr	r1, [r7, #8]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fec2 	bl	800a1c4 <fp_montgomery_reduce_ex>
 800a440:	4603      	mov	r3, r0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <fp_read_unsigned_bin>:

int fp_read_unsigned_bin(fp_int *a, const unsigned char *b, int c)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b088      	sub	sp, #32
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
  const word32 maxC = (a->size * sizeof(fp_digit));
#else
  const word32 maxC = (FP_SIZE * sizeof(fp_digit));
 800a456:	f44f 7308 	mov.w	r3, #544	; 0x220
 800a45a:	61fb      	str	r3, [r7, #28]
#endif

  /* zero the int */
  fp_zero (a);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 fa68 	bl	800a932 <fp_zero>

  /* if input b excess max, then truncate */
  if (c > 0 && (word32)c > maxC) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	dd0f      	ble.n	800a488 <fp_read_unsigned_bin+0x3e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d20b      	bcs.n	800a488 <fp_read_unsigned_bin+0x3e>
     int excess = (c - maxC);
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	61bb      	str	r3, [r7, #24]
     c -= excess;
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	607b      	str	r3, [r7, #4]
     b += excess;
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	4413      	add	r3, r2
 800a486:	60bb      	str	r3, [r7, #8]
    (defined(FP_32BIT) || defined(FP_64BIT))
#ifdef FP_32BIT
  /* If we know the endianness of this architecture, and we're using
     32-bit fp_digits, we can optimize this */
  {
     unsigned char *pd = (unsigned char *)a->dp;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3308      	adds	r3, #8
 800a48c:	617b      	str	r3, [r7, #20]

     a->used = (c + sizeof(fp_digit) - 1)/sizeof(fp_digit);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3303      	adds	r3, #3
 800a492:	089b      	lsrs	r3, r3, #2
 800a494:	461a      	mov	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	601a      	str	r2, [r3, #0]
                 } while ((c -= 4) > 0);
       }
     }
#else
     /* read the bytes in one at a time. */
     for (c -= 1; c >= 0; c -= 1) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	607b      	str	r3, [r7, #4]
 800a4a0:	e00a      	b.n	800a4b8 <fp_read_unsigned_bin+0x6e>
       pd[c] = *b++;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	60ba      	str	r2, [r7, #8]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6979      	ldr	r1, [r7, #20]
 800a4ac:	440a      	add	r2, r1
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	7013      	strb	r3, [r2, #0]
     for (c -= 1; c >= 0; c -= 1) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	607b      	str	r3, [r7, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	daf1      	bge.n	800a4a2 <fp_read_unsigned_bin+0x58>
     if (a->used == 0) {
         a->used = 1;
     }
  }
#endif
  fp_clamp (a);
 800a4be:	e004      	b.n	800a4ca <fp_read_unsigned_bin+0x80>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	1e5a      	subs	r2, r3, #1
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d008      	beq.n	800a4e4 <fp_read_unsigned_bin+0x9a>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	1e5a      	subs	r2, r3, #1
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3202      	adds	r2, #2
 800a4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0ed      	beq.n	800a4c0 <fp_read_unsigned_bin+0x76>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <fp_read_unsigned_bin+0xa8>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	e000      	b.n	800a4f4 <fp_read_unsigned_bin+0xaa>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	6053      	str	r3, [r2, #4]

  return FP_OKAY;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3720      	adds	r7, #32
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <fp_to_unsigned_bin_len>:
#endif
  return FP_OKAY;
}

int fp_to_unsigned_bin_len(fp_int *a, unsigned char *b, int c)
{
 800a502:	b480      	push	{r7}
 800a504:	b089      	sub	sp, #36	; 0x24
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
#if DIGIT_BIT == 64 || DIGIT_BIT == 32 || DIGIT_BIT == 16
  int i = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	61fb      	str	r3, [r7, #28]
  int j = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	61bb      	str	r3, [r7, #24]
  int x;

  for (x=c-1; x >= 0 && i < a->used; x--) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3b01      	subs	r3, #1
 800a51a:	617b      	str	r3, [r7, #20]
 800a51c:	e020      	b.n	800a560 <fp_to_unsigned_bin_len+0x5e>
     b[x] = (unsigned char)(a->dp[i] >> j);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	69fa      	ldr	r2, [r7, #28]
 800a522:	3202      	adds	r2, #2
 800a524:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	fa22 f103 	lsr.w	r1, r2, r3
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	4413      	add	r3, r2
 800a534:	b2ca      	uxtb	r2, r1
 800a536:	701a      	strb	r2, [r3, #0]
     j += 8;
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	3308      	adds	r3, #8
 800a53c:	61bb      	str	r3, [r7, #24]
     i += j == DIGIT_BIT;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b20      	cmp	r3, #32
 800a542:	bf0c      	ite	eq
 800a544:	2301      	moveq	r3, #1
 800a546:	2300      	movne	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	4413      	add	r3, r2
 800a550:	61fb      	str	r3, [r7, #28]
     j &= DIGIT_BIT - 1;
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	61bb      	str	r3, [r7, #24]
  for (x=c-1; x >= 0 && i < a->used; x--) {
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2b00      	cmp	r3, #0
 800a564:	db0d      	blt.n	800a582 <fp_to_unsigned_bin_len+0x80>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	dbd6      	blt.n	800a51e <fp_to_unsigned_bin_len+0x1c>
  }
  for (; x >= 0; x--) {
 800a570:	e007      	b.n	800a582 <fp_to_unsigned_bin_len+0x80>
     b[x] = 0;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	4413      	add	r3, r2
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]
  for (; x >= 0; x--) {
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	3b01      	subs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	daf4      	bge.n	800a572 <fp_to_unsigned_bin_len+0x70>
  }
  if (i < a->used - 1) {
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	429a      	cmp	r2, r3
 800a592:	da02      	bge.n	800a59a <fp_to_unsigned_bin_len+0x98>
      return FP_VAL;
 800a594:	f04f 33ff 	mov.w	r3, #4294967295
 800a598:	e013      	b.n	800a5c2 <fp_to_unsigned_bin_len+0xc0>
  }
  if ((i == a->used - 1) && ((a->dp[i] >> j) != 0)) {
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d10c      	bne.n	800a5c0 <fp_to_unsigned_bin_len+0xbe>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	69fa      	ldr	r2, [r7, #28]
 800a5aa:	3202      	adds	r2, #2
 800a5ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <fp_to_unsigned_bin_len+0xbe>
      return FP_VAL;
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	e000      	b.n	800a5c2 <fp_to_unsigned_bin_len+0xc0>
  }

  return FP_OKAY;
 800a5c0:	2300      	movs	r3, #0
  if (!fp_iszero(t)) {
      return FP_VAL;
  }
  return FP_OKAY;
#endif
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3724      	adds	r7, #36	; 0x24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <fp_unsigned_bin_size>:

int fp_unsigned_bin_size(const fp_int *a)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  int     size = fp_count_bits (a);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f82d 	bl	800a636 <fp_count_bits>
 800a5dc:	60f8      	str	r0, [r7, #12]
  return (size / 8 + ((size & 7) != 0 ? 1 : 0));
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	da00      	bge.n	800a5e6 <fp_unsigned_bin_size+0x18>
 800a5e4:	3307      	adds	r3, #7
 800a5e6:	10db      	asrs	r3, r3, #3
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f003 0307 	and.w	r3, r3, #7
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	4413      	add	r3, r2
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <fp_set>:

void fp_set(fp_int *a, fp_digit b)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
   fp_zero(a);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f98f 	bl	800a932 <fp_zero>
   a->dp[0] = b;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	609a      	str	r2, [r3, #8]
   a->used  = a->dp[0] ? 1 : 0;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bf14      	ite	ne
 800a622:	2301      	movne	r3, #1
 800a624:	2300      	moveq	r3, #0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	461a      	mov	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	601a      	str	r2, [r3, #0]
}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <fp_count_bits>:

    return MP_OKAY;
}

int fp_count_bits (const fp_int * a)
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  int     r;
  fp_digit q;

  /* shortcut */
  if (a->used == 0) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <fp_count_bits+0x14>
    return 0;
 800a646:	2300      	movs	r3, #0
 800a648:	e017      	b.n	800a67a <fp_count_bits+0x44>
  }

  /* get number of digits and add that */
  r = (a->used - 1) * DIGIT_BIT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	015b      	lsls	r3, r3, #5
 800a652:	60fb      	str	r3, [r7, #12]

  /* take the last digit and count the bits in it */
  q = a->dp[a->used - 1];
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	1e5a      	subs	r2, r3, #1
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3202      	adds	r2, #2
 800a65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a662:	60bb      	str	r3, [r7, #8]
  while (q > ((fp_digit) 0)) {
 800a664:	e005      	b.n	800a672 <fp_count_bits+0x3c>
    ++r;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3301      	adds	r3, #1
 800a66a:	60fb      	str	r3, [r7, #12]
    q >>= ((fp_digit) 1);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	60bb      	str	r3, [r7, #8]
  while (q > ((fp_digit) 0)) {
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1f6      	bne.n	800a666 <fp_count_bits+0x30>
  }

  return r;
 800a678:	68fb      	ldr	r3, [r7, #12]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <fp_lshd>:

    return bit;
}

int fp_lshd(fp_int *a, int x)
{
 800a686:	b480      	push	{r7}
 800a688:	b085      	sub	sp, #20
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
    int y;

    if (a->used + x > FP_SIZE) return FP_VAL;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	4413      	add	r3, r2
 800a698:	2b88      	cmp	r3, #136	; 0x88
 800a69a:	dd02      	ble.n	800a6a2 <fp_lshd+0x1c>
 800a69c:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a0:	e048      	b.n	800a734 <fp_lshd+0xae>

    y = a->used + x - 1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]

    /* store new size */
    a->used = y + 1;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]

    /* move digits */
    for (; y >= x; y--) {
 800a6b6:	e00e      	b.n	800a6d6 <fp_lshd+0x50>
        a->dp[y] = a->dp[y-x];
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	1ad2      	subs	r2, r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3202      	adds	r2, #2
 800a6c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	3202      	adds	r2, #2
 800a6cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (; y >= x; y--) {
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	daec      	bge.n	800a6b8 <fp_lshd+0x32>
    }

    /* zero lower digits */
    for (; y >= 0; y--) {
 800a6de:	e008      	b.n	800a6f2 <fp_lshd+0x6c>
        a->dp[y] = 0;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	3202      	adds	r2, #2
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (; y >= 0; y--) {
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	daf3      	bge.n	800a6e0 <fp_lshd+0x5a>
    }

    /* clamp digits */
    fp_clamp(a);
 800a6f8:	e004      	b.n	800a704 <fp_lshd+0x7e>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	1e5a      	subs	r2, r3, #1
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d008      	beq.n	800a71e <fp_lshd+0x98>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	1e5a      	subs	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3202      	adds	r2, #2
 800a716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0ed      	beq.n	800a6fa <fp_lshd+0x74>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <fp_lshd+0xa6>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	e000      	b.n	800a72e <fp_lshd+0xa8>
 800a72c:	2300      	movs	r3, #0
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	6053      	str	r3, [r2, #4]
    return FP_OKAY;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <fp_rshb>:


/* right shift by bit count */
void fp_rshb(fp_int *c, int x)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
    fp_digit *tmpc, mask, shift;
    fp_digit r, rr;
    fp_digit D = x;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	617b      	str	r3, [r7, #20]

    /* shifting by a negative number not supported, and shifting by
     * zero changes nothing.
     */
    if (x <= 0) return;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	dd70      	ble.n	800a836 <fp_rshb+0xf6>

    /* shift digits first if needed */
    if (x >= DIGIT_BIT) {
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b1f      	cmp	r3, #31
 800a758:	dd14      	ble.n	800a784 <fp_rshb+0x44>
        fp_rshd(c, x / DIGIT_BIT);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da00      	bge.n	800a762 <fp_rshb+0x22>
 800a760:	331f      	adds	r3, #31
 800a762:	115b      	asrs	r3, r3, #5
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f86d 	bl	800a846 <fp_rshd>
        /* recalculate number of bits to shift */
        D = x % DIGIT_BIT;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	425a      	negs	r2, r3
 800a770:	f003 031f 	and.w	r3, r3, #31
 800a774:	f002 021f 	and.w	r2, r2, #31
 800a778:	bf58      	it	pl
 800a77a:	4253      	negpl	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]
        /* check if any more shifting needed */
        if (D == 0) return;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d05a      	beq.n	800a83a <fp_rshb+0xfa>

    }

    /* zero shifted is always zero */
    if (fp_iszero(c)) return;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d058      	beq.n	800a83e <fp_rshb+0xfe>

    /* mask */
    mask = (((fp_digit)1) << D) - 1;
 800a78c:	2201      	movs	r2, #1
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	fa02 f303 	lsl.w	r3, r2, r3
 800a794:	3b01      	subs	r3, #1
 800a796:	613b      	str	r3, [r7, #16]

    /* shift for lsb */
    shift = DIGIT_BIT - D;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f1c3 0320 	rsb	r3, r3, #32
 800a79e:	60fb      	str	r3, [r7, #12]

    /* alias */
    tmpc = c->dp + (c->used - 1);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f103 0208 	add.w	r2, r3, #8
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	61fb      	str	r3, [r7, #28]

    /* carry */
    r = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61bb      	str	r3, [r7, #24]
    for (x = c->used - 1; x >= 0; x--) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	603b      	str	r3, [r7, #0]
 800a7c2:	e017      	b.n	800a7f4 <fp_rshb+0xb4>
      /* get the lower  bits of this word in a temp */
      rr = *tmpc & mask;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	60bb      	str	r3, [r7, #8]

      /* shift the current word and mix in the carry bits from previous word */
      *tmpc = (*tmpc >> D) | (r << shift);
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	40da      	lsrs	r2, r3
 800a7d6:	69b9      	ldr	r1, [r7, #24]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	fa01 f303 	lsl.w	r3, r1, r3
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	601a      	str	r2, [r3, #0]
      --tmpc;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	3b04      	subs	r3, #4
 800a7e8:	61fb      	str	r3, [r7, #28]

      /* set the carry to the carry bits of the current word found above */
      r = rr;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	61bb      	str	r3, [r7, #24]
    for (x = c->used - 1; x >= 0; x--) {
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dae4      	bge.n	800a7c4 <fp_rshb+0x84>
    }

    /* clamp digits */
    fp_clamp(c);
 800a7fa:	e004      	b.n	800a806 <fp_rshb+0xc6>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1e5a      	subs	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d008      	beq.n	800a820 <fp_rshb+0xe0>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	1e5a      	subs	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3202      	adds	r2, #2
 800a818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0ed      	beq.n	800a7fc <fp_rshb+0xbc>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <fp_rshb+0xee>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	e000      	b.n	800a830 <fp_rshb+0xf0>
 800a82e:	2300      	movs	r3, #0
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6053      	str	r3, [r2, #4]
 800a834:	e004      	b.n	800a840 <fp_rshb+0x100>
    if (x <= 0) return;
 800a836:	bf00      	nop
 800a838:	e002      	b.n	800a840 <fp_rshb+0x100>
        if (D == 0) return;
 800a83a:	bf00      	nop
 800a83c:	e000      	b.n	800a840 <fp_rshb+0x100>
    if (fp_iszero(c)) return;
 800a83e:	bf00      	nop
}
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <fp_rshd>:


void fp_rshd(fp_int *a, int x)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
  int y;

  /* too many digits just zero and return */
  if (x >= a->used) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	db03      	blt.n	800a862 <fp_rshd+0x1c>
     fp_zero(a);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f869 	bl	800a932 <fp_zero>
     return;
 800a860:	e04a      	b.n	800a8f8 <fp_rshd+0xb2>
  }

   /* shift */
   for (y = 0; y < a->used - x; y++) {
 800a862:	2300      	movs	r3, #0
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	e00e      	b.n	800a886 <fp_rshd+0x40>
      a->dp[y] = a->dp[y+x];
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	441a      	add	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3202      	adds	r2, #2
 800a872:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	3202      	adds	r2, #2
 800a87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (y = 0; y < a->used - x; y++) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3301      	adds	r3, #1
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	429a      	cmp	r2, r3
 800a892:	dbe9      	blt.n	800a868 <fp_rshd+0x22>
   }

   /* zero rest */
   for (; y < a->used; y++) {
 800a894:	e008      	b.n	800a8a8 <fp_rshd+0x62>
      a->dp[y] = 0;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	3202      	adds	r2, #2
 800a89c:	2100      	movs	r1, #0
 800a89e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (; y < a->used; y++) {
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	dbf1      	blt.n	800a896 <fp_rshd+0x50>
   }

   /* decrement count */
   a->used -= x;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	1ad2      	subs	r2, r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
   fp_clamp(a);
 800a8be:	e004      	b.n	800a8ca <fp_rshd+0x84>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	1e5a      	subs	r2, r3, #1
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d008      	beq.n	800a8e4 <fp_rshd+0x9e>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	1e5a      	subs	r2, r3, #1
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3202      	adds	r2, #2
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0ed      	beq.n	800a8c0 <fp_rshd+0x7a>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <fp_rshd+0xac>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	e000      	b.n	800a8f4 <fp_rshd+0xae>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6053      	str	r3, [r2, #4]
}
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <mp_init>:

/* wolfSSL callers from normal lib */

/* init a new mp_int */
int mp_init (mp_int * a)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  if (a)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <mp_init+0x14>
    fp_init(a);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f805 	bl	800a91c <fp_init>
  return MP_OKAY;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <fp_init>:

void fp_init(fp_int *a)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
    a->size = FP_SIZE;
#endif
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_init(&a->raw);
#endif
    fp_zero(a);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f804 	bl	800a932 <fp_zero>
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <fp_zero>:

void fp_zero(fp_int *a)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
    int size;
    a->used = 0;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
#else
    size = FP_SIZE;
 800a946:	2388      	movs	r3, #136	; 0x88
 800a948:	60fb      	str	r3, [r7, #12]
#endif
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f103 0008 	add.w	r0, r3, #8
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	461a      	mov	r2, r3
 800a956:	2100      	movs	r1, #0
 800a958:	f001 f800 	bl	800b95c <memset>
}
 800a95c:	bf00      	nop
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <fp_clear>:

void fp_clear(fp_int *a)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
    int size;
    a->used = 0;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
#else
    size = FP_SIZE;
 800a978:	2388      	movs	r3, #136	; 0x88
 800a97a:	60fb      	str	r3, [r7, #12]
#endif
    XMEMSET(a->dp, 0, size * sizeof(fp_digit));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0008 	add.w	r0, r3, #8
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	461a      	mov	r2, r3
 800a988:	2100      	movs	r1, #0
 800a98a:	f000 ffe7 	bl	800b95c <memset>
    fp_free(a);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f82b 	bl	800a9ea <fp_free>
}
 800a994:	bf00      	nop
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <fp_forcezero>:

void fp_forcezero (mp_int * a)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
    int size;
    a->used = 0;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]
    a->sign = FP_ZPOS;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	605a      	str	r2, [r3, #4]
#if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
    size = a->size;
#else
    size = FP_SIZE;
 800a9b0:	2388      	movs	r3, #136	; 0x88
 800a9b2:	60fb      	str	r3, [r7, #12]
#endif
    ForceZero(a->dp, size * sizeof(fp_digit));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f7fc fb98 	bl	80070f6 <ForceZero>
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_zero(&a->raw);
#endif
    fp_free(a);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f80f 	bl	800a9ea <fp_free>
}
 800a9cc:	bf00      	nop
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <mp_forcezero>:

void mp_forcezero (mp_int * a)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
    fp_forcezero(a);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff ffdd 	bl	800a99c <fp_forcezero>
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <fp_free>:

void fp_free(fp_int* a)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
#ifdef HAVE_WOLF_BIGINT
    wc_bigint_free(&a->raw);
#else
    (void)a;
#endif
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <mp_clear>:


/* clear one (frees)  */
void mp_clear (mp_int * a)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
    if (a == NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <mp_clear+0x16>
        return;
    fp_clear(a);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ffa9 	bl	800a964 <fp_clear>
 800aa12:	e000      	b.n	800aa16 <mp_clear+0x18>
        return;
 800aa14:	bf00      	nop
}
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <mp_init_multi>:
}

/* handle up to 6 inits */
int mp_init_multi(mp_int* a, mp_int* b, mp_int* c, mp_int* d,
                  mp_int* e, mp_int* f)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
    if (a)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <mp_init_multi+0x1a>
        fp_init(a);
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f7ff ff73 	bl	800a91c <fp_init>
    if (b)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <mp_init_multi+0x26>
        fp_init(b);
 800aa3c:	68b8      	ldr	r0, [r7, #8]
 800aa3e:	f7ff ff6d 	bl	800a91c <fp_init>
    if (c)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <mp_init_multi+0x32>
        fp_init(c);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff ff67 	bl	800a91c <fp_init>
    if (d)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <mp_init_multi+0x3e>
        fp_init(d);
 800aa54:	6838      	ldr	r0, [r7, #0]
 800aa56:	f7ff ff61 	bl	800a91c <fp_init>
    if (e)
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <mp_init_multi+0x4a>
        fp_init(e);
 800aa60:	69b8      	ldr	r0, [r7, #24]
 800aa62:	f7ff ff5b 	bl	800a91c <fp_init>
    if (f)
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <mp_init_multi+0x56>
        fp_init(f);
 800aa6c:	69f8      	ldr	r0, [r7, #28]
 800aa6e:	f7ff ff55 	bl	800a91c <fp_init>

    return MP_OKAY;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <mp_add>:

/* high level addition (handles signs) */
int mp_add (mp_int * a, mp_int * b, mp_int * c)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  return fp_add(a, b, c);
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7fc fb4b 	bl	8007128 <fp_add>
 800aa92:	4603      	mov	r3, r0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <mp_sub>:

/* high level subtraction (handles signs) */
int mp_sub (mp_int * a, mp_int * b, mp_int * c)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
  return fp_sub(a, b, c);
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fc fc17 	bl	80072e0 <fp_sub>
 800aab2:	4603      	mov	r3, r0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <mp_mul>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_mul(mp_int * a, mp_int * b, mp_int * c)
#else
int mp_mul (mp_int * a, mp_int * b, mp_int * c)
#endif
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  return fp_mul(a, b, c);
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7fc fd04 	bl	80074da <fp_mul>
 800aad2:	4603      	mov	r3, r0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <mp_mulmod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_mulmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)
#else
int mp_mulmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)
#endif
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	603b      	str	r3, [r7, #0]

    if( A >= ESP_RSA_MULM_BITS && B >= ESP_RSA_MULM_BITS)
        return esp_mp_mulmod(a, b, c, d);
    else
 #endif
   return fp_mulmod(a, b, c, d);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	68b9      	ldr	r1, [r7, #8]
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7fe f8b5 	bl	8008c60 <fp_mulmod>
 800aaf6:	4603      	mov	r3, r0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <mp_mod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_mod (mp_int * a, mp_int * b, mp_int * c)
#else
int mp_mod (mp_int * a, mp_int * b, mp_int * c)
#endif
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
  return fp_mod (a, b, c);
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7fd fb92 	bl	800823a <fp_mod>
 800ab16:	4603      	mov	r3, r0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <mp_invmod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_invmod (mp_int * a, mp_int * b, mp_int * c)
#else
int mp_invmod (mp_int * a, mp_int * b, mp_int * c)
#endif
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  return fp_invmod(a, b, c);
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7fd fed2 	bl	80088da <fp_invmod>
 800ab36:	4603      	mov	r3, r0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <mp_exptmod>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#else
int mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#endif
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	603b      	str	r3, [r7, #0]
  return fp_exptmod(G, X, P, Y);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7fe fe63 	bl	8009820 <fp_exptmod>
 800ab5a:	4603      	mov	r3, r0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <mp_exptmod_nct>:
#if defined(FREESCALE_LTC_TFM)
int wolfcrypt_mp_exptmod_nct (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#else
int mp_exptmod_nct (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)
#endif
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
  return fp_exptmod_nct(G, X, P, Y);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7fe ff04 	bl	8009986 <fp_exptmod_nct>
 800ab7e:	4603      	mov	r3, r0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <mp_cmp>:


/* compare two ints (signed)*/
int mp_cmp (mp_int * a, mp_int * b)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  return fp_cmp(a, b);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff f9d8 	bl	8009f4a <fp_cmp>
 800ab9a:	4603      	mov	r3, r0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <mp_cmp_d>:

/* compare a digit */
int mp_cmp_d(mp_int * a, mp_digit b)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  return fp_cmp_d(a, b);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff f9f7 	bl	8009fa4 <fp_cmp_d>
 800abb6:	4603      	mov	r3, r0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <mp_unsigned_bin_size>:

/* get the size for an unsigned equivalent */
int mp_unsigned_bin_size (const mp_int * a)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  return fp_unsigned_bin_size(a);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff fd00 	bl	800a5ce <fp_unsigned_bin_size>
 800abce:	4603      	mov	r3, r0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <mp_to_unsigned_bin_len>:
{
  return fp_to_unsigned_bin(a,b);
}

int mp_to_unsigned_bin_len(mp_int * a, unsigned char *b, int c)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  return fp_to_unsigned_bin_len(a, b, c);
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff fc8a 	bl	800a502 <fp_to_unsigned_bin_len>
 800abee:	4603      	mov	r3, r0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <mp_read_unsigned_bin>:
/* reads a unsigned char array, assumes the msb is stored first [big endian] */
int mp_read_unsigned_bin (mp_int * a, const unsigned char *b, int c)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
  return fp_read_unsigned_bin(a, b, c);
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7ff fc1e 	bl	800a44a <fp_read_unsigned_bin>
 800ac0e:	4603      	mov	r3, r0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <fp_copy>:
  return MP_OKAY;
}

/* copy (src = a) to (dst = b) */
void fp_copy(const fp_int *a, fp_int *b)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
    /* if source and destination are different */
    if (a != b) {
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d011      	beq.n	800ac4e <fp_copy+0x36>
        else {
            /* TODO: Handle error case */
        }
#else
        /* all dp's are same size, so do straight copy */
        b->used = a->used;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	601a      	str	r2, [r3, #0]
        b->sign = a->sign;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	605a      	str	r2, [r3, #4]
        XMEMCPY(b->dp, a->dp, FP_SIZE * sizeof(fp_digit));
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	f103 0008 	add.w	r0, r3, #8
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3308      	adds	r3, #8
 800ac44:	f44f 7208 	mov.w	r2, #544	; 0x220
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f000 ff25 	bl	800ba98 <memcpy>
#endif
    }
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <fp_init_copy>:
    return MP_OKAY;
}

/* Copy (dst = a) from (src = b) */
void fp_init_copy(fp_int *a, fp_int* b)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
    if (a != b) {
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d006      	beq.n	800ac76 <fp_init_copy+0x20>
        fp_init(a);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff fe57 	bl	800a91c <fp_init>
        /* Note reversed parameter order! */
        fp_copy(b, a); /* copy (src = b) to (dst = a) */
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	6838      	ldr	r0, [r7, #0]
 800ac72:	f7ff ffd1 	bl	800ac18 <fp_copy>
    }
}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <mp_count_bits>:
{
    return fp_iszero(a);
}

int mp_count_bits (const mp_int* a)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
    return fp_count_bits(a);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff fcd5 	bl	800a636 <fp_count_bits>
 800ac8c:	4603      	mov	r3, r0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <fp_add_d>:
#if defined(HAVE_ECC) || !defined(NO_PWDBASED) || defined(OPENSSL_EXTRA) || \
    defined(WC_RSA_BLINDING) || !defined(NO_DSA) || \
    (!defined(NO_RSA) && !defined(NO_RSA_BOUNDS_CHECK))
/* c = a + b */
int fp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b088      	sub	sp, #32
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
   fp_int* tmp;
#endif
   int     err;

#ifdef WOLFSSL_SMALL_STACK
   tmp = (fp_int*)XMALLOC(sizeof(fp_int), NULL, DYNAMIC_TYPE_BIGINT);
 800aca2:	f44f 700a 	mov.w	r0, #552	; 0x228
 800aca6:	f7f9 fbe1 	bl	800446c <wolfSSL_Malloc>
 800acaa:	61f8      	str	r0, [r7, #28]
   if (tmp == NULL)
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <fp_add_d+0x22>
       return FP_MEM;
 800acb2:	f06f 0301 	mvn.w	r3, #1
 800acb6:	e015      	b.n	800ace4 <fp_add_d+0x4e>
#endif

   fp_init(tmp);
 800acb8:	69f8      	ldr	r0, [r7, #28]
 800acba:	f7ff fe2f 	bl	800a91c <fp_init>
   fp_set(tmp, b);
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	69f8      	ldr	r0, [r7, #28]
 800acc2:	f7ff fc9f 	bl	800a604 <fp_set>
   err = fp_add(a, tmp, c);
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	69f9      	ldr	r1, [r7, #28]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7fc fa2c 	bl	8007128 <fp_add>
 800acd0:	61b8      	str	r0, [r7, #24]

#ifdef WOLFSSL_SMALL_STACK
   XFREE(tmp, NULL, DYNAMIC_TYPE_BIGINT);
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <fp_add_d+0x4c>
 800acdc:	6978      	ldr	r0, [r7, #20]
 800acde:	f7f9 fbe1 	bl	80044a4 <wolfSSL_Free>
#endif
   return err;
 800ace2:	69bb      	ldr	r3, [r7, #24]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <mp_add_d>:

/* external compatibility */
int mp_add_d(fp_int *a, fp_digit b, fp_int *c)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
    return fp_add_d(a, b, c);
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f7ff ffca 	bl	800ac96 <fp_add_d>
 800ad02:	4603      	mov	r3, r0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <wolfSSL_CryptHwMutexInit>:
/* Mutex for protection of cryptography hardware */
static wolfSSL_Mutex wcCryptHwMutex;
static int wcCryptHwMutexInit = 0;

int wolfSSL_CryptHwMutexInit(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
    int ret = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	607b      	str	r3, [r7, #4]
    if (wcCryptHwMutexInit == 0) {
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <wolfSSL_CryptHwMutexInit+0x30>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <wolfSSL_CryptHwMutexInit+0x26>
        ret = wc_InitMutex(&wcCryptHwMutex);
 800ad1e:	4808      	ldr	r0, [pc, #32]	; (800ad40 <wolfSSL_CryptHwMutexInit+0x34>)
 800ad20:	f000 f840 	bl	800ada4 <wc_InitMutex>
 800ad24:	6078      	str	r0, [r7, #4]
        if (ret == 0) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <wolfSSL_CryptHwMutexInit+0x26>
            wcCryptHwMutexInit = 1;
 800ad2c:	4b03      	ldr	r3, [pc, #12]	; (800ad3c <wolfSSL_CryptHwMutexInit+0x30>)
 800ad2e:	2201      	movs	r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
        }
    }
    return ret;
 800ad32:	687b      	ldr	r3, [r7, #4]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	20000130 	.word	0x20000130
 800ad40:	2000012c 	.word	0x2000012c

0800ad44 <wolfSSL_CryptHwMutexLock>:
int wolfSSL_CryptHwMutexLock(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
    int ret = BAD_MUTEX_E;
 800ad4a:	f06f 0369 	mvn.w	r3, #105	; 0x69
 800ad4e:	607b      	str	r3, [r7, #4]
    /* Make sure HW Mutex has been initialized */
    ret = wolfSSL_CryptHwMutexInit();
 800ad50:	f7ff ffdc 	bl	800ad0c <wolfSSL_CryptHwMutexInit>
 800ad54:	6078      	str	r0, [r7, #4]
    if (ret == 0) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d103      	bne.n	800ad64 <wolfSSL_CryptHwMutexLock+0x20>
        ret = wc_LockMutex(&wcCryptHwMutex);
 800ad5c:	4804      	ldr	r0, [pc, #16]	; (800ad70 <wolfSSL_CryptHwMutexLock+0x2c>)
 800ad5e:	f000 f82c 	bl	800adba <wc_LockMutex>
 800ad62:	6078      	str	r0, [r7, #4]
    }
    return ret;
 800ad64:	687b      	ldr	r3, [r7, #4]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	2000012c 	.word	0x2000012c

0800ad74 <wolfSSL_CryptHwMutexUnLock>:
int wolfSSL_CryptHwMutexUnLock(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
    int ret = BAD_MUTEX_E;
 800ad7a:	f06f 0369 	mvn.w	r3, #105	; 0x69
 800ad7e:	607b      	str	r3, [r7, #4]
    if (wcCryptHwMutexInit) {
 800ad80:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <wolfSSL_CryptHwMutexUnLock+0x28>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <wolfSSL_CryptHwMutexUnLock+0x1c>
        ret = wc_UnLockMutex(&wcCryptHwMutex);
 800ad88:	4805      	ldr	r0, [pc, #20]	; (800ada0 <wolfSSL_CryptHwMutexUnLock+0x2c>)
 800ad8a:	f000 f821 	bl	800add0 <wc_UnLockMutex>
 800ad8e:	6078      	str	r0, [r7, #4]
    }
    return ret;
 800ad90:	687b      	ldr	r3, [r7, #4]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20000130 	.word	0x20000130
 800ada0:	2000012c 	.word	0x2000012c

0800ada4 <wc_InitMutex>:
    }
#endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) */
#ifdef SINGLE_THREADED

    int wc_InitMutex(wolfSSL_Mutex* m)
    {
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 800adac:	2300      	movs	r3, #0
    }
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <wc_LockMutex>:
        return 0;
    }


    int wc_LockMutex(wolfSSL_Mutex *m)
    {
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 800adc2:	2300      	movs	r3, #0
    }
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <wc_UnLockMutex>:


    int wc_UnLockMutex(wolfSSL_Mutex *m)
    {
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 800add8:	2300      	movs	r3, #0
    }
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <get_digit_count>:
        --iy;
    }
}

int get_digit_count(const mp_int* a)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
    if (a == NULL)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <get_digit_count+0x12>
        return 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	e001      	b.n	800adfc <get_digit_count+0x16>

    return (int)a->used;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <get_rand_digit>:
#endif /* HAVE_ECC || WOLFSSL_MP_COND_COPY */


#ifndef WC_NO_RNG
int get_rand_digit(WC_RNG* rng, mp_digit* d)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
    return wc_RNG_GenerateBlock(rng, (byte*)d, sizeof(mp_digit));
 800ae12:	2204      	movs	r2, #4
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7fa f88d 	bl	8004f36 <wc_RNG_GenerateBlock>
 800ae1c:	4603      	mov	r3, r0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <mp_rand>:

#if defined(WC_RSA_BLINDING) || defined(WOLFCRYPT_HAVE_SAKKE)
int mp_rand(mp_int* a, int digits, WC_RNG* rng)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b086      	sub	sp, #24
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	607a      	str	r2, [r7, #4]
    int ret = 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
    int cnt = digits * (int)sizeof(mp_digit);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	613b      	str	r3, [r7, #16]

    if (rng == NULL) {
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <mp_rand+0x24>
        ret = MISSING_RNG_E;
 800ae42:	f06f 03eb 	mvn.w	r3, #235	; 0xeb
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	e008      	b.n	800ae5c <mp_rand+0x36>
    }
    else if (a == NULL || digits <= 0) {
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <mp_rand+0x30>
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dc02      	bgt.n	800ae5c <mp_rand+0x36>
        ret = BAD_FUNC_ARG;
 800ae56:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ae5a:	617b      	str	r3, [r7, #20]
    }
#else
#if defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL)
    if ((ret == MP_OKAY) && ((unsigned int)digits > a->size))
#else
    if ((ret == MP_OKAY) && (digits > FP_SIZE))
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d105      	bne.n	800ae6e <mp_rand+0x48>
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b88      	cmp	r3, #136	; 0x88
 800ae66:	dd02      	ble.n	800ae6e <mp_rand+0x48>
#endif
    {
        ret = BAD_FUNC_ARG;
 800ae68:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 800ae6c:	617b      	str	r3, [r7, #20]
    }
    if (ret == MP_OKAY) {
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d102      	bne.n	800ae7a <mp_rand+0x54>
        a->used = (word32)digits;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	601a      	str	r2, [r3, #0]
    }
#endif
    /* fill the data with random bytes */
    if (ret == MP_OKAY) {
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d107      	bne.n	800ae90 <mp_rand+0x6a>
        ret = wc_RNG_GenerateBlock(rng, (byte*)a->dp, (word32)cnt);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3308      	adds	r3, #8
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7fa f854 	bl	8004f36 <wc_RNG_GenerateBlock>
 800ae8e:	6178      	str	r0, [r7, #20]
    }
    if (ret == MP_OKAY) {
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d118      	bne.n	800aec8 <mp_rand+0xa2>
        for (i = 0; i < a->used; i++) {
            a->dp[i] &= MP_MASK;
        }
#endif
        /* ensure top digit is not zero */
        while ((ret == MP_OKAY) && (a->dp[a->used - 1] == 0)) {
 800ae96:	e00b      	b.n	800aeb0 <mp_rand+0x8a>
            ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	3302      	adds	r3, #2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff ffad 	bl	800ae08 <get_rand_digit>
 800aeae:	6178      	str	r0, [r7, #20]
        while ((ret == MP_OKAY) && (a->dp[a->used - 1] == 0)) {
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d108      	bne.n	800aec8 <mp_rand+0xa2>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	1e5a      	subs	r2, r3, #1
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3202      	adds	r2, #2
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0e7      	beq.n	800ae98 <mp_rand+0x72>
            a->dp[a->used - 1] &= MP_MASK;
#endif
        }
    }

    return ret;
 800aec8:	697b      	ldr	r3, [r7, #20]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <exit>:
 800aed4:	b508      	push	{r3, lr}
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <exit+0x1c>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	b113      	cbz	r3, 800aee2 <exit+0xe>
 800aedc:	2100      	movs	r1, #0
 800aede:	f3af 8000 	nop.w
 800aee2:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <exit+0x20>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	b103      	cbz	r3, 800aeea <exit+0x16>
 800aee8:	4798      	blx	r3
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7f5 ff10 	bl	8000d10 <_exit>
 800aef0:	00000000 	.word	0x00000000
 800aef4:	20000274 	.word	0x20000274

0800aef8 <malloc>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	; (800af04 <malloc+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f000 b82b 	b.w	800af58 <_malloc_r>
 800af02:	bf00      	nop
 800af04:	20000064 	.word	0x20000064

0800af08 <free>:
 800af08:	4b02      	ldr	r3, [pc, #8]	; (800af14 <free+0xc>)
 800af0a:	4601      	mov	r1, r0
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f000 bdd1 	b.w	800bab4 <_free_r>
 800af12:	bf00      	nop
 800af14:	20000064 	.word	0x20000064

0800af18 <sbrk_aligned>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	4e0e      	ldr	r6, [pc, #56]	; (800af54 <sbrk_aligned+0x3c>)
 800af1c:	460c      	mov	r4, r1
 800af1e:	6831      	ldr	r1, [r6, #0]
 800af20:	4605      	mov	r5, r0
 800af22:	b911      	cbnz	r1, 800af2a <sbrk_aligned+0x12>
 800af24:	f000 fd68 	bl	800b9f8 <_sbrk_r>
 800af28:	6030      	str	r0, [r6, #0]
 800af2a:	4621      	mov	r1, r4
 800af2c:	4628      	mov	r0, r5
 800af2e:	f000 fd63 	bl	800b9f8 <_sbrk_r>
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	d00a      	beq.n	800af4c <sbrk_aligned+0x34>
 800af36:	1cc4      	adds	r4, r0, #3
 800af38:	f024 0403 	bic.w	r4, r4, #3
 800af3c:	42a0      	cmp	r0, r4
 800af3e:	d007      	beq.n	800af50 <sbrk_aligned+0x38>
 800af40:	1a21      	subs	r1, r4, r0
 800af42:	4628      	mov	r0, r5
 800af44:	f000 fd58 	bl	800b9f8 <_sbrk_r>
 800af48:	3001      	adds	r0, #1
 800af4a:	d101      	bne.n	800af50 <sbrk_aligned+0x38>
 800af4c:	f04f 34ff 	mov.w	r4, #4294967295
 800af50:	4620      	mov	r0, r4
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	20000138 	.word	0x20000138

0800af58 <_malloc_r>:
 800af58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af5c:	1ccd      	adds	r5, r1, #3
 800af5e:	f025 0503 	bic.w	r5, r5, #3
 800af62:	3508      	adds	r5, #8
 800af64:	2d0c      	cmp	r5, #12
 800af66:	bf38      	it	cc
 800af68:	250c      	movcc	r5, #12
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	4607      	mov	r7, r0
 800af6e:	db01      	blt.n	800af74 <_malloc_r+0x1c>
 800af70:	42a9      	cmp	r1, r5
 800af72:	d905      	bls.n	800af80 <_malloc_r+0x28>
 800af74:	230c      	movs	r3, #12
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	2600      	movs	r6, #0
 800af7a:	4630      	mov	r0, r6
 800af7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b054 <_malloc_r+0xfc>
 800af84:	f000 f868 	bl	800b058 <__malloc_lock>
 800af88:	f8d8 3000 	ldr.w	r3, [r8]
 800af8c:	461c      	mov	r4, r3
 800af8e:	bb5c      	cbnz	r4, 800afe8 <_malloc_r+0x90>
 800af90:	4629      	mov	r1, r5
 800af92:	4638      	mov	r0, r7
 800af94:	f7ff ffc0 	bl	800af18 <sbrk_aligned>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	4604      	mov	r4, r0
 800af9c:	d155      	bne.n	800b04a <_malloc_r+0xf2>
 800af9e:	f8d8 4000 	ldr.w	r4, [r8]
 800afa2:	4626      	mov	r6, r4
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	d145      	bne.n	800b034 <_malloc_r+0xdc>
 800afa8:	2c00      	cmp	r4, #0
 800afaa:	d048      	beq.n	800b03e <_malloc_r+0xe6>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	4631      	mov	r1, r6
 800afb0:	4638      	mov	r0, r7
 800afb2:	eb04 0903 	add.w	r9, r4, r3
 800afb6:	f000 fd1f 	bl	800b9f8 <_sbrk_r>
 800afba:	4581      	cmp	r9, r0
 800afbc:	d13f      	bne.n	800b03e <_malloc_r+0xe6>
 800afbe:	6821      	ldr	r1, [r4, #0]
 800afc0:	1a6d      	subs	r5, r5, r1
 800afc2:	4629      	mov	r1, r5
 800afc4:	4638      	mov	r0, r7
 800afc6:	f7ff ffa7 	bl	800af18 <sbrk_aligned>
 800afca:	3001      	adds	r0, #1
 800afcc:	d037      	beq.n	800b03e <_malloc_r+0xe6>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	442b      	add	r3, r5
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	f8d8 3000 	ldr.w	r3, [r8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d038      	beq.n	800b04e <_malloc_r+0xf6>
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	42a2      	cmp	r2, r4
 800afe0:	d12b      	bne.n	800b03a <_malloc_r+0xe2>
 800afe2:	2200      	movs	r2, #0
 800afe4:	605a      	str	r2, [r3, #4]
 800afe6:	e00f      	b.n	800b008 <_malloc_r+0xb0>
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	1b52      	subs	r2, r2, r5
 800afec:	d41f      	bmi.n	800b02e <_malloc_r+0xd6>
 800afee:	2a0b      	cmp	r2, #11
 800aff0:	d917      	bls.n	800b022 <_malloc_r+0xca>
 800aff2:	1961      	adds	r1, r4, r5
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	6025      	str	r5, [r4, #0]
 800aff8:	bf18      	it	ne
 800affa:	6059      	strne	r1, [r3, #4]
 800affc:	6863      	ldr	r3, [r4, #4]
 800affe:	bf08      	it	eq
 800b000:	f8c8 1000 	streq.w	r1, [r8]
 800b004:	5162      	str	r2, [r4, r5]
 800b006:	604b      	str	r3, [r1, #4]
 800b008:	4638      	mov	r0, r7
 800b00a:	f104 060b 	add.w	r6, r4, #11
 800b00e:	f000 f829 	bl	800b064 <__malloc_unlock>
 800b012:	f026 0607 	bic.w	r6, r6, #7
 800b016:	1d23      	adds	r3, r4, #4
 800b018:	1af2      	subs	r2, r6, r3
 800b01a:	d0ae      	beq.n	800af7a <_malloc_r+0x22>
 800b01c:	1b9b      	subs	r3, r3, r6
 800b01e:	50a3      	str	r3, [r4, r2]
 800b020:	e7ab      	b.n	800af7a <_malloc_r+0x22>
 800b022:	42a3      	cmp	r3, r4
 800b024:	6862      	ldr	r2, [r4, #4]
 800b026:	d1dd      	bne.n	800afe4 <_malloc_r+0x8c>
 800b028:	f8c8 2000 	str.w	r2, [r8]
 800b02c:	e7ec      	b.n	800b008 <_malloc_r+0xb0>
 800b02e:	4623      	mov	r3, r4
 800b030:	6864      	ldr	r4, [r4, #4]
 800b032:	e7ac      	b.n	800af8e <_malloc_r+0x36>
 800b034:	4634      	mov	r4, r6
 800b036:	6876      	ldr	r6, [r6, #4]
 800b038:	e7b4      	b.n	800afa4 <_malloc_r+0x4c>
 800b03a:	4613      	mov	r3, r2
 800b03c:	e7cc      	b.n	800afd8 <_malloc_r+0x80>
 800b03e:	230c      	movs	r3, #12
 800b040:	603b      	str	r3, [r7, #0]
 800b042:	4638      	mov	r0, r7
 800b044:	f000 f80e 	bl	800b064 <__malloc_unlock>
 800b048:	e797      	b.n	800af7a <_malloc_r+0x22>
 800b04a:	6025      	str	r5, [r4, #0]
 800b04c:	e7dc      	b.n	800b008 <_malloc_r+0xb0>
 800b04e:	605b      	str	r3, [r3, #4]
 800b050:	deff      	udf	#255	; 0xff
 800b052:	bf00      	nop
 800b054:	20000134 	.word	0x20000134

0800b058 <__malloc_lock>:
 800b058:	4801      	ldr	r0, [pc, #4]	; (800b060 <__malloc_lock+0x8>)
 800b05a:	f000 bd1b 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b05e:	bf00      	nop
 800b060:	2000027c 	.word	0x2000027c

0800b064 <__malloc_unlock>:
 800b064:	4801      	ldr	r0, [pc, #4]	; (800b06c <__malloc_unlock+0x8>)
 800b066:	f000 bd16 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b06a:	bf00      	nop
 800b06c:	2000027c 	.word	0x2000027c

0800b070 <_fclose_r>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4606      	mov	r6, r0
 800b074:	460c      	mov	r4, r1
 800b076:	b911      	cbnz	r1, 800b07e <_fclose_r+0xe>
 800b078:	2500      	movs	r5, #0
 800b07a:	4628      	mov	r0, r5
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
 800b07e:	b118      	cbz	r0, 800b088 <_fclose_r+0x18>
 800b080:	6a03      	ldr	r3, [r0, #32]
 800b082:	b90b      	cbnz	r3, 800b088 <_fclose_r+0x18>
 800b084:	f000 f9e2 	bl	800b44c <__sinit>
 800b088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b08a:	07d8      	lsls	r0, r3, #31
 800b08c:	d405      	bmi.n	800b09a <_fclose_r+0x2a>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	0599      	lsls	r1, r3, #22
 800b092:	d402      	bmi.n	800b09a <_fclose_r+0x2a>
 800b094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b096:	f000 fcfd 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09e:	b93b      	cbnz	r3, 800b0b0 <_fclose_r+0x40>
 800b0a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b0a2:	f015 0501 	ands.w	r5, r5, #1
 800b0a6:	d1e7      	bne.n	800b078 <_fclose_r+0x8>
 800b0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0aa:	f000 fcf4 	bl	800ba96 <__retarget_lock_release_recursive>
 800b0ae:	e7e4      	b.n	800b07a <_fclose_r+0xa>
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f000 f83c 	bl	800b130 <__sflush_r>
 800b0b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	b133      	cbz	r3, 800b0cc <_fclose_r+0x5c>
 800b0be:	6a21      	ldr	r1, [r4, #32]
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4798      	blx	r3
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	bfb8      	it	lt
 800b0c8:	f04f 35ff 	movlt.w	r5, #4294967295
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	061a      	lsls	r2, r3, #24
 800b0d0:	d503      	bpl.n	800b0da <_fclose_r+0x6a>
 800b0d2:	6921      	ldr	r1, [r4, #16]
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f000 fced 	bl	800bab4 <_free_r>
 800b0da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0dc:	b141      	cbz	r1, 800b0f0 <_fclose_r+0x80>
 800b0de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0e2:	4299      	cmp	r1, r3
 800b0e4:	d002      	beq.n	800b0ec <_fclose_r+0x7c>
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f000 fce4 	bl	800bab4 <_free_r>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6363      	str	r3, [r4, #52]	; 0x34
 800b0f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b0f2:	b121      	cbz	r1, 800b0fe <_fclose_r+0x8e>
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f000 fcdd 	bl	800bab4 <_free_r>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0fe:	f000 f945 	bl	800b38c <__sfp_lock_acquire>
 800b102:	2300      	movs	r3, #0
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b108:	07db      	lsls	r3, r3, #31
 800b10a:	d402      	bmi.n	800b112 <_fclose_r+0xa2>
 800b10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10e:	f000 fcc2 	bl	800ba96 <__retarget_lock_release_recursive>
 800b112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b114:	f000 fcbd 	bl	800ba92 <__retarget_lock_close_recursive>
 800b118:	f000 f93e 	bl	800b398 <__sfp_lock_release>
 800b11c:	e7ad      	b.n	800b07a <_fclose_r+0xa>
	...

0800b120 <fclose>:
 800b120:	4b02      	ldr	r3, [pc, #8]	; (800b12c <fclose+0xc>)
 800b122:	4601      	mov	r1, r0
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	f7ff bfa3 	b.w	800b070 <_fclose_r>
 800b12a:	bf00      	nop
 800b12c:	20000064 	.word	0x20000064

0800b130 <__sflush_r>:
 800b130:	898a      	ldrh	r2, [r1, #12]
 800b132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b136:	4605      	mov	r5, r0
 800b138:	0710      	lsls	r0, r2, #28
 800b13a:	460c      	mov	r4, r1
 800b13c:	d458      	bmi.n	800b1f0 <__sflush_r+0xc0>
 800b13e:	684b      	ldr	r3, [r1, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	dc05      	bgt.n	800b150 <__sflush_r+0x20>
 800b144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b146:	2b00      	cmp	r3, #0
 800b148:	dc02      	bgt.n	800b150 <__sflush_r+0x20>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b152:	2e00      	cmp	r6, #0
 800b154:	d0f9      	beq.n	800b14a <__sflush_r+0x1a>
 800b156:	2300      	movs	r3, #0
 800b158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b15c:	682f      	ldr	r7, [r5, #0]
 800b15e:	6a21      	ldr	r1, [r4, #32]
 800b160:	602b      	str	r3, [r5, #0]
 800b162:	d032      	beq.n	800b1ca <__sflush_r+0x9a>
 800b164:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	075a      	lsls	r2, r3, #29
 800b16a:	d505      	bpl.n	800b178 <__sflush_r+0x48>
 800b16c:	6863      	ldr	r3, [r4, #4]
 800b16e:	1ac0      	subs	r0, r0, r3
 800b170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b172:	b10b      	cbz	r3, 800b178 <__sflush_r+0x48>
 800b174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b176:	1ac0      	subs	r0, r0, r3
 800b178:	2300      	movs	r3, #0
 800b17a:	4602      	mov	r2, r0
 800b17c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b17e:	6a21      	ldr	r1, [r4, #32]
 800b180:	4628      	mov	r0, r5
 800b182:	47b0      	blx	r6
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	d106      	bne.n	800b198 <__sflush_r+0x68>
 800b18a:	6829      	ldr	r1, [r5, #0]
 800b18c:	291d      	cmp	r1, #29
 800b18e:	d82b      	bhi.n	800b1e8 <__sflush_r+0xb8>
 800b190:	4a29      	ldr	r2, [pc, #164]	; (800b238 <__sflush_r+0x108>)
 800b192:	410a      	asrs	r2, r1
 800b194:	07d6      	lsls	r6, r2, #31
 800b196:	d427      	bmi.n	800b1e8 <__sflush_r+0xb8>
 800b198:	2200      	movs	r2, #0
 800b19a:	6062      	str	r2, [r4, #4]
 800b19c:	04d9      	lsls	r1, r3, #19
 800b19e:	6922      	ldr	r2, [r4, #16]
 800b1a0:	6022      	str	r2, [r4, #0]
 800b1a2:	d504      	bpl.n	800b1ae <__sflush_r+0x7e>
 800b1a4:	1c42      	adds	r2, r0, #1
 800b1a6:	d101      	bne.n	800b1ac <__sflush_r+0x7c>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b903      	cbnz	r3, 800b1ae <__sflush_r+0x7e>
 800b1ac:	6560      	str	r0, [r4, #84]	; 0x54
 800b1ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1b0:	602f      	str	r7, [r5, #0]
 800b1b2:	2900      	cmp	r1, #0
 800b1b4:	d0c9      	beq.n	800b14a <__sflush_r+0x1a>
 800b1b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ba:	4299      	cmp	r1, r3
 800b1bc:	d002      	beq.n	800b1c4 <__sflush_r+0x94>
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f000 fc78 	bl	800bab4 <_free_r>
 800b1c4:	2000      	movs	r0, #0
 800b1c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b1c8:	e7c0      	b.n	800b14c <__sflush_r+0x1c>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	47b0      	blx	r6
 800b1d0:	1c41      	adds	r1, r0, #1
 800b1d2:	d1c8      	bne.n	800b166 <__sflush_r+0x36>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0c5      	beq.n	800b166 <__sflush_r+0x36>
 800b1da:	2b1d      	cmp	r3, #29
 800b1dc:	d001      	beq.n	800b1e2 <__sflush_r+0xb2>
 800b1de:	2b16      	cmp	r3, #22
 800b1e0:	d101      	bne.n	800b1e6 <__sflush_r+0xb6>
 800b1e2:	602f      	str	r7, [r5, #0]
 800b1e4:	e7b1      	b.n	800b14a <__sflush_r+0x1a>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	e7ad      	b.n	800b14c <__sflush_r+0x1c>
 800b1f0:	690f      	ldr	r7, [r1, #16]
 800b1f2:	2f00      	cmp	r7, #0
 800b1f4:	d0a9      	beq.n	800b14a <__sflush_r+0x1a>
 800b1f6:	0793      	lsls	r3, r2, #30
 800b1f8:	680e      	ldr	r6, [r1, #0]
 800b1fa:	bf08      	it	eq
 800b1fc:	694b      	ldreq	r3, [r1, #20]
 800b1fe:	600f      	str	r7, [r1, #0]
 800b200:	bf18      	it	ne
 800b202:	2300      	movne	r3, #0
 800b204:	eba6 0807 	sub.w	r8, r6, r7
 800b208:	608b      	str	r3, [r1, #8]
 800b20a:	f1b8 0f00 	cmp.w	r8, #0
 800b20e:	dd9c      	ble.n	800b14a <__sflush_r+0x1a>
 800b210:	6a21      	ldr	r1, [r4, #32]
 800b212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b214:	4643      	mov	r3, r8
 800b216:	463a      	mov	r2, r7
 800b218:	4628      	mov	r0, r5
 800b21a:	47b0      	blx	r6
 800b21c:	2800      	cmp	r0, #0
 800b21e:	dc06      	bgt.n	800b22e <__sflush_r+0xfe>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	e78e      	b.n	800b14c <__sflush_r+0x1c>
 800b22e:	4407      	add	r7, r0
 800b230:	eba8 0800 	sub.w	r8, r8, r0
 800b234:	e7e9      	b.n	800b20a <__sflush_r+0xda>
 800b236:	bf00      	nop
 800b238:	dfbffffe 	.word	0xdfbffffe

0800b23c <_fflush_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	690b      	ldr	r3, [r1, #16]
 800b240:	4605      	mov	r5, r0
 800b242:	460c      	mov	r4, r1
 800b244:	b913      	cbnz	r3, 800b24c <_fflush_r+0x10>
 800b246:	2500      	movs	r5, #0
 800b248:	4628      	mov	r0, r5
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	b118      	cbz	r0, 800b256 <_fflush_r+0x1a>
 800b24e:	6a03      	ldr	r3, [r0, #32]
 800b250:	b90b      	cbnz	r3, 800b256 <_fflush_r+0x1a>
 800b252:	f000 f8fb 	bl	800b44c <__sinit>
 800b256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0f3      	beq.n	800b246 <_fflush_r+0xa>
 800b25e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b260:	07d0      	lsls	r0, r2, #31
 800b262:	d404      	bmi.n	800b26e <_fflush_r+0x32>
 800b264:	0599      	lsls	r1, r3, #22
 800b266:	d402      	bmi.n	800b26e <_fflush_r+0x32>
 800b268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b26a:	f000 fc13 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b26e:	4628      	mov	r0, r5
 800b270:	4621      	mov	r1, r4
 800b272:	f7ff ff5d 	bl	800b130 <__sflush_r>
 800b276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b278:	07da      	lsls	r2, r3, #31
 800b27a:	4605      	mov	r5, r0
 800b27c:	d4e4      	bmi.n	800b248 <_fflush_r+0xc>
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	059b      	lsls	r3, r3, #22
 800b282:	d4e1      	bmi.n	800b248 <_fflush_r+0xc>
 800b284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b286:	f000 fc06 	bl	800ba96 <__retarget_lock_release_recursive>
 800b28a:	e7dd      	b.n	800b248 <_fflush_r+0xc>

0800b28c <std>:
 800b28c:	2300      	movs	r3, #0
 800b28e:	b510      	push	{r4, lr}
 800b290:	4604      	mov	r4, r0
 800b292:	e9c0 3300 	strd	r3, r3, [r0]
 800b296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b29a:	6083      	str	r3, [r0, #8]
 800b29c:	8181      	strh	r1, [r0, #12]
 800b29e:	6643      	str	r3, [r0, #100]	; 0x64
 800b2a0:	81c2      	strh	r2, [r0, #14]
 800b2a2:	6183      	str	r3, [r0, #24]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	2208      	movs	r2, #8
 800b2a8:	305c      	adds	r0, #92	; 0x5c
 800b2aa:	f000 fb57 	bl	800b95c <memset>
 800b2ae:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <std+0x58>)
 800b2b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <std+0x5c>)
 800b2b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2b6:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <std+0x60>)
 800b2b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <std+0x64>)
 800b2bc:	6323      	str	r3, [r4, #48]	; 0x30
 800b2be:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <std+0x68>)
 800b2c0:	6224      	str	r4, [r4, #32]
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	d006      	beq.n	800b2d4 <std+0x48>
 800b2c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b2ca:	4294      	cmp	r4, r2
 800b2cc:	d002      	beq.n	800b2d4 <std+0x48>
 800b2ce:	33d0      	adds	r3, #208	; 0xd0
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	d105      	bne.n	800b2e0 <std+0x54>
 800b2d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2dc:	f000 bbd8 	b.w	800ba90 <__retarget_lock_init_recursive>
 800b2e0:	bd10      	pop	{r4, pc}
 800b2e2:	bf00      	nop
 800b2e4:	0800b64d 	.word	0x0800b64d
 800b2e8:	0800b66f 	.word	0x0800b66f
 800b2ec:	0800b6a7 	.word	0x0800b6a7
 800b2f0:	0800b6cb 	.word	0x0800b6cb
 800b2f4:	2000013c 	.word	0x2000013c

0800b2f8 <stdio_exit_handler>:
 800b2f8:	4a02      	ldr	r2, [pc, #8]	; (800b304 <stdio_exit_handler+0xc>)
 800b2fa:	4903      	ldr	r1, [pc, #12]	; (800b308 <stdio_exit_handler+0x10>)
 800b2fc:	4803      	ldr	r0, [pc, #12]	; (800b30c <stdio_exit_handler+0x14>)
 800b2fe:	f000 b91b 	b.w	800b538 <_fwalk_sglue>
 800b302:	bf00      	nop
 800b304:	2000000c 	.word	0x2000000c
 800b308:	0800b23d 	.word	0x0800b23d
 800b30c:	20000018 	.word	0x20000018

0800b310 <cleanup_stdio>:
 800b310:	6841      	ldr	r1, [r0, #4]
 800b312:	4b0c      	ldr	r3, [pc, #48]	; (800b344 <cleanup_stdio+0x34>)
 800b314:	4299      	cmp	r1, r3
 800b316:	b510      	push	{r4, lr}
 800b318:	4604      	mov	r4, r0
 800b31a:	d001      	beq.n	800b320 <cleanup_stdio+0x10>
 800b31c:	f7ff ff8e 	bl	800b23c <_fflush_r>
 800b320:	68a1      	ldr	r1, [r4, #8]
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <cleanup_stdio+0x38>)
 800b324:	4299      	cmp	r1, r3
 800b326:	d002      	beq.n	800b32e <cleanup_stdio+0x1e>
 800b328:	4620      	mov	r0, r4
 800b32a:	f7ff ff87 	bl	800b23c <_fflush_r>
 800b32e:	68e1      	ldr	r1, [r4, #12]
 800b330:	4b06      	ldr	r3, [pc, #24]	; (800b34c <cleanup_stdio+0x3c>)
 800b332:	4299      	cmp	r1, r3
 800b334:	d004      	beq.n	800b340 <cleanup_stdio+0x30>
 800b336:	4620      	mov	r0, r4
 800b338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b33c:	f7ff bf7e 	b.w	800b23c <_fflush_r>
 800b340:	bd10      	pop	{r4, pc}
 800b342:	bf00      	nop
 800b344:	2000013c 	.word	0x2000013c
 800b348:	200001a4 	.word	0x200001a4
 800b34c:	2000020c 	.word	0x2000020c

0800b350 <global_stdio_init.part.0>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <global_stdio_init.part.0+0x30>)
 800b354:	4c0b      	ldr	r4, [pc, #44]	; (800b384 <global_stdio_init.part.0+0x34>)
 800b356:	4a0c      	ldr	r2, [pc, #48]	; (800b388 <global_stdio_init.part.0+0x38>)
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	4620      	mov	r0, r4
 800b35c:	2200      	movs	r2, #0
 800b35e:	2104      	movs	r1, #4
 800b360:	f7ff ff94 	bl	800b28c <std>
 800b364:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b368:	2201      	movs	r2, #1
 800b36a:	2109      	movs	r1, #9
 800b36c:	f7ff ff8e 	bl	800b28c <std>
 800b370:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b374:	2202      	movs	r2, #2
 800b376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b37a:	2112      	movs	r1, #18
 800b37c:	f7ff bf86 	b.w	800b28c <std>
 800b380:	20000274 	.word	0x20000274
 800b384:	2000013c 	.word	0x2000013c
 800b388:	0800b2f9 	.word	0x0800b2f9

0800b38c <__sfp_lock_acquire>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__sfp_lock_acquire+0x8>)
 800b38e:	f000 bb81 	b.w	800ba94 <__retarget_lock_acquire_recursive>
 800b392:	bf00      	nop
 800b394:	2000027d 	.word	0x2000027d

0800b398 <__sfp_lock_release>:
 800b398:	4801      	ldr	r0, [pc, #4]	; (800b3a0 <__sfp_lock_release+0x8>)
 800b39a:	f000 bb7c 	b.w	800ba96 <__retarget_lock_release_recursive>
 800b39e:	bf00      	nop
 800b3a0:	2000027d 	.word	0x2000027d

0800b3a4 <__sfp>:
 800b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	f7ff ffef 	bl	800b38c <__sfp_lock_acquire>
 800b3ae:	4b24      	ldr	r3, [pc, #144]	; (800b440 <__sfp+0x9c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	b90b      	cbnz	r3, 800b3b8 <__sfp+0x14>
 800b3b4:	f7ff ffcc 	bl	800b350 <global_stdio_init.part.0>
 800b3b8:	4e22      	ldr	r6, [pc, #136]	; (800b444 <__sfp+0xa0>)
 800b3ba:	f04f 0804 	mov.w	r8, #4
 800b3be:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	d50f      	bpl.n	800b3e6 <__sfp+0x42>
 800b3c6:	6835      	ldr	r5, [r6, #0]
 800b3c8:	2d00      	cmp	r5, #0
 800b3ca:	d137      	bne.n	800b43c <__sfp+0x98>
 800b3cc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	f7ff fdc1 	bl	800af58 <_malloc_r>
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	bb30      	cbnz	r0, 800b428 <__sfp+0x84>
 800b3da:	6030      	str	r0, [r6, #0]
 800b3dc:	f7ff ffdc 	bl	800b398 <__sfp_lock_release>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	e01b      	b.n	800b41e <__sfp+0x7a>
 800b3e6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3ea:	b9dd      	cbnz	r5, 800b424 <__sfp+0x80>
 800b3ec:	4b16      	ldr	r3, [pc, #88]	; (800b448 <__sfp+0xa4>)
 800b3ee:	60e3      	str	r3, [r4, #12]
 800b3f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3f4:	6665      	str	r5, [r4, #100]	; 0x64
 800b3f6:	f000 fb4b 	bl	800ba90 <__retarget_lock_init_recursive>
 800b3fa:	f7ff ffcd 	bl	800b398 <__sfp_lock_release>
 800b3fe:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b402:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b406:	6025      	str	r5, [r4, #0]
 800b408:	61a5      	str	r5, [r4, #24]
 800b40a:	2208      	movs	r2, #8
 800b40c:	4629      	mov	r1, r5
 800b40e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b412:	f000 faa3 	bl	800b95c <memset>
 800b416:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b41a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b41e:	4620      	mov	r0, r4
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	3468      	adds	r4, #104	; 0x68
 800b426:	e7cc      	b.n	800b3c2 <__sfp+0x1e>
 800b428:	e9c0 5800 	strd	r5, r8, [r0]
 800b42c:	300c      	adds	r0, #12
 800b42e:	60a0      	str	r0, [r4, #8]
 800b430:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800b434:	4629      	mov	r1, r5
 800b436:	f000 fa91 	bl	800b95c <memset>
 800b43a:	6034      	str	r4, [r6, #0]
 800b43c:	6836      	ldr	r6, [r6, #0]
 800b43e:	e7be      	b.n	800b3be <__sfp+0x1a>
 800b440:	20000274 	.word	0x20000274
 800b444:	2000000c 	.word	0x2000000c
 800b448:	ffff0001 	.word	0xffff0001

0800b44c <__sinit>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4604      	mov	r4, r0
 800b450:	f7ff ff9c 	bl	800b38c <__sfp_lock_acquire>
 800b454:	6a23      	ldr	r3, [r4, #32]
 800b456:	b11b      	cbz	r3, 800b460 <__sinit+0x14>
 800b458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b45c:	f7ff bf9c 	b.w	800b398 <__sfp_lock_release>
 800b460:	4b04      	ldr	r3, [pc, #16]	; (800b474 <__sinit+0x28>)
 800b462:	6223      	str	r3, [r4, #32]
 800b464:	4b04      	ldr	r3, [pc, #16]	; (800b478 <__sinit+0x2c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1f5      	bne.n	800b458 <__sinit+0xc>
 800b46c:	f7ff ff70 	bl	800b350 <global_stdio_init.part.0>
 800b470:	e7f2      	b.n	800b458 <__sinit+0xc>
 800b472:	bf00      	nop
 800b474:	0800b311 	.word	0x0800b311
 800b478:	20000274 	.word	0x20000274

0800b47c <_fopen_r>:
 800b47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b47e:	460f      	mov	r7, r1
 800b480:	4611      	mov	r1, r2
 800b482:	aa01      	add	r2, sp, #4
 800b484:	4605      	mov	r5, r0
 800b486:	f000 fe35 	bl	800c0f4 <__sflags>
 800b48a:	4606      	mov	r6, r0
 800b48c:	b918      	cbnz	r0, 800b496 <_fopen_r+0x1a>
 800b48e:	2400      	movs	r4, #0
 800b490:	4620      	mov	r0, r4
 800b492:	b003      	add	sp, #12
 800b494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b496:	4628      	mov	r0, r5
 800b498:	f7ff ff84 	bl	800b3a4 <__sfp>
 800b49c:	4604      	mov	r4, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d0f5      	beq.n	800b48e <_fopen_r+0x12>
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	9a01      	ldr	r2, [sp, #4]
 800b4a6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f000 fa80 	bl	800b9b0 <_open_r>
 800b4b0:	1e07      	subs	r7, r0, #0
 800b4b2:	da09      	bge.n	800b4c8 <_fopen_r+0x4c>
 800b4b4:	2500      	movs	r5, #0
 800b4b6:	f7ff ff69 	bl	800b38c <__sfp_lock_acquire>
 800b4ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4bc:	81a5      	strh	r5, [r4, #12]
 800b4be:	f000 fae8 	bl	800ba92 <__retarget_lock_close_recursive>
 800b4c2:	f7ff ff69 	bl	800b398 <__sfp_lock_release>
 800b4c6:	e7e2      	b.n	800b48e <_fopen_r+0x12>
 800b4c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4ca:	07db      	lsls	r3, r3, #31
 800b4cc:	d405      	bmi.n	800b4da <_fopen_r+0x5e>
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	0598      	lsls	r0, r3, #22
 800b4d2:	d402      	bmi.n	800b4da <_fopen_r+0x5e>
 800b4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4d6:	f000 fadd 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b4da:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <_fopen_r+0x98>)
 800b4dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b4de:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <_fopen_r+0x9c>)
 800b4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4e2:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <_fopen_r+0xa0>)
 800b4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4e6:	05f1      	lsls	r1, r6, #23
 800b4e8:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <_fopen_r+0xa4>)
 800b4ea:	81e7      	strh	r7, [r4, #14]
 800b4ec:	81a6      	strh	r6, [r4, #12]
 800b4ee:	6224      	str	r4, [r4, #32]
 800b4f0:	6323      	str	r3, [r4, #48]	; 0x30
 800b4f2:	d505      	bpl.n	800b500 <_fopen_r+0x84>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f81a 	bl	800b534 <_fseek_r>
 800b500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b502:	07da      	lsls	r2, r3, #31
 800b504:	d4c4      	bmi.n	800b490 <_fopen_r+0x14>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	059b      	lsls	r3, r3, #22
 800b50a:	d4c1      	bmi.n	800b490 <_fopen_r+0x14>
 800b50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50e:	f000 fac2 	bl	800ba96 <__retarget_lock_release_recursive>
 800b512:	e7bd      	b.n	800b490 <_fopen_r+0x14>
 800b514:	0800b64d 	.word	0x0800b64d
 800b518:	0800b66f 	.word	0x0800b66f
 800b51c:	0800b6a7 	.word	0x0800b6a7
 800b520:	0800b6cb 	.word	0x0800b6cb

0800b524 <fopen>:
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <fopen+0xc>)
 800b526:	460a      	mov	r2, r1
 800b528:	4601      	mov	r1, r0
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	f7ff bfa6 	b.w	800b47c <_fopen_r>
 800b530:	20000064 	.word	0x20000064

0800b534 <_fseek_r>:
 800b534:	f000 b962 	b.w	800b7fc <_fseeko_r>

0800b538 <_fwalk_sglue>:
 800b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	4607      	mov	r7, r0
 800b53e:	4688      	mov	r8, r1
 800b540:	4614      	mov	r4, r2
 800b542:	2600      	movs	r6, #0
 800b544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b548:	f1b9 0901 	subs.w	r9, r9, #1
 800b54c:	d505      	bpl.n	800b55a <_fwalk_sglue+0x22>
 800b54e:	6824      	ldr	r4, [r4, #0]
 800b550:	2c00      	cmp	r4, #0
 800b552:	d1f7      	bne.n	800b544 <_fwalk_sglue+0xc>
 800b554:	4630      	mov	r0, r6
 800b556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55a:	89ab      	ldrh	r3, [r5, #12]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d907      	bls.n	800b570 <_fwalk_sglue+0x38>
 800b560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b564:	3301      	adds	r3, #1
 800b566:	d003      	beq.n	800b570 <_fwalk_sglue+0x38>
 800b568:	4629      	mov	r1, r5
 800b56a:	4638      	mov	r0, r7
 800b56c:	47c0      	blx	r8
 800b56e:	4306      	orrs	r6, r0
 800b570:	3568      	adds	r5, #104	; 0x68
 800b572:	e7e9      	b.n	800b548 <_fwalk_sglue+0x10>

0800b574 <_fwrite_r>:
 800b574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b578:	9c08      	ldr	r4, [sp, #32]
 800b57a:	468a      	mov	sl, r1
 800b57c:	4690      	mov	r8, r2
 800b57e:	fb02 f903 	mul.w	r9, r2, r3
 800b582:	4606      	mov	r6, r0
 800b584:	b118      	cbz	r0, 800b58e <_fwrite_r+0x1a>
 800b586:	6a03      	ldr	r3, [r0, #32]
 800b588:	b90b      	cbnz	r3, 800b58e <_fwrite_r+0x1a>
 800b58a:	f7ff ff5f 	bl	800b44c <__sinit>
 800b58e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b590:	07dd      	lsls	r5, r3, #31
 800b592:	d405      	bmi.n	800b5a0 <_fwrite_r+0x2c>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	0598      	lsls	r0, r3, #22
 800b598:	d402      	bmi.n	800b5a0 <_fwrite_r+0x2c>
 800b59a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b59c:	f000 fa7a 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	0719      	lsls	r1, r3, #28
 800b5a4:	d516      	bpl.n	800b5d4 <_fwrite_r+0x60>
 800b5a6:	6923      	ldr	r3, [r4, #16]
 800b5a8:	b1a3      	cbz	r3, 800b5d4 <_fwrite_r+0x60>
 800b5aa:	2500      	movs	r5, #0
 800b5ac:	454d      	cmp	r5, r9
 800b5ae:	d01f      	beq.n	800b5f0 <_fwrite_r+0x7c>
 800b5b0:	68a7      	ldr	r7, [r4, #8]
 800b5b2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800b5b6:	3f01      	subs	r7, #1
 800b5b8:	2f00      	cmp	r7, #0
 800b5ba:	60a7      	str	r7, [r4, #8]
 800b5bc:	da04      	bge.n	800b5c8 <_fwrite_r+0x54>
 800b5be:	69a3      	ldr	r3, [r4, #24]
 800b5c0:	429f      	cmp	r7, r3
 800b5c2:	db0f      	blt.n	800b5e4 <_fwrite_r+0x70>
 800b5c4:	290a      	cmp	r1, #10
 800b5c6:	d00d      	beq.n	800b5e4 <_fwrite_r+0x70>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	6022      	str	r2, [r4, #0]
 800b5ce:	7019      	strb	r1, [r3, #0]
 800b5d0:	3501      	adds	r5, #1
 800b5d2:	e7eb      	b.n	800b5ac <_fwrite_r+0x38>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f000 f8b8 	bl	800b74c <__swsetup_r>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d0e4      	beq.n	800b5aa <_fwrite_r+0x36>
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	e005      	b.n	800b5f0 <_fwrite_r+0x7c>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f000 f873 	bl	800b6d2 <__swbuf_r>
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	d1ef      	bne.n	800b5d0 <_fwrite_r+0x5c>
 800b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f2:	07da      	lsls	r2, r3, #31
 800b5f4:	d405      	bmi.n	800b602 <_fwrite_r+0x8e>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	059b      	lsls	r3, r3, #22
 800b5fa:	d402      	bmi.n	800b602 <_fwrite_r+0x8e>
 800b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fe:	f000 fa4a 	bl	800ba96 <__retarget_lock_release_recursive>
 800b602:	fbb5 f0f8 	udiv	r0, r5, r8
 800b606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b60c <fwrite>:
 800b60c:	b507      	push	{r0, r1, r2, lr}
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	4613      	mov	r3, r2
 800b612:	460a      	mov	r2, r1
 800b614:	4601      	mov	r1, r0
 800b616:	4803      	ldr	r0, [pc, #12]	; (800b624 <fwrite+0x18>)
 800b618:	6800      	ldr	r0, [r0, #0]
 800b61a:	f7ff ffab 	bl	800b574 <_fwrite_r>
 800b61e:	b003      	add	sp, #12
 800b620:	f85d fb04 	ldr.w	pc, [sp], #4
 800b624:	20000064 	.word	0x20000064

0800b628 <iprintf>:
 800b628:	b40f      	push	{r0, r1, r2, r3}
 800b62a:	b507      	push	{r0, r1, r2, lr}
 800b62c:	4906      	ldr	r1, [pc, #24]	; (800b648 <iprintf+0x20>)
 800b62e:	ab04      	add	r3, sp, #16
 800b630:	6808      	ldr	r0, [r1, #0]
 800b632:	f853 2b04 	ldr.w	r2, [r3], #4
 800b636:	6881      	ldr	r1, [r0, #8]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	f000 fab1 	bl	800bba0 <_vfiprintf_r>
 800b63e:	b003      	add	sp, #12
 800b640:	f85d eb04 	ldr.w	lr, [sp], #4
 800b644:	b004      	add	sp, #16
 800b646:	4770      	bx	lr
 800b648:	20000064 	.word	0x20000064

0800b64c <__sread>:
 800b64c:	b510      	push	{r4, lr}
 800b64e:	460c      	mov	r4, r1
 800b650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b654:	f000 f9be 	bl	800b9d4 <_read_r>
 800b658:	2800      	cmp	r0, #0
 800b65a:	bfab      	itete	ge
 800b65c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b65e:	89a3      	ldrhlt	r3, [r4, #12]
 800b660:	181b      	addge	r3, r3, r0
 800b662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b666:	bfac      	ite	ge
 800b668:	6563      	strge	r3, [r4, #84]	; 0x54
 800b66a:	81a3      	strhlt	r3, [r4, #12]
 800b66c:	bd10      	pop	{r4, pc}

0800b66e <__swrite>:
 800b66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b672:	461f      	mov	r7, r3
 800b674:	898b      	ldrh	r3, [r1, #12]
 800b676:	05db      	lsls	r3, r3, #23
 800b678:	4605      	mov	r5, r0
 800b67a:	460c      	mov	r4, r1
 800b67c:	4616      	mov	r6, r2
 800b67e:	d505      	bpl.n	800b68c <__swrite+0x1e>
 800b680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b684:	2302      	movs	r3, #2
 800b686:	2200      	movs	r2, #0
 800b688:	f000 f980 	bl	800b98c <_lseek_r>
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	4632      	mov	r2, r6
 800b69a:	463b      	mov	r3, r7
 800b69c:	4628      	mov	r0, r5
 800b69e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a2:	f000 b9b9 	b.w	800ba18 <_write_r>

0800b6a6 <__sseek>:
 800b6a6:	b510      	push	{r4, lr}
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ae:	f000 f96d 	bl	800b98c <_lseek_r>
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	bf15      	itete	ne
 800b6b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6c2:	81a3      	strheq	r3, [r4, #12]
 800b6c4:	bf18      	it	ne
 800b6c6:	81a3      	strhne	r3, [r4, #12]
 800b6c8:	bd10      	pop	{r4, pc}

0800b6ca <__sclose>:
 800b6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ce:	f000 b94d 	b.w	800b96c <_close_r>

0800b6d2 <__swbuf_r>:
 800b6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d4:	460e      	mov	r6, r1
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	4605      	mov	r5, r0
 800b6da:	b118      	cbz	r0, 800b6e4 <__swbuf_r+0x12>
 800b6dc:	6a03      	ldr	r3, [r0, #32]
 800b6de:	b90b      	cbnz	r3, 800b6e4 <__swbuf_r+0x12>
 800b6e0:	f7ff feb4 	bl	800b44c <__sinit>
 800b6e4:	69a3      	ldr	r3, [r4, #24]
 800b6e6:	60a3      	str	r3, [r4, #8]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	071a      	lsls	r2, r3, #28
 800b6ec:	d525      	bpl.n	800b73a <__swbuf_r+0x68>
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	b31b      	cbz	r3, 800b73a <__swbuf_r+0x68>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	6922      	ldr	r2, [r4, #16]
 800b6f6:	1a98      	subs	r0, r3, r2
 800b6f8:	6963      	ldr	r3, [r4, #20]
 800b6fa:	b2f6      	uxtb	r6, r6
 800b6fc:	4283      	cmp	r3, r0
 800b6fe:	4637      	mov	r7, r6
 800b700:	dc04      	bgt.n	800b70c <__swbuf_r+0x3a>
 800b702:	4621      	mov	r1, r4
 800b704:	4628      	mov	r0, r5
 800b706:	f7ff fd99 	bl	800b23c <_fflush_r>
 800b70a:	b9e0      	cbnz	r0, 800b746 <__swbuf_r+0x74>
 800b70c:	68a3      	ldr	r3, [r4, #8]
 800b70e:	3b01      	subs	r3, #1
 800b710:	60a3      	str	r3, [r4, #8]
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	6022      	str	r2, [r4, #0]
 800b718:	701e      	strb	r6, [r3, #0]
 800b71a:	6962      	ldr	r2, [r4, #20]
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	429a      	cmp	r2, r3
 800b720:	d004      	beq.n	800b72c <__swbuf_r+0x5a>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	07db      	lsls	r3, r3, #31
 800b726:	d506      	bpl.n	800b736 <__swbuf_r+0x64>
 800b728:	2e0a      	cmp	r6, #10
 800b72a:	d104      	bne.n	800b736 <__swbuf_r+0x64>
 800b72c:	4621      	mov	r1, r4
 800b72e:	4628      	mov	r0, r5
 800b730:	f7ff fd84 	bl	800b23c <_fflush_r>
 800b734:	b938      	cbnz	r0, 800b746 <__swbuf_r+0x74>
 800b736:	4638      	mov	r0, r7
 800b738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73a:	4621      	mov	r1, r4
 800b73c:	4628      	mov	r0, r5
 800b73e:	f000 f805 	bl	800b74c <__swsetup_r>
 800b742:	2800      	cmp	r0, #0
 800b744:	d0d5      	beq.n	800b6f2 <__swbuf_r+0x20>
 800b746:	f04f 37ff 	mov.w	r7, #4294967295
 800b74a:	e7f4      	b.n	800b736 <__swbuf_r+0x64>

0800b74c <__swsetup_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4b2a      	ldr	r3, [pc, #168]	; (800b7f8 <__swsetup_r+0xac>)
 800b750:	4605      	mov	r5, r0
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	460c      	mov	r4, r1
 800b756:	b118      	cbz	r0, 800b760 <__swsetup_r+0x14>
 800b758:	6a03      	ldr	r3, [r0, #32]
 800b75a:	b90b      	cbnz	r3, 800b760 <__swsetup_r+0x14>
 800b75c:	f7ff fe76 	bl	800b44c <__sinit>
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b766:	0718      	lsls	r0, r3, #28
 800b768:	d422      	bmi.n	800b7b0 <__swsetup_r+0x64>
 800b76a:	06d9      	lsls	r1, r3, #27
 800b76c:	d407      	bmi.n	800b77e <__swsetup_r+0x32>
 800b76e:	2309      	movs	r3, #9
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	f04f 30ff 	mov.w	r0, #4294967295
 800b77c:	e034      	b.n	800b7e8 <__swsetup_r+0x9c>
 800b77e:	0758      	lsls	r0, r3, #29
 800b780:	d512      	bpl.n	800b7a8 <__swsetup_r+0x5c>
 800b782:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b784:	b141      	cbz	r1, 800b798 <__swsetup_r+0x4c>
 800b786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b78a:	4299      	cmp	r1, r3
 800b78c:	d002      	beq.n	800b794 <__swsetup_r+0x48>
 800b78e:	4628      	mov	r0, r5
 800b790:	f000 f990 	bl	800bab4 <_free_r>
 800b794:	2300      	movs	r3, #0
 800b796:	6363      	str	r3, [r4, #52]	; 0x34
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	6063      	str	r3, [r4, #4]
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f043 0308 	orr.w	r3, r3, #8
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	b94b      	cbnz	r3, 800b7c8 <__swsetup_r+0x7c>
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7be:	d003      	beq.n	800b7c8 <__swsetup_r+0x7c>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f000 fcf2 	bl	800c1ac <__smakebuf_r>
 800b7c8:	89a0      	ldrh	r0, [r4, #12]
 800b7ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ce:	f010 0301 	ands.w	r3, r0, #1
 800b7d2:	d00a      	beq.n	800b7ea <__swsetup_r+0x9e>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60a3      	str	r3, [r4, #8]
 800b7d8:	6963      	ldr	r3, [r4, #20]
 800b7da:	425b      	negs	r3, r3
 800b7dc:	61a3      	str	r3, [r4, #24]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	b943      	cbnz	r3, 800b7f4 <__swsetup_r+0xa8>
 800b7e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7e6:	d1c4      	bne.n	800b772 <__swsetup_r+0x26>
 800b7e8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ea:	0781      	lsls	r1, r0, #30
 800b7ec:	bf58      	it	pl
 800b7ee:	6963      	ldrpl	r3, [r4, #20]
 800b7f0:	60a3      	str	r3, [r4, #8]
 800b7f2:	e7f4      	b.n	800b7de <__swsetup_r+0x92>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7f7      	b.n	800b7e8 <__swsetup_r+0x9c>
 800b7f8:	20000064 	.word	0x20000064

0800b7fc <_fseeko_r>:
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	4617      	mov	r7, r2
 800b804:	461d      	mov	r5, r3
 800b806:	4606      	mov	r6, r0
 800b808:	b118      	cbz	r0, 800b812 <_fseeko_r+0x16>
 800b80a:	6a03      	ldr	r3, [r0, #32]
 800b80c:	b90b      	cbnz	r3, 800b812 <_fseeko_r+0x16>
 800b80e:	f7ff fe1d 	bl	800b44c <__sinit>
 800b812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b814:	07d9      	lsls	r1, r3, #31
 800b816:	d405      	bmi.n	800b824 <_fseeko_r+0x28>
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	059a      	lsls	r2, r3, #22
 800b81c:	d402      	bmi.n	800b824 <_fseeko_r+0x28>
 800b81e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b820:	f000 f938 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800b82a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800b82e:	d103      	bne.n	800b838 <_fseeko_r+0x3c>
 800b830:	4621      	mov	r1, r4
 800b832:	4630      	mov	r0, r6
 800b834:	f7ff fd02 	bl	800b23c <_fflush_r>
 800b838:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800b83c:	f1b8 0f00 	cmp.w	r8, #0
 800b840:	d109      	bne.n	800b856 <_fseeko_r+0x5a>
 800b842:	231d      	movs	r3, #29
 800b844:	6033      	str	r3, [r6, #0]
 800b846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b848:	07d9      	lsls	r1, r3, #31
 800b84a:	d56e      	bpl.n	800b92a <_fseeko_r+0x12e>
 800b84c:	f04f 35ff 	mov.w	r5, #4294967295
 800b850:	4628      	mov	r0, r5
 800b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b856:	2d01      	cmp	r5, #1
 800b858:	d036      	beq.n	800b8c8 <_fseeko_r+0xcc>
 800b85a:	f035 0302 	bics.w	r3, r5, #2
 800b85e:	d162      	bne.n	800b926 <_fseeko_r+0x12a>
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	b91b      	cbnz	r3, 800b86c <_fseeko_r+0x70>
 800b864:	4621      	mov	r1, r4
 800b866:	4630      	mov	r0, r6
 800b868:	f000 fca0 	bl	800c1ac <__smakebuf_r>
 800b86c:	4621      	mov	r1, r4
 800b86e:	4630      	mov	r0, r6
 800b870:	f7ff fce4 	bl	800b23c <_fflush_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	d1e6      	bne.n	800b846 <_fseeko_r+0x4a>
 800b878:	6a21      	ldr	r1, [r4, #32]
 800b87a:	462b      	mov	r3, r5
 800b87c:	463a      	mov	r2, r7
 800b87e:	4630      	mov	r0, r6
 800b880:	47c0      	blx	r8
 800b882:	3001      	adds	r0, #1
 800b884:	d0df      	beq.n	800b846 <_fseeko_r+0x4a>
 800b886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b888:	b141      	cbz	r1, 800b89c <_fseeko_r+0xa0>
 800b88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b88e:	4299      	cmp	r1, r3
 800b890:	d002      	beq.n	800b898 <_fseeko_r+0x9c>
 800b892:	4630      	mov	r0, r6
 800b894:	f000 f90e 	bl	800bab4 <_free_r>
 800b898:	2300      	movs	r3, #0
 800b89a:	6363      	str	r3, [r4, #52]	; 0x34
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	2600      	movs	r6, #0
 800b8a4:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800b8a8:	6066      	str	r6, [r4, #4]
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	2208      	movs	r2, #8
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8b4:	f000 f852 	bl	800b95c <memset>
 800b8b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b8ba:	f015 0501 	ands.w	r5, r5, #1
 800b8be:	d13b      	bne.n	800b938 <_fseeko_r+0x13c>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	059b      	lsls	r3, r3, #22
 800b8c4:	d4c4      	bmi.n	800b850 <_fseeko_r+0x54>
 800b8c6:	e021      	b.n	800b90c <_fseeko_r+0x110>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7ff fcb6 	bl	800b23c <_fflush_r>
 800b8d0:	89a2      	ldrh	r2, [r4, #12]
 800b8d2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8d6:	d00c      	beq.n	800b8f2 <_fseeko_r+0xf6>
 800b8d8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	075a      	lsls	r2, r3, #29
 800b8de:	d519      	bpl.n	800b914 <_fseeko_r+0x118>
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	1aed      	subs	r5, r5, r3
 800b8e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8e6:	b10b      	cbz	r3, 800b8ec <_fseeko_r+0xf0>
 800b8e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8ea:	1aed      	subs	r5, r5, r3
 800b8ec:	442f      	add	r7, r5
 800b8ee:	2500      	movs	r5, #0
 800b8f0:	e7b6      	b.n	800b860 <_fseeko_r+0x64>
 800b8f2:	462b      	mov	r3, r5
 800b8f4:	6a21      	ldr	r1, [r4, #32]
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	47c0      	blx	r8
 800b8fa:	1c43      	adds	r3, r0, #1
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	d1ec      	bne.n	800b8da <_fseeko_r+0xde>
 800b900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b902:	07d8      	lsls	r0, r3, #31
 800b904:	d4a2      	bmi.n	800b84c <_fseeko_r+0x50>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	0599      	lsls	r1, r3, #22
 800b90a:	d49f      	bmi.n	800b84c <_fseeko_r+0x50>
 800b90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b90e:	f000 f8c2 	bl	800ba96 <__retarget_lock_release_recursive>
 800b912:	e79d      	b.n	800b850 <_fseeko_r+0x54>
 800b914:	0718      	lsls	r0, r3, #28
 800b916:	d5e9      	bpl.n	800b8ec <_fseeko_r+0xf0>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0e6      	beq.n	800b8ec <_fseeko_r+0xf0>
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	1a9b      	subs	r3, r3, r2
 800b922:	441d      	add	r5, r3
 800b924:	e7e2      	b.n	800b8ec <_fseeko_r+0xf0>
 800b926:	2316      	movs	r3, #22
 800b928:	e78c      	b.n	800b844 <_fseeko_r+0x48>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d48d      	bmi.n	800b84c <_fseeko_r+0x50>
 800b930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b932:	f000 f8b0 	bl	800ba96 <__retarget_lock_release_recursive>
 800b936:	e789      	b.n	800b84c <_fseeko_r+0x50>
 800b938:	4635      	mov	r5, r6
 800b93a:	e789      	b.n	800b850 <_fseeko_r+0x54>

0800b93c <memcmp>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	3901      	subs	r1, #1
 800b940:	4402      	add	r2, r0
 800b942:	4290      	cmp	r0, r2
 800b944:	d101      	bne.n	800b94a <memcmp+0xe>
 800b946:	2000      	movs	r0, #0
 800b948:	e005      	b.n	800b956 <memcmp+0x1a>
 800b94a:	7803      	ldrb	r3, [r0, #0]
 800b94c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b950:	42a3      	cmp	r3, r4
 800b952:	d001      	beq.n	800b958 <memcmp+0x1c>
 800b954:	1b18      	subs	r0, r3, r4
 800b956:	bd10      	pop	{r4, pc}
 800b958:	3001      	adds	r0, #1
 800b95a:	e7f2      	b.n	800b942 <memcmp+0x6>

0800b95c <memset>:
 800b95c:	4402      	add	r2, r0
 800b95e:	4603      	mov	r3, r0
 800b960:	4293      	cmp	r3, r2
 800b962:	d100      	bne.n	800b966 <memset+0xa>
 800b964:	4770      	bx	lr
 800b966:	f803 1b01 	strb.w	r1, [r3], #1
 800b96a:	e7f9      	b.n	800b960 <memset+0x4>

0800b96c <_close_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	; (800b988 <_close_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f5 fa0d 	bl	8000d96 <_close>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_close_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_close_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20000278 	.word	0x20000278

0800b98c <_lseek_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	; (800b9ac <_lseek_r+0x20>)
 800b990:	4604      	mov	r4, r0
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f5 fa22 	bl	8000de4 <_lseek>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_lseek_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_lseek_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20000278 	.word	0x20000278

0800b9b0 <_open_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	; (800b9d0 <_open_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f5 fa1d 	bl	8000dfe <_open>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_open_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_open_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	20000278 	.word	0x20000278

0800b9d4 <_read_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	; (800b9f4 <_read_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f5 f99e 	bl	8000d24 <_read>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_read_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_read_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	20000278 	.word	0x20000278

0800b9f8 <_sbrk_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d06      	ldr	r5, [pc, #24]	; (800ba14 <_sbrk_r+0x1c>)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4608      	mov	r0, r1
 800ba02:	602b      	str	r3, [r5, #0]
 800ba04:	f7f5 fa0a 	bl	8000e1c <_sbrk>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_sbrk_r+0x1a>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_sbrk_r+0x1a>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20000278 	.word	0x20000278

0800ba18 <_write_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4d07      	ldr	r5, [pc, #28]	; (800ba38 <_write_r+0x20>)
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	4608      	mov	r0, r1
 800ba20:	4611      	mov	r1, r2
 800ba22:	2200      	movs	r2, #0
 800ba24:	602a      	str	r2, [r5, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f7f5 f999 	bl	8000d5e <_write>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_write_r+0x1e>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_write_r+0x1e>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	20000278 	.word	0x20000278

0800ba3c <__errno>:
 800ba3c:	4b01      	ldr	r3, [pc, #4]	; (800ba44 <__errno+0x8>)
 800ba3e:	6818      	ldr	r0, [r3, #0]
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20000064 	.word	0x20000064

0800ba48 <__libc_init_array>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	4d0d      	ldr	r5, [pc, #52]	; (800ba80 <__libc_init_array+0x38>)
 800ba4c:	4c0d      	ldr	r4, [pc, #52]	; (800ba84 <__libc_init_array+0x3c>)
 800ba4e:	1b64      	subs	r4, r4, r5
 800ba50:	10a4      	asrs	r4, r4, #2
 800ba52:	2600      	movs	r6, #0
 800ba54:	42a6      	cmp	r6, r4
 800ba56:	d109      	bne.n	800ba6c <__libc_init_array+0x24>
 800ba58:	4d0b      	ldr	r5, [pc, #44]	; (800ba88 <__libc_init_array+0x40>)
 800ba5a:	4c0c      	ldr	r4, [pc, #48]	; (800ba8c <__libc_init_array+0x44>)
 800ba5c:	f000 fc04 	bl	800c268 <_init>
 800ba60:	1b64      	subs	r4, r4, r5
 800ba62:	10a4      	asrs	r4, r4, #2
 800ba64:	2600      	movs	r6, #0
 800ba66:	42a6      	cmp	r6, r4
 800ba68:	d105      	bne.n	800ba76 <__libc_init_array+0x2e>
 800ba6a:	bd70      	pop	{r4, r5, r6, pc}
 800ba6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba70:	4798      	blx	r3
 800ba72:	3601      	adds	r6, #1
 800ba74:	e7ee      	b.n	800ba54 <__libc_init_array+0xc>
 800ba76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7a:	4798      	blx	r3
 800ba7c:	3601      	adds	r6, #1
 800ba7e:	e7f2      	b.n	800ba66 <__libc_init_array+0x1e>
 800ba80:	0800cc3c 	.word	0x0800cc3c
 800ba84:	0800cc3c 	.word	0x0800cc3c
 800ba88:	0800cc3c 	.word	0x0800cc3c
 800ba8c:	0800cc40 	.word	0x0800cc40

0800ba90 <__retarget_lock_init_recursive>:
 800ba90:	4770      	bx	lr

0800ba92 <__retarget_lock_close_recursive>:
 800ba92:	4770      	bx	lr

0800ba94 <__retarget_lock_acquire_recursive>:
 800ba94:	4770      	bx	lr

0800ba96 <__retarget_lock_release_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <memcpy>:
 800ba98:	440a      	add	r2, r1
 800ba9a:	4291      	cmp	r1, r2
 800ba9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800baa0:	d100      	bne.n	800baa4 <memcpy+0xc>
 800baa2:	4770      	bx	lr
 800baa4:	b510      	push	{r4, lr}
 800baa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baae:	4291      	cmp	r1, r2
 800bab0:	d1f9      	bne.n	800baa6 <memcpy+0xe>
 800bab2:	bd10      	pop	{r4, pc}

0800bab4 <_free_r>:
 800bab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bab6:	2900      	cmp	r1, #0
 800bab8:	d044      	beq.n	800bb44 <_free_r+0x90>
 800baba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800babe:	9001      	str	r0, [sp, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f1a1 0404 	sub.w	r4, r1, #4
 800bac6:	bfb8      	it	lt
 800bac8:	18e4      	addlt	r4, r4, r3
 800baca:	f7ff fac5 	bl	800b058 <__malloc_lock>
 800bace:	4a1e      	ldr	r2, [pc, #120]	; (800bb48 <_free_r+0x94>)
 800bad0:	9801      	ldr	r0, [sp, #4]
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	b933      	cbnz	r3, 800bae4 <_free_r+0x30>
 800bad6:	6063      	str	r3, [r4, #4]
 800bad8:	6014      	str	r4, [r2, #0]
 800bada:	b003      	add	sp, #12
 800badc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bae0:	f7ff bac0 	b.w	800b064 <__malloc_unlock>
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d908      	bls.n	800bafa <_free_r+0x46>
 800bae8:	6825      	ldr	r5, [r4, #0]
 800baea:	1961      	adds	r1, r4, r5
 800baec:	428b      	cmp	r3, r1
 800baee:	bf01      	itttt	eq
 800baf0:	6819      	ldreq	r1, [r3, #0]
 800baf2:	685b      	ldreq	r3, [r3, #4]
 800baf4:	1949      	addeq	r1, r1, r5
 800baf6:	6021      	streq	r1, [r4, #0]
 800baf8:	e7ed      	b.n	800bad6 <_free_r+0x22>
 800bafa:	461a      	mov	r2, r3
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	b10b      	cbz	r3, 800bb04 <_free_r+0x50>
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	d9fa      	bls.n	800bafa <_free_r+0x46>
 800bb04:	6811      	ldr	r1, [r2, #0]
 800bb06:	1855      	adds	r5, r2, r1
 800bb08:	42a5      	cmp	r5, r4
 800bb0a:	d10b      	bne.n	800bb24 <_free_r+0x70>
 800bb0c:	6824      	ldr	r4, [r4, #0]
 800bb0e:	4421      	add	r1, r4
 800bb10:	1854      	adds	r4, r2, r1
 800bb12:	42a3      	cmp	r3, r4
 800bb14:	6011      	str	r1, [r2, #0]
 800bb16:	d1e0      	bne.n	800bada <_free_r+0x26>
 800bb18:	681c      	ldr	r4, [r3, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	6053      	str	r3, [r2, #4]
 800bb1e:	440c      	add	r4, r1
 800bb20:	6014      	str	r4, [r2, #0]
 800bb22:	e7da      	b.n	800bada <_free_r+0x26>
 800bb24:	d902      	bls.n	800bb2c <_free_r+0x78>
 800bb26:	230c      	movs	r3, #12
 800bb28:	6003      	str	r3, [r0, #0]
 800bb2a:	e7d6      	b.n	800bada <_free_r+0x26>
 800bb2c:	6825      	ldr	r5, [r4, #0]
 800bb2e:	1961      	adds	r1, r4, r5
 800bb30:	428b      	cmp	r3, r1
 800bb32:	bf04      	itt	eq
 800bb34:	6819      	ldreq	r1, [r3, #0]
 800bb36:	685b      	ldreq	r3, [r3, #4]
 800bb38:	6063      	str	r3, [r4, #4]
 800bb3a:	bf04      	itt	eq
 800bb3c:	1949      	addeq	r1, r1, r5
 800bb3e:	6021      	streq	r1, [r4, #0]
 800bb40:	6054      	str	r4, [r2, #4]
 800bb42:	e7ca      	b.n	800bada <_free_r+0x26>
 800bb44:	b003      	add	sp, #12
 800bb46:	bd30      	pop	{r4, r5, pc}
 800bb48:	20000134 	.word	0x20000134

0800bb4c <__sfputc_r>:
 800bb4c:	6893      	ldr	r3, [r2, #8]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	b410      	push	{r4}
 800bb54:	6093      	str	r3, [r2, #8]
 800bb56:	da08      	bge.n	800bb6a <__sfputc_r+0x1e>
 800bb58:	6994      	ldr	r4, [r2, #24]
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	db01      	blt.n	800bb62 <__sfputc_r+0x16>
 800bb5e:	290a      	cmp	r1, #10
 800bb60:	d103      	bne.n	800bb6a <__sfputc_r+0x1e>
 800bb62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb66:	f7ff bdb4 	b.w	800b6d2 <__swbuf_r>
 800bb6a:	6813      	ldr	r3, [r2, #0]
 800bb6c:	1c58      	adds	r0, r3, #1
 800bb6e:	6010      	str	r0, [r2, #0]
 800bb70:	7019      	strb	r1, [r3, #0]
 800bb72:	4608      	mov	r0, r1
 800bb74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <__sfputs_r>:
 800bb7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	4614      	mov	r4, r2
 800bb82:	18d5      	adds	r5, r2, r3
 800bb84:	42ac      	cmp	r4, r5
 800bb86:	d101      	bne.n	800bb8c <__sfputs_r+0x12>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	e007      	b.n	800bb9c <__sfputs_r+0x22>
 800bb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb90:	463a      	mov	r2, r7
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ffda 	bl	800bb4c <__sfputc_r>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d1f3      	bne.n	800bb84 <__sfputs_r+0xa>
 800bb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bba0 <_vfiprintf_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	460d      	mov	r5, r1
 800bba6:	b09d      	sub	sp, #116	; 0x74
 800bba8:	4614      	mov	r4, r2
 800bbaa:	4698      	mov	r8, r3
 800bbac:	4606      	mov	r6, r0
 800bbae:	b118      	cbz	r0, 800bbb8 <_vfiprintf_r+0x18>
 800bbb0:	6a03      	ldr	r3, [r0, #32]
 800bbb2:	b90b      	cbnz	r3, 800bbb8 <_vfiprintf_r+0x18>
 800bbb4:	f7ff fc4a 	bl	800b44c <__sinit>
 800bbb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbba:	07d9      	lsls	r1, r3, #31
 800bbbc:	d405      	bmi.n	800bbca <_vfiprintf_r+0x2a>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	059a      	lsls	r2, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_vfiprintf_r+0x2a>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbc6:	f7ff ff65 	bl	800ba94 <__retarget_lock_acquire_recursive>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	071b      	lsls	r3, r3, #28
 800bbce:	d501      	bpl.n	800bbd4 <_vfiprintf_r+0x34>
 800bbd0:	692b      	ldr	r3, [r5, #16]
 800bbd2:	b99b      	cbnz	r3, 800bbfc <_vfiprintf_r+0x5c>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f7ff fdb8 	bl	800b74c <__swsetup_r>
 800bbdc:	b170      	cbz	r0, 800bbfc <_vfiprintf_r+0x5c>
 800bbde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe0:	07dc      	lsls	r4, r3, #31
 800bbe2:	d504      	bpl.n	800bbee <_vfiprintf_r+0x4e>
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	b01d      	add	sp, #116	; 0x74
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	0598      	lsls	r0, r3, #22
 800bbf2:	d4f7      	bmi.n	800bbe4 <_vfiprintf_r+0x44>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf6:	f7ff ff4e 	bl	800ba96 <__retarget_lock_release_recursive>
 800bbfa:	e7f3      	b.n	800bbe4 <_vfiprintf_r+0x44>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bc00:	2320      	movs	r3, #32
 800bc02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0a:	2330      	movs	r3, #48	; 0x30
 800bc0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bdc0 <_vfiprintf_r+0x220>
 800bc10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc14:	f04f 0901 	mov.w	r9, #1
 800bc18:	4623      	mov	r3, r4
 800bc1a:	469a      	mov	sl, r3
 800bc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc20:	b10a      	cbz	r2, 800bc26 <_vfiprintf_r+0x86>
 800bc22:	2a25      	cmp	r2, #37	; 0x25
 800bc24:	d1f9      	bne.n	800bc1a <_vfiprintf_r+0x7a>
 800bc26:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2a:	d00b      	beq.n	800bc44 <_vfiprintf_r+0xa4>
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ffa1 	bl	800bb7a <__sfputs_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f000 80a9 	beq.w	800bd90 <_vfiprintf_r+0x1f0>
 800bc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc40:	445a      	add	r2, fp
 800bc42:	9209      	str	r2, [sp, #36]	; 0x24
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80a1 	beq.w	800bd90 <_vfiprintf_r+0x1f0>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 32ff 	mov.w	r2, #4294967295
 800bc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc58:	f10a 0a01 	add.w	sl, sl, #1
 800bc5c:	9304      	str	r3, [sp, #16]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc64:	931a      	str	r3, [sp, #104]	; 0x68
 800bc66:	4654      	mov	r4, sl
 800bc68:	2205      	movs	r2, #5
 800bc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6e:	4854      	ldr	r0, [pc, #336]	; (800bdc0 <_vfiprintf_r+0x220>)
 800bc70:	f7f4 fab6 	bl	80001e0 <memchr>
 800bc74:	9a04      	ldr	r2, [sp, #16]
 800bc76:	b9d8      	cbnz	r0, 800bcb0 <_vfiprintf_r+0x110>
 800bc78:	06d1      	lsls	r1, r2, #27
 800bc7a:	bf44      	itt	mi
 800bc7c:	2320      	movmi	r3, #32
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc82:	0713      	lsls	r3, r2, #28
 800bc84:	bf44      	itt	mi
 800bc86:	232b      	movmi	r3, #43	; 0x2b
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc90:	2b2a      	cmp	r3, #42	; 0x2a
 800bc92:	d015      	beq.n	800bcc0 <_vfiprintf_r+0x120>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca4:	3b30      	subs	r3, #48	; 0x30
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d94d      	bls.n	800bd46 <_vfiprintf_r+0x1a6>
 800bcaa:	b1b0      	cbz	r0, 800bcda <_vfiprintf_r+0x13a>
 800bcac:	9207      	str	r2, [sp, #28]
 800bcae:	e014      	b.n	800bcda <_vfiprintf_r+0x13a>
 800bcb0:	eba0 0308 	sub.w	r3, r0, r8
 800bcb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	e7d2      	b.n	800bc66 <_vfiprintf_r+0xc6>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d19      	adds	r1, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	9103      	str	r1, [sp, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	bfbb      	ittet	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd2:	9307      	strge	r3, [sp, #28]
 800bcd4:	9307      	strlt	r3, [sp, #28]
 800bcd6:	bfb8      	it	lt
 800bcd8:	9204      	strlt	r2, [sp, #16]
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcde:	d10c      	bne.n	800bcfa <_vfiprintf_r+0x15a>
 800bce0:	7863      	ldrb	r3, [r4, #1]
 800bce2:	2b2a      	cmp	r3, #42	; 0x2a
 800bce4:	d134      	bne.n	800bd50 <_vfiprintf_r+0x1b0>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	1d1a      	adds	r2, r3, #4
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	9203      	str	r2, [sp, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bfb8      	it	lt
 800bcf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf6:	3402      	adds	r4, #2
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bdd0 <_vfiprintf_r+0x230>
 800bcfe:	7821      	ldrb	r1, [r4, #0]
 800bd00:	2203      	movs	r2, #3
 800bd02:	4650      	mov	r0, sl
 800bd04:	f7f4 fa6c 	bl	80001e0 <memchr>
 800bd08:	b138      	cbz	r0, 800bd1a <_vfiprintf_r+0x17a>
 800bd0a:	9b04      	ldr	r3, [sp, #16]
 800bd0c:	eba0 000a 	sub.w	r0, r0, sl
 800bd10:	2240      	movs	r2, #64	; 0x40
 800bd12:	4082      	lsls	r2, r0
 800bd14:	4313      	orrs	r3, r2
 800bd16:	3401      	adds	r4, #1
 800bd18:	9304      	str	r3, [sp, #16]
 800bd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1e:	4829      	ldr	r0, [pc, #164]	; (800bdc4 <_vfiprintf_r+0x224>)
 800bd20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd24:	2206      	movs	r2, #6
 800bd26:	f7f4 fa5b 	bl	80001e0 <memchr>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d03f      	beq.n	800bdae <_vfiprintf_r+0x20e>
 800bd2e:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <_vfiprintf_r+0x228>)
 800bd30:	bb1b      	cbnz	r3, 800bd7a <_vfiprintf_r+0x1da>
 800bd32:	9b03      	ldr	r3, [sp, #12]
 800bd34:	3307      	adds	r3, #7
 800bd36:	f023 0307 	bic.w	r3, r3, #7
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	9303      	str	r3, [sp, #12]
 800bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd40:	443b      	add	r3, r7
 800bd42:	9309      	str	r3, [sp, #36]	; 0x24
 800bd44:	e768      	b.n	800bc18 <_vfiprintf_r+0x78>
 800bd46:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	e7a6      	b.n	800bc9e <_vfiprintf_r+0xfe>
 800bd50:	2300      	movs	r3, #0
 800bd52:	3401      	adds	r4, #1
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	4619      	mov	r1, r3
 800bd58:	f04f 0c0a 	mov.w	ip, #10
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd62:	3a30      	subs	r2, #48	; 0x30
 800bd64:	2a09      	cmp	r2, #9
 800bd66:	d903      	bls.n	800bd70 <_vfiprintf_r+0x1d0>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0c6      	beq.n	800bcfa <_vfiprintf_r+0x15a>
 800bd6c:	9105      	str	r1, [sp, #20]
 800bd6e:	e7c4      	b.n	800bcfa <_vfiprintf_r+0x15a>
 800bd70:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd74:	4604      	mov	r4, r0
 800bd76:	2301      	movs	r3, #1
 800bd78:	e7f0      	b.n	800bd5c <_vfiprintf_r+0x1bc>
 800bd7a:	ab03      	add	r3, sp, #12
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <_vfiprintf_r+0x22c>)
 800bd82:	a904      	add	r1, sp, #16
 800bd84:	4630      	mov	r0, r6
 800bd86:	f3af 8000 	nop.w
 800bd8a:	4607      	mov	r7, r0
 800bd8c:	1c78      	adds	r0, r7, #1
 800bd8e:	d1d6      	bne.n	800bd3e <_vfiprintf_r+0x19e>
 800bd90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd92:	07d9      	lsls	r1, r3, #31
 800bd94:	d405      	bmi.n	800bda2 <_vfiprintf_r+0x202>
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	059a      	lsls	r2, r3, #22
 800bd9a:	d402      	bmi.n	800bda2 <_vfiprintf_r+0x202>
 800bd9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd9e:	f7ff fe7a 	bl	800ba96 <__retarget_lock_release_recursive>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	065b      	lsls	r3, r3, #25
 800bda6:	f53f af1d 	bmi.w	800bbe4 <_vfiprintf_r+0x44>
 800bdaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdac:	e71c      	b.n	800bbe8 <_vfiprintf_r+0x48>
 800bdae:	ab03      	add	r3, sp, #12
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <_vfiprintf_r+0x22c>)
 800bdb6:	a904      	add	r1, sp, #16
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f000 f879 	bl	800beb0 <_printf_i>
 800bdbe:	e7e4      	b.n	800bd8a <_vfiprintf_r+0x1ea>
 800bdc0:	0800cc00 	.word	0x0800cc00
 800bdc4:	0800cc0a 	.word	0x0800cc0a
 800bdc8:	00000000 	.word	0x00000000
 800bdcc:	0800bb7b 	.word	0x0800bb7b
 800bdd0:	0800cc06 	.word	0x0800cc06

0800bdd4 <_printf_common>:
 800bdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd8:	4616      	mov	r6, r2
 800bdda:	4699      	mov	r9, r3
 800bddc:	688a      	ldr	r2, [r1, #8]
 800bdde:	690b      	ldr	r3, [r1, #16]
 800bde0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bde4:	4293      	cmp	r3, r2
 800bde6:	bfb8      	it	lt
 800bde8:	4613      	movlt	r3, r2
 800bdea:	6033      	str	r3, [r6, #0]
 800bdec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	b10a      	cbz	r2, 800bdfa <_printf_common+0x26>
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	6033      	str	r3, [r6, #0]
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	0699      	lsls	r1, r3, #26
 800bdfe:	bf42      	ittt	mi
 800be00:	6833      	ldrmi	r3, [r6, #0]
 800be02:	3302      	addmi	r3, #2
 800be04:	6033      	strmi	r3, [r6, #0]
 800be06:	6825      	ldr	r5, [r4, #0]
 800be08:	f015 0506 	ands.w	r5, r5, #6
 800be0c:	d106      	bne.n	800be1c <_printf_common+0x48>
 800be0e:	f104 0a19 	add.w	sl, r4, #25
 800be12:	68e3      	ldr	r3, [r4, #12]
 800be14:	6832      	ldr	r2, [r6, #0]
 800be16:	1a9b      	subs	r3, r3, r2
 800be18:	42ab      	cmp	r3, r5
 800be1a:	dc26      	bgt.n	800be6a <_printf_common+0x96>
 800be1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be20:	1e13      	subs	r3, r2, #0
 800be22:	6822      	ldr	r2, [r4, #0]
 800be24:	bf18      	it	ne
 800be26:	2301      	movne	r3, #1
 800be28:	0692      	lsls	r2, r2, #26
 800be2a:	d42b      	bmi.n	800be84 <_printf_common+0xb0>
 800be2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be30:	4649      	mov	r1, r9
 800be32:	4638      	mov	r0, r7
 800be34:	47c0      	blx	r8
 800be36:	3001      	adds	r0, #1
 800be38:	d01e      	beq.n	800be78 <_printf_common+0xa4>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	6922      	ldr	r2, [r4, #16]
 800be3e:	f003 0306 	and.w	r3, r3, #6
 800be42:	2b04      	cmp	r3, #4
 800be44:	bf02      	ittt	eq
 800be46:	68e5      	ldreq	r5, [r4, #12]
 800be48:	6833      	ldreq	r3, [r6, #0]
 800be4a:	1aed      	subeq	r5, r5, r3
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	bf0c      	ite	eq
 800be50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be54:	2500      	movne	r5, #0
 800be56:	4293      	cmp	r3, r2
 800be58:	bfc4      	itt	gt
 800be5a:	1a9b      	subgt	r3, r3, r2
 800be5c:	18ed      	addgt	r5, r5, r3
 800be5e:	2600      	movs	r6, #0
 800be60:	341a      	adds	r4, #26
 800be62:	42b5      	cmp	r5, r6
 800be64:	d11a      	bne.n	800be9c <_printf_common+0xc8>
 800be66:	2000      	movs	r0, #0
 800be68:	e008      	b.n	800be7c <_printf_common+0xa8>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4652      	mov	r2, sl
 800be6e:	4649      	mov	r1, r9
 800be70:	4638      	mov	r0, r7
 800be72:	47c0      	blx	r8
 800be74:	3001      	adds	r0, #1
 800be76:	d103      	bne.n	800be80 <_printf_common+0xac>
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be80:	3501      	adds	r5, #1
 800be82:	e7c6      	b.n	800be12 <_printf_common+0x3e>
 800be84:	18e1      	adds	r1, r4, r3
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	2030      	movs	r0, #48	; 0x30
 800be8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be8e:	4422      	add	r2, r4
 800be90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be98:	3302      	adds	r3, #2
 800be9a:	e7c7      	b.n	800be2c <_printf_common+0x58>
 800be9c:	2301      	movs	r3, #1
 800be9e:	4622      	mov	r2, r4
 800bea0:	4649      	mov	r1, r9
 800bea2:	4638      	mov	r0, r7
 800bea4:	47c0      	blx	r8
 800bea6:	3001      	adds	r0, #1
 800bea8:	d0e6      	beq.n	800be78 <_printf_common+0xa4>
 800beaa:	3601      	adds	r6, #1
 800beac:	e7d9      	b.n	800be62 <_printf_common+0x8e>
	...

0800beb0 <_printf_i>:
 800beb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beb4:	7e0f      	ldrb	r7, [r1, #24]
 800beb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800beb8:	2f78      	cmp	r7, #120	; 0x78
 800beba:	4691      	mov	r9, r2
 800bebc:	4680      	mov	r8, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	469a      	mov	sl, r3
 800bec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bec6:	d807      	bhi.n	800bed8 <_printf_i+0x28>
 800bec8:	2f62      	cmp	r7, #98	; 0x62
 800beca:	d80a      	bhi.n	800bee2 <_printf_i+0x32>
 800becc:	2f00      	cmp	r7, #0
 800bece:	f000 80d4 	beq.w	800c07a <_printf_i+0x1ca>
 800bed2:	2f58      	cmp	r7, #88	; 0x58
 800bed4:	f000 80c0 	beq.w	800c058 <_printf_i+0x1a8>
 800bed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bedc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bee0:	e03a      	b.n	800bf58 <_printf_i+0xa8>
 800bee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bee6:	2b15      	cmp	r3, #21
 800bee8:	d8f6      	bhi.n	800bed8 <_printf_i+0x28>
 800beea:	a101      	add	r1, pc, #4	; (adr r1, 800bef0 <_printf_i+0x40>)
 800beec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bef0:	0800bf49 	.word	0x0800bf49
 800bef4:	0800bf5d 	.word	0x0800bf5d
 800bef8:	0800bed9 	.word	0x0800bed9
 800befc:	0800bed9 	.word	0x0800bed9
 800bf00:	0800bed9 	.word	0x0800bed9
 800bf04:	0800bed9 	.word	0x0800bed9
 800bf08:	0800bf5d 	.word	0x0800bf5d
 800bf0c:	0800bed9 	.word	0x0800bed9
 800bf10:	0800bed9 	.word	0x0800bed9
 800bf14:	0800bed9 	.word	0x0800bed9
 800bf18:	0800bed9 	.word	0x0800bed9
 800bf1c:	0800c061 	.word	0x0800c061
 800bf20:	0800bf89 	.word	0x0800bf89
 800bf24:	0800c01b 	.word	0x0800c01b
 800bf28:	0800bed9 	.word	0x0800bed9
 800bf2c:	0800bed9 	.word	0x0800bed9
 800bf30:	0800c083 	.word	0x0800c083
 800bf34:	0800bed9 	.word	0x0800bed9
 800bf38:	0800bf89 	.word	0x0800bf89
 800bf3c:	0800bed9 	.word	0x0800bed9
 800bf40:	0800bed9 	.word	0x0800bed9
 800bf44:	0800c023 	.word	0x0800c023
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	1d1a      	adds	r2, r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	602a      	str	r2, [r5, #0]
 800bf50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e09f      	b.n	800c09c <_printf_i+0x1ec>
 800bf5c:	6820      	ldr	r0, [r4, #0]
 800bf5e:	682b      	ldr	r3, [r5, #0]
 800bf60:	0607      	lsls	r7, r0, #24
 800bf62:	f103 0104 	add.w	r1, r3, #4
 800bf66:	6029      	str	r1, [r5, #0]
 800bf68:	d501      	bpl.n	800bf6e <_printf_i+0xbe>
 800bf6a:	681e      	ldr	r6, [r3, #0]
 800bf6c:	e003      	b.n	800bf76 <_printf_i+0xc6>
 800bf6e:	0646      	lsls	r6, r0, #25
 800bf70:	d5fb      	bpl.n	800bf6a <_printf_i+0xba>
 800bf72:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf76:	2e00      	cmp	r6, #0
 800bf78:	da03      	bge.n	800bf82 <_printf_i+0xd2>
 800bf7a:	232d      	movs	r3, #45	; 0x2d
 800bf7c:	4276      	negs	r6, r6
 800bf7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf82:	485a      	ldr	r0, [pc, #360]	; (800c0ec <_printf_i+0x23c>)
 800bf84:	230a      	movs	r3, #10
 800bf86:	e012      	b.n	800bfae <_printf_i+0xfe>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	6820      	ldr	r0, [r4, #0]
 800bf8c:	1d19      	adds	r1, r3, #4
 800bf8e:	6029      	str	r1, [r5, #0]
 800bf90:	0605      	lsls	r5, r0, #24
 800bf92:	d501      	bpl.n	800bf98 <_printf_i+0xe8>
 800bf94:	681e      	ldr	r6, [r3, #0]
 800bf96:	e002      	b.n	800bf9e <_printf_i+0xee>
 800bf98:	0641      	lsls	r1, r0, #25
 800bf9a:	d5fb      	bpl.n	800bf94 <_printf_i+0xe4>
 800bf9c:	881e      	ldrh	r6, [r3, #0]
 800bf9e:	4853      	ldr	r0, [pc, #332]	; (800c0ec <_printf_i+0x23c>)
 800bfa0:	2f6f      	cmp	r7, #111	; 0x6f
 800bfa2:	bf0c      	ite	eq
 800bfa4:	2308      	moveq	r3, #8
 800bfa6:	230a      	movne	r3, #10
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfae:	6865      	ldr	r5, [r4, #4]
 800bfb0:	60a5      	str	r5, [r4, #8]
 800bfb2:	2d00      	cmp	r5, #0
 800bfb4:	bfa2      	ittt	ge
 800bfb6:	6821      	ldrge	r1, [r4, #0]
 800bfb8:	f021 0104 	bicge.w	r1, r1, #4
 800bfbc:	6021      	strge	r1, [r4, #0]
 800bfbe:	b90e      	cbnz	r6, 800bfc4 <_printf_i+0x114>
 800bfc0:	2d00      	cmp	r5, #0
 800bfc2:	d04b      	beq.n	800c05c <_printf_i+0x1ac>
 800bfc4:	4615      	mov	r5, r2
 800bfc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfca:	fb03 6711 	mls	r7, r3, r1, r6
 800bfce:	5dc7      	ldrb	r7, [r0, r7]
 800bfd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfd4:	4637      	mov	r7, r6
 800bfd6:	42bb      	cmp	r3, r7
 800bfd8:	460e      	mov	r6, r1
 800bfda:	d9f4      	bls.n	800bfc6 <_printf_i+0x116>
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	d10b      	bne.n	800bff8 <_printf_i+0x148>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	07de      	lsls	r6, r3, #31
 800bfe4:	d508      	bpl.n	800bff8 <_printf_i+0x148>
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	4299      	cmp	r1, r3
 800bfec:	bfde      	ittt	le
 800bfee:	2330      	movle	r3, #48	; 0x30
 800bff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bff8:	1b52      	subs	r2, r2, r5
 800bffa:	6122      	str	r2, [r4, #16]
 800bffc:	f8cd a000 	str.w	sl, [sp]
 800c000:	464b      	mov	r3, r9
 800c002:	aa03      	add	r2, sp, #12
 800c004:	4621      	mov	r1, r4
 800c006:	4640      	mov	r0, r8
 800c008:	f7ff fee4 	bl	800bdd4 <_printf_common>
 800c00c:	3001      	adds	r0, #1
 800c00e:	d14a      	bne.n	800c0a6 <_printf_i+0x1f6>
 800c010:	f04f 30ff 	mov.w	r0, #4294967295
 800c014:	b004      	add	sp, #16
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	f043 0320 	orr.w	r3, r3, #32
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	4833      	ldr	r0, [pc, #204]	; (800c0f0 <_printf_i+0x240>)
 800c024:	2778      	movs	r7, #120	; 0x78
 800c026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	6829      	ldr	r1, [r5, #0]
 800c02e:	061f      	lsls	r7, r3, #24
 800c030:	f851 6b04 	ldr.w	r6, [r1], #4
 800c034:	d402      	bmi.n	800c03c <_printf_i+0x18c>
 800c036:	065f      	lsls	r7, r3, #25
 800c038:	bf48      	it	mi
 800c03a:	b2b6      	uxthmi	r6, r6
 800c03c:	07df      	lsls	r7, r3, #31
 800c03e:	bf48      	it	mi
 800c040:	f043 0320 	orrmi.w	r3, r3, #32
 800c044:	6029      	str	r1, [r5, #0]
 800c046:	bf48      	it	mi
 800c048:	6023      	strmi	r3, [r4, #0]
 800c04a:	b91e      	cbnz	r6, 800c054 <_printf_i+0x1a4>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	f023 0320 	bic.w	r3, r3, #32
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	2310      	movs	r3, #16
 800c056:	e7a7      	b.n	800bfa8 <_printf_i+0xf8>
 800c058:	4824      	ldr	r0, [pc, #144]	; (800c0ec <_printf_i+0x23c>)
 800c05a:	e7e4      	b.n	800c026 <_printf_i+0x176>
 800c05c:	4615      	mov	r5, r2
 800c05e:	e7bd      	b.n	800bfdc <_printf_i+0x12c>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	6826      	ldr	r6, [r4, #0]
 800c064:	6961      	ldr	r1, [r4, #20]
 800c066:	1d18      	adds	r0, r3, #4
 800c068:	6028      	str	r0, [r5, #0]
 800c06a:	0635      	lsls	r5, r6, #24
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	d501      	bpl.n	800c074 <_printf_i+0x1c4>
 800c070:	6019      	str	r1, [r3, #0]
 800c072:	e002      	b.n	800c07a <_printf_i+0x1ca>
 800c074:	0670      	lsls	r0, r6, #25
 800c076:	d5fb      	bpl.n	800c070 <_printf_i+0x1c0>
 800c078:	8019      	strh	r1, [r3, #0]
 800c07a:	2300      	movs	r3, #0
 800c07c:	6123      	str	r3, [r4, #16]
 800c07e:	4615      	mov	r5, r2
 800c080:	e7bc      	b.n	800bffc <_printf_i+0x14c>
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	1d1a      	adds	r2, r3, #4
 800c086:	602a      	str	r2, [r5, #0]
 800c088:	681d      	ldr	r5, [r3, #0]
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	2100      	movs	r1, #0
 800c08e:	4628      	mov	r0, r5
 800c090:	f7f4 f8a6 	bl	80001e0 <memchr>
 800c094:	b108      	cbz	r0, 800c09a <_printf_i+0x1ea>
 800c096:	1b40      	subs	r0, r0, r5
 800c098:	6060      	str	r0, [r4, #4]
 800c09a:	6863      	ldr	r3, [r4, #4]
 800c09c:	6123      	str	r3, [r4, #16]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0a4:	e7aa      	b.n	800bffc <_printf_i+0x14c>
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	47d0      	blx	sl
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d0ad      	beq.n	800c010 <_printf_i+0x160>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	079b      	lsls	r3, r3, #30
 800c0b8:	d413      	bmi.n	800c0e2 <_printf_i+0x232>
 800c0ba:	68e0      	ldr	r0, [r4, #12]
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	4298      	cmp	r0, r3
 800c0c0:	bfb8      	it	lt
 800c0c2:	4618      	movlt	r0, r3
 800c0c4:	e7a6      	b.n	800c014 <_printf_i+0x164>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4632      	mov	r2, r6
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	47d0      	blx	sl
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d09d      	beq.n	800c010 <_printf_i+0x160>
 800c0d4:	3501      	adds	r5, #1
 800c0d6:	68e3      	ldr	r3, [r4, #12]
 800c0d8:	9903      	ldr	r1, [sp, #12]
 800c0da:	1a5b      	subs	r3, r3, r1
 800c0dc:	42ab      	cmp	r3, r5
 800c0de:	dcf2      	bgt.n	800c0c6 <_printf_i+0x216>
 800c0e0:	e7eb      	b.n	800c0ba <_printf_i+0x20a>
 800c0e2:	2500      	movs	r5, #0
 800c0e4:	f104 0619 	add.w	r6, r4, #25
 800c0e8:	e7f5      	b.n	800c0d6 <_printf_i+0x226>
 800c0ea:	bf00      	nop
 800c0ec:	0800cc11 	.word	0x0800cc11
 800c0f0:	0800cc22 	.word	0x0800cc22

0800c0f4 <__sflags>:
 800c0f4:	780b      	ldrb	r3, [r1, #0]
 800c0f6:	2b72      	cmp	r3, #114	; 0x72
 800c0f8:	b530      	push	{r4, r5, lr}
 800c0fa:	d022      	beq.n	800c142 <__sflags+0x4e>
 800c0fc:	2b77      	cmp	r3, #119	; 0x77
 800c0fe:	d024      	beq.n	800c14a <__sflags+0x56>
 800c100:	2b61      	cmp	r3, #97	; 0x61
 800c102:	d027      	beq.n	800c154 <__sflags+0x60>
 800c104:	2316      	movs	r3, #22
 800c106:	6003      	str	r3, [r0, #0]
 800c108:	2000      	movs	r0, #0
 800c10a:	bd30      	pop	{r4, r5, pc}
 800c10c:	2d62      	cmp	r5, #98	; 0x62
 800c10e:	d012      	beq.n	800c136 <__sflags+0x42>
 800c110:	2d78      	cmp	r5, #120	; 0x78
 800c112:	d013      	beq.n	800c13c <__sflags+0x48>
 800c114:	2d2b      	cmp	r5, #43	; 0x2b
 800c116:	d107      	bne.n	800c128 <__sflags+0x34>
 800c118:	f020 001c 	bic.w	r0, r0, #28
 800c11c:	f023 0303 	bic.w	r3, r3, #3
 800c120:	f040 0010 	orr.w	r0, r0, #16
 800c124:	f043 0302 	orr.w	r3, r3, #2
 800c128:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c12c:	2d00      	cmp	r5, #0
 800c12e:	d1ed      	bne.n	800c10c <__sflags+0x18>
 800c130:	4323      	orrs	r3, r4
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	e7e9      	b.n	800c10a <__sflags+0x16>
 800c136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c13a:	e7f5      	b.n	800c128 <__sflags+0x34>
 800c13c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c140:	e7f2      	b.n	800c128 <__sflags+0x34>
 800c142:	2400      	movs	r4, #0
 800c144:	4623      	mov	r3, r4
 800c146:	2004      	movs	r0, #4
 800c148:	e7ee      	b.n	800c128 <__sflags+0x34>
 800c14a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800c14e:	2301      	movs	r3, #1
 800c150:	2008      	movs	r0, #8
 800c152:	e7e9      	b.n	800c128 <__sflags+0x34>
 800c154:	f44f 7402 	mov.w	r4, #520	; 0x208
 800c158:	2301      	movs	r3, #1
 800c15a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c15e:	e7e3      	b.n	800c128 <__sflags+0x34>

0800c160 <__swhatbuf_r>:
 800c160:	b570      	push	{r4, r5, r6, lr}
 800c162:	460c      	mov	r4, r1
 800c164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c168:	2900      	cmp	r1, #0
 800c16a:	b096      	sub	sp, #88	; 0x58
 800c16c:	4615      	mov	r5, r2
 800c16e:	461e      	mov	r6, r3
 800c170:	da0d      	bge.n	800c18e <__swhatbuf_r+0x2e>
 800c172:	89a3      	ldrh	r3, [r4, #12]
 800c174:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c178:	f04f 0100 	mov.w	r1, #0
 800c17c:	bf0c      	ite	eq
 800c17e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c182:	2340      	movne	r3, #64	; 0x40
 800c184:	2000      	movs	r0, #0
 800c186:	6031      	str	r1, [r6, #0]
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	b016      	add	sp, #88	; 0x58
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
 800c18e:	466a      	mov	r2, sp
 800c190:	f000 f848 	bl	800c224 <_fstat_r>
 800c194:	2800      	cmp	r0, #0
 800c196:	dbec      	blt.n	800c172 <__swhatbuf_r+0x12>
 800c198:	9901      	ldr	r1, [sp, #4]
 800c19a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c19e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c1a2:	4259      	negs	r1, r3
 800c1a4:	4159      	adcs	r1, r3
 800c1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1aa:	e7eb      	b.n	800c184 <__swhatbuf_r+0x24>

0800c1ac <__smakebuf_r>:
 800c1ac:	898b      	ldrh	r3, [r1, #12]
 800c1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1b0:	079d      	lsls	r5, r3, #30
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	d507      	bpl.n	800c1c8 <__smakebuf_r+0x1c>
 800c1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	6163      	str	r3, [r4, #20]
 800c1c4:	b002      	add	sp, #8
 800c1c6:	bd70      	pop	{r4, r5, r6, pc}
 800c1c8:	ab01      	add	r3, sp, #4
 800c1ca:	466a      	mov	r2, sp
 800c1cc:	f7ff ffc8 	bl	800c160 <__swhatbuf_r>
 800c1d0:	9900      	ldr	r1, [sp, #0]
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7fe febf 	bl	800af58 <_malloc_r>
 800c1da:	b948      	cbnz	r0, 800c1f0 <__smakebuf_r+0x44>
 800c1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e0:	059a      	lsls	r2, r3, #22
 800c1e2:	d4ef      	bmi.n	800c1c4 <__smakebuf_r+0x18>
 800c1e4:	f023 0303 	bic.w	r3, r3, #3
 800c1e8:	f043 0302 	orr.w	r3, r3, #2
 800c1ec:	81a3      	strh	r3, [r4, #12]
 800c1ee:	e7e3      	b.n	800c1b8 <__smakebuf_r+0xc>
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	6020      	str	r0, [r4, #0]
 800c1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f8:	81a3      	strh	r3, [r4, #12]
 800c1fa:	9b00      	ldr	r3, [sp, #0]
 800c1fc:	6163      	str	r3, [r4, #20]
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	6120      	str	r0, [r4, #16]
 800c202:	b15b      	cbz	r3, 800c21c <__smakebuf_r+0x70>
 800c204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c208:	4630      	mov	r0, r6
 800c20a:	f000 f81d 	bl	800c248 <_isatty_r>
 800c20e:	b128      	cbz	r0, 800c21c <__smakebuf_r+0x70>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	f043 0301 	orr.w	r3, r3, #1
 800c21a:	81a3      	strh	r3, [r4, #12]
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	431d      	orrs	r5, r3
 800c220:	81a5      	strh	r5, [r4, #12]
 800c222:	e7cf      	b.n	800c1c4 <__smakebuf_r+0x18>

0800c224 <_fstat_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	; (800c244 <_fstat_r+0x20>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	4611      	mov	r1, r2
 800c230:	602b      	str	r3, [r5, #0]
 800c232:	f7f4 fdbc 	bl	8000dae <_fstat>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	d102      	bne.n	800c240 <_fstat_r+0x1c>
 800c23a:	682b      	ldr	r3, [r5, #0]
 800c23c:	b103      	cbz	r3, 800c240 <_fstat_r+0x1c>
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	bd38      	pop	{r3, r4, r5, pc}
 800c242:	bf00      	nop
 800c244:	20000278 	.word	0x20000278

0800c248 <_isatty_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d06      	ldr	r5, [pc, #24]	; (800c264 <_isatty_r+0x1c>)
 800c24c:	2300      	movs	r3, #0
 800c24e:	4604      	mov	r4, r0
 800c250:	4608      	mov	r0, r1
 800c252:	602b      	str	r3, [r5, #0]
 800c254:	f7f4 fdbb 	bl	8000dce <_isatty>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d102      	bne.n	800c262 <_isatty_r+0x1a>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	b103      	cbz	r3, 800c262 <_isatty_r+0x1a>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	20000278 	.word	0x20000278

0800c268 <_init>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr

0800c274 <_fini>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr
